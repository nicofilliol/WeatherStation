
WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08008b88  08008b88  00018b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fcc  08008fcc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fd4  08008fd4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fd4  08008fd4  00018fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fd8  08008fd8  00018fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200001dc  080091b8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  080091b8  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae66  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003112  00000000  00000000  0003b072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0003e188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001500  00000000  00000000  0003f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a4c4  00000000  00000000  00040cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d2d  00000000  00000000  0006b184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108d1d  00000000  00000000  00083eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018cbce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ff0  00000000  00000000  0018cc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b6c 	.word	0x08008b6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008b6c 	.word	0x08008b6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <__io_putchar>:
/**
 * @brief PUTCHAR_PROTOTYPE function, called from printf
 * @param ch 	: Char to be written to console
 * @return
 */
PUTCHAR_PROTOTYPE {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
#ifdef USE_ITM
	transmit_char_ITM((char) ch);
#else
    transmit_char_serial((char) ch);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 f815 	bl	8000f7c <transmit_char_serial>
#endif
    return 0;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <__io_getchar>:
/**
 * @brief GETCHAR_PROTOTYPE function, called from scanf
 * @return read out character
 */
GETCHAR_PROTOTYPE {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
    char ch;
#ifdef USE_ITM
	ch = receive_char_ITM();
	transmit_char_ITM(ch);
#else
    ch = receive_char_serial();
 8000f62:	f000 f81d 	bl	8000fa0 <receive_char_serial>
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
    transmit_char_serial(ch);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f805 	bl	8000f7c <transmit_char_serial>
#endif
    return (int) ch;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <transmit_char_serial>:

static void transmit_char_serial(char ch) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&UART_HANDLE, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000f86:	1df9      	adds	r1, r7, #7
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4803      	ldr	r0, [pc, #12]	; (8000f9c <transmit_char_serial+0x20>)
 8000f90:	f004 fb7a 	bl	8005688 <HAL_UART_Transmit>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200002b4 	.word	0x200002b4

08000fa0 <receive_char_serial>:
static char receive_char_serial() {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
    char ch;
    HAL_UART_Receive(&UART_HANDLE, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000fa6:	1df9      	adds	r1, r7, #7
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fac:	2201      	movs	r2, #1
 8000fae:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <receive_char_serial+0x20>)
 8000fb0:	f004 fbfe 	bl	80057b0 <HAL_UART_Receive>
    return ch;
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200002b4 	.word	0x200002b4

08000fc4 <read_adc>:
#include "math.h"

#define ADC_TIMEOUT 1000
#define ADC_BIT_RESOLUTION 12

uint32_t read_adc(ADC_HandleTypeDef *hadc, void (*error_handler)()) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]

	uint32_t value = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]

	/* Start ADC conversion */
	if (HAL_ADC_Start(hadc) != HAL_OK) {
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f001 f918 	bl	8002208 <HAL_ADC_Start>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <read_adc+0x1e>
		error_handler();
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	4798      	blx	r3
	}

	/* Wait conversion till conversion has finished */
	if (HAL_ADC_PollForConversion(hadc, ADC_TIMEOUT) != HAL_OK) {
 8000fe2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f001 f9fc 	bl	80023e4 <HAL_ADC_PollForConversion>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <read_adc+0x32>
		error_handler();
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	4798      	blx	r3
	}

	/* Read value conversion result */
	value = HAL_ADC_GetValue(hadc);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f001 facc 	bl	8002594 <HAL_ADC_GetValue>
 8000ffc:	60f8      	str	r0, [r7, #12]

	/* Stop ADC conversion */
	if (HAL_ADC_Stop(hadc) != HAL_OK) {
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f001 f9bc 	bl	800237c <HAL_ADC_Stop>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <read_adc+0x4a>
		error_handler();
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	4798      	blx	r3
	}

	return value;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <read_light_sensor>:

float read_light_sensor(ADC_HandleTypeDef *hadc, void (*error_handler)()) {
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	uint32_t sensor_value = read_adc(hadc, error_handler);
 8001022:	6839      	ldr	r1, [r7, #0]
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ffcd 	bl	8000fc4 <read_adc>
 800102a:	60f8      	str	r0, [r7, #12]

	// Convert raw ADC value to light value
	float R_sensor = ((pow(2, ADC_BIT_RESOLUTION)-1) - sensor_value) * 10.0 / sensor_value;
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f7ff fa69 	bl	8000504 <__aeabi_ui2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	a117      	add	r1, pc, #92	; (adr r1, 8001094 <read_light_sensor+0x7c>)
 8001038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800103c:	f7ff f924 	bl	8000288 <__aeabi_dsub>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <read_light_sensor+0x78>)
 800104e:	f7ff fad3 	bl	80005f8 <__aeabi_dmul>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4614      	mov	r4, r2
 8001058:	461d      	mov	r5, r3
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f7ff fa52 	bl	8000504 <__aeabi_ui2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4620      	mov	r0, r4
 8001066:	4629      	mov	r1, r5
 8001068:	f7ff fbf0 	bl	800084c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fd98 	bl	8000ba8 <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	60bb      	str	r3, [r7, #8]
	return R_sensor;
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	ee07 3a90 	vmov	s15, r3
}
 8001082:	eeb0 0a67 	vmov.f32	s0, s15
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bdb0      	pop	{r4, r5, r7, pc}
 800108c:	f3af 8000 	nop.w
 8001090:	40240000 	.word	0x40240000
 8001094:	00000000 	.word	0x00000000
 8001098:	40affe00 	.word	0x40affe00

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a2:	f000 fccc 	bl	8001a3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a6:	f000 f821 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010aa:	f000 f957 	bl	800135c <MX_GPIO_Init>
  MX_I2C1_Init();
 80010ae:	f000 f8e5 	bl	800127c <MX_I2C1_Init>
  MX_ADC1_Init();
 80010b2:	f000 f86d 	bl	8001190 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80010b6:	f000 f921 	bl	80012fc <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 //HAL_UART_Transmit(&huart1, "Test\r\n", 6, 1000);
	HAL_Delay(100);
 80010ba:	2064      	movs	r0, #100	; 0x64
 80010bc:	f000 fcf8 	bl	8001ab0 <HAL_Delay>
	// Read data from light sensor
	light_sensor_R = read_light_sensor(&hadc1, Error_Handler);
 80010c0:	4907      	ldr	r1, [pc, #28]	; (80010e0 <main+0x44>)
 80010c2:	4808      	ldr	r0, [pc, #32]	; (80010e4 <main+0x48>)
 80010c4:	f7ff ffa8 	bl	8001018 <read_light_sensor>
 80010c8:	ed87 0a01 	vstr	s0, [r7, #4]
	printf("Light sensor: %.3f\r\n", light_sensor_R);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fa3b 	bl	8000548 <__aeabi_f2d>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4804      	ldr	r0, [pc, #16]	; (80010e8 <main+0x4c>)
 80010d8:	f005 fcca 	bl	8006a70 <iprintf>
	HAL_Delay(100);
 80010dc:	e7ed      	b.n	80010ba <main+0x1e>
 80010de:	bf00      	nop
 80010e0:	08001445 	.word	0x08001445
 80010e4:	20000250 	.word	0x20000250
 80010e8:	08008b88 	.word	0x08008b88

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b096      	sub	sp, #88	; 0x58
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2244      	movs	r2, #68	; 0x44
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 f846 	bl	800618c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800110e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001112:	f002 fc69 	bl	80039e8 <HAL_PWREx_ControlVoltageScaling>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800111c:	f000 f992 	bl	8001444 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001120:	2310      	movs	r3, #16
 8001122:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001124:	2301      	movs	r3, #1
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800112c:	2360      	movs	r3, #96	; 0x60
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001130:	2302      	movs	r3, #2
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001134:	2301      	movs	r3, #1
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800113c:	2328      	movs	r3, #40	; 0x28
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001140:	2307      	movs	r3, #7
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4618      	mov	r0, r3
 8001152:	f002 fc9f 	bl	8003a94 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800115c:	f000 f972 	bl	8001444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2303      	movs	r3, #3
 8001166:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	2104      	movs	r1, #4
 8001178:	4618      	mov	r0, r3
 800117a:	f003 f871 	bl	8004260 <HAL_RCC_ClockConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001184:	f000 f95e 	bl	8001444 <Error_Handler>
  }
}
 8001188:	bf00      	nop
 800118a:	3758      	adds	r7, #88	; 0x58
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
 80011b0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <MX_ADC1_Init+0xe0>)
 80011b4:	4a2f      	ldr	r2, [pc, #188]	; (8001274 <MX_ADC1_Init+0xe4>)
 80011b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MX_ADC1_Init+0xe0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011be:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <MX_ADC1_Init+0xe0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_ADC1_Init+0xe0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <MX_ADC1_Init+0xe0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <MX_ADC1_Init+0xe0>)
 80011d2:	2204      	movs	r2, #4
 80011d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <MX_ADC1_Init+0xe0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <MX_ADC1_Init+0xe0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <MX_ADC1_Init+0xe0>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <MX_ADC1_Init+0xe0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_ADC1_Init+0xe0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <MX_ADC1_Init+0xe0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_ADC1_Init+0xe0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_ADC1_Init+0xe0>)
 8001206:	2200      	movs	r2, #0
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_ADC1_Init+0xe0>)
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001212:	4817      	ldr	r0, [pc, #92]	; (8001270 <MX_ADC1_Init+0xe0>)
 8001214:	f000 fea2 	bl	8001f5c <HAL_ADC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800121e:	f000 f911 	bl	8001444 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	4810      	ldr	r0, [pc, #64]	; (8001270 <MX_ADC1_Init+0xe0>)
 800122e:	f001 ff53 	bl	80030d8 <HAL_ADCEx_MultiModeConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001238:	f000 f904 	bl	8001444 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_ADC1_Init+0xe8>)
 800123e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001240:	2306      	movs	r3, #6
 8001242:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001248:	237f      	movs	r3, #127	; 0x7f
 800124a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800124c:	2304      	movs	r3, #4
 800124e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_ADC1_Init+0xe0>)
 800125a:	f001 f9a9 	bl	80025b0 <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001264:	f000 f8ee 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000250 	.word	0x20000250
 8001274:	50040000 	.word	0x50040000
 8001278:	3ac04000 	.word	0x3ac04000

0800127c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_I2C1_Init+0x74>)
 8001282:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <MX_I2C1_Init+0x78>)
 8001284:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_I2C1_Init+0x74>)
 8001288:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <MX_I2C1_Init+0x7c>)
 800128a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_I2C1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_I2C1_Init+0x74>)
 8001294:	2201      	movs	r2, #1
 8001296:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_I2C1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b6:	480e      	ldr	r0, [pc, #56]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012b8:	f002 fa62 	bl	8003780 <HAL_I2C_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012c2:	f000 f8bf 	bl	8001444 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c6:	2100      	movs	r1, #0
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012ca:	f002 fae8 	bl	800389e <HAL_I2CEx_ConfigAnalogFilter>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012d4:	f000 f8b6 	bl	8001444 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012d8:	2100      	movs	r1, #0
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012dc:	f002 fb2a 	bl	8003934 <HAL_I2CEx_ConfigDigitalFilter>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012e6:	f000 f8ad 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000204 	.word	0x20000204
 80012f4:	40005400 	.word	0x40005400
 80012f8:	10909cec 	.word	0x10909cec

080012fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001302:	4a15      	ldr	r2, [pc, #84]	; (8001358 <MX_USART1_UART_Init+0x5c>)
 8001304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_USART1_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_USART1_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_USART1_UART_Init+0x58>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001340:	f004 f954 	bl	80055ec <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800134a:	f000 f87b 	bl	8001444 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */
  //HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE END USART1_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200002b4 	.word	0x200002b4
 8001358:	40013800 	.word	0x40013800

0800135c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <MX_GPIO_Init+0xb8>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a27      	ldr	r2, [pc, #156]	; (8001414 <MX_GPIO_Init+0xb8>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <MX_GPIO_Init+0xb8>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <MX_GPIO_Init+0xb8>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a21      	ldr	r2, [pc, #132]	; (8001414 <MX_GPIO_Init+0xb8>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <MX_GPIO_Init+0xb8>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <MX_GPIO_Init+0xb8>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <MX_GPIO_Init+0xb8>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_GPIO_Init+0xb8>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2101      	movs	r1, #1
 80013be:	4816      	ldr	r0, [pc, #88]	; (8001418 <MX_GPIO_Init+0xbc>)
 80013c0:	f002 f9c6 	bl	8003750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ca:	4814      	ldr	r0, [pc, #80]	; (800141c <MX_GPIO_Init+0xc0>)
 80013cc:	f002 f9c0 	bl	8003750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013d0:	2301      	movs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013d4:	2311      	movs	r3, #17
 80013d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	480c      	ldr	r0, [pc, #48]	; (8001418 <MX_GPIO_Init+0xbc>)
 80013e8:	f002 f808 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013f2:	2311      	movs	r3, #17
 80013f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_GPIO_Init+0xc0>)
 8001406:	f001 fff9 	bl	80033fc <HAL_GPIO_Init>

}
 800140a:	bf00      	nop
 800140c:	3720      	adds	r7, #32
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	48000400 	.word	0x48000400
 800141c:	48000c00 	.word	0x48000c00

08001420 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a04      	ldr	r2, [pc, #16]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d101      	bne.n	8001436 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001432:	f000 fb1d 	bl	8001a70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40012c00 	.word	0x40012c00

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144c:	e7fe      	b.n	800144c <Error_Handler+0x8>
	...

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_MspInit+0x44>)
 8001458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145a:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <HAL_MspInit+0x44>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6613      	str	r3, [r2, #96]	; 0x60
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_MspInit+0x44>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_MspInit+0x44>)
 8001470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_MspInit+0x44>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6593      	str	r3, [r2, #88]	; 0x58
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_MspInit+0x44>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000

08001498 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ac      	sub	sp, #176	; 0xb0
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2288      	movs	r2, #136	; 0x88
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f004 fe67 	bl	800618c <memset>
  if(hadc->Instance==ADC1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a27      	ldr	r2, [pc, #156]	; (8001560 <HAL_ADC_MspInit+0xc8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d146      	bne.n	8001556 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014da:	2301      	movs	r3, #1
 80014dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80014de:	2318      	movs	r3, #24
 80014e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014e2:	2307      	movs	r3, #7
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014e6:	2302      	movs	r3, #2
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80014ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 f8e9 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001504:	f7ff ff9e 	bl	8001444 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <HAL_ADC_MspInit+0xcc>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150c:	4a15      	ldr	r2, [pc, #84]	; (8001564 <HAL_ADC_MspInit+0xcc>)
 800150e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001512:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_ADC_MspInit+0xcc>)
 8001516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_ADC_MspInit+0xcc>)
 8001522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001524:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <HAL_ADC_MspInit+0xcc>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <HAL_ADC_MspInit+0xcc>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = LIGHT_SENSOR_PIN_Pin;
 8001538:	2320      	movs	r3, #32
 800153a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800153e:	230b      	movs	r3, #11
 8001540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(LIGHT_SENSOR_PIN_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <HAL_ADC_MspInit+0xd0>)
 8001552:	f001 ff53 	bl	80033fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	37b0      	adds	r7, #176	; 0xb0
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	50040000 	.word	0x50040000
 8001564:	40021000 	.word	0x40021000
 8001568:	48000800 	.word	0x48000800

0800156c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0ac      	sub	sp, #176	; 0xb0
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2288      	movs	r2, #136	; 0x88
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f004 fdfd 	bl	800618c <memset>
  if(hi2c->Instance==I2C1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a21      	ldr	r2, [pc, #132]	; (800161c <HAL_I2C_MspInit+0xb0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d13b      	bne.n	8001614 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800159c:	2340      	movs	r3, #64	; 0x40
 800159e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 f891 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015b4:	f7ff ff46 	bl	8001444 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_I2C_MspInit+0xb4>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	4a18      	ldr	r2, [pc, #96]	; (8001620 <HAL_I2C_MspInit+0xb4>)
 80015be:	f043 0302 	orr.w	r3, r3, #2
 80015c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_I2C_MspInit+0xb4>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d8:	2312      	movs	r3, #18
 80015da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ea:	2304      	movs	r3, #4
 80015ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015f4:	4619      	mov	r1, r3
 80015f6:	480b      	ldr	r0, [pc, #44]	; (8001624 <HAL_I2C_MspInit+0xb8>)
 80015f8:	f001 ff00 	bl	80033fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_I2C_MspInit+0xb4>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_I2C_MspInit+0xb4>)
 8001602:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001606:	6593      	str	r3, [r2, #88]	; 0x58
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_I2C_MspInit+0xb4>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	37b0      	adds	r7, #176	; 0xb0
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40005400 	.word	0x40005400
 8001620:	40021000 	.word	0x40021000
 8001624:	48000400 	.word	0x48000400

08001628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b0ac      	sub	sp, #176	; 0xb0
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2288      	movs	r2, #136	; 0x88
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f004 fd9f 	bl	800618c <memset>
  if(huart->Instance==USART1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a21      	ldr	r2, [pc, #132]	; (80016d8 <HAL_UART_MspInit+0xb0>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d13a      	bne.n	80016ce <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001658:	2301      	movs	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800165c:	2300      	movs	r3, #0
 800165e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4618      	mov	r0, r3
 8001666:	f003 f833 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001670:	f7ff fee8 	bl	8001444 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_UART_MspInit+0xb4>)
 8001676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001678:	4a18      	ldr	r2, [pc, #96]	; (80016dc <HAL_UART_MspInit+0xb4>)
 800167a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167e:	6613      	str	r3, [r2, #96]	; 0x60
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_UART_MspInit+0xb4>)
 8001682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_UART_MspInit+0xb4>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	4a12      	ldr	r2, [pc, #72]	; (80016dc <HAL_UART_MspInit+0xb4>)
 8001692:	f043 0302 	orr.w	r3, r3, #2
 8001696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_UART_MspInit+0xb4>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016a4:	23c0      	movs	r3, #192	; 0xc0
 80016a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016bc:	2307      	movs	r3, #7
 80016be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_UART_MspInit+0xb8>)
 80016ca:	f001 fe97 	bl	80033fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	37b0      	adds	r7, #176	; 0xb0
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40013800 	.word	0x40013800
 80016dc:	40021000 	.word	0x40021000
 80016e0:	48000400 	.word	0x48000400

080016e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	2019      	movs	r0, #25
 80016fa:	f001 fe55 	bl	80033a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80016fe:	2019      	movs	r0, #25
 8001700:	f001 fe6e 	bl	80033e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_InitTick+0x9c>)
 8001706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001708:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <HAL_InitTick+0x9c>)
 800170a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800170e:	6613      	str	r3, [r2, #96]	; 0x60
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_InitTick+0x9c>)
 8001712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800171c:	f107 0210 	add.w	r2, r7, #16
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f002 ff40 	bl	80045ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800172c:	f002 ff28 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 8001730:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001734:	4a13      	ldr	r2, [pc, #76]	; (8001784 <HAL_InitTick+0xa0>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	0c9b      	lsrs	r3, r3, #18
 800173c:	3b01      	subs	r3, #1
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_InitTick+0xa4>)
 8001742:	4a12      	ldr	r2, [pc, #72]	; (800178c <HAL_InitTick+0xa8>)
 8001744:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_InitTick+0xa4>)
 8001748:	f240 32e7 	movw	r2, #999	; 0x3e7
 800174c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800174e:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <HAL_InitTick+0xa4>)
 8001750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001752:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_InitTick+0xa4>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_InitTick+0xa4>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001760:	4809      	ldr	r0, [pc, #36]	; (8001788 <HAL_InitTick+0xa4>)
 8001762:	f003 fc71 	bl	8005048 <HAL_TIM_Base_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d104      	bne.n	8001776 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800176c:	4806      	ldr	r0, [pc, #24]	; (8001788 <HAL_InitTick+0xa4>)
 800176e:	f003 fccd 	bl	800510c <HAL_TIM_Base_Start_IT>
 8001772:	4603      	mov	r3, r0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3730      	adds	r7, #48	; 0x30
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000
 8001784:	431bde83 	.word	0x431bde83
 8001788:	20000338 	.word	0x20000338
 800178c:	40012c00 	.word	0x40012c00

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <NMI_Handler+0x4>

08001796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <MemManage_Handler+0x4>

080017a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <BusFault_Handler+0x4>

080017a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <UsageFault_Handler+0x4>

080017ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80017ee:	f003 fcfd 	bl	80051ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000338 	.word	0x20000338

080017fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
	return 1;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_kill>:

int _kill(int pid, int sig)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001816:	f004 fc8f 	bl	8006138 <__errno>
 800181a:	4603      	mov	r3, r0
 800181c:	2216      	movs	r2, #22
 800181e:	601a      	str	r2, [r3, #0]
	return -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_exit>:

void _exit (int status)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ffe7 	bl	800180c <_kill>
	while (1) {}		/* Make sure we hang here */
 800183e:	e7fe      	b.n	800183e <_exit+0x12>

08001840 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e00a      	b.n	8001868 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001852:	f7ff fb83 	bl	8000f5c <__io_getchar>
 8001856:	4601      	mov	r1, r0
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	60ba      	str	r2, [r7, #8]
 800185e:	b2ca      	uxtb	r2, r1
 8001860:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbf0      	blt.n	8001852 <_read+0x12>
	}

return len;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e009      	b.n	80018a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fb53 	bl	8000f40 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbf1      	blt.n	800188c <_write+0x12>
	}
	return len;
 80018a8:	687b      	ldr	r3, [r7, #4]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_close>:

int _close(int file)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
	return -1;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018da:	605a      	str	r2, [r3, #4]
	return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <_isatty>:

int _isatty(int file)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
	return 1;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
	return 0;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f004 fbf4 	bl	8006138 <__errno>
 8001950:	4603      	mov	r3, r0
 8001952:	220c      	movs	r2, #12
 8001954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20018000 	.word	0x20018000
 800197c:	00000400 	.word	0x00000400
 8001980:	200001f8 	.word	0x200001f8
 8001984:	20000398 	.word	0x20000398

08001988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <SystemInit+0x5c>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <SystemInit+0x5c>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <SystemInit+0x60>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a11      	ldr	r2, [pc, #68]	; (80019e8 <SystemInit+0x60>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <SystemInit+0x60>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <SystemInit+0x60>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <SystemInit+0x60>)
 80019b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <SystemInit+0x60>)
 80019c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <SystemInit+0x60>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <SystemInit+0x60>)
 80019cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SystemInit+0x60>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00
 80019e8:	40021000 	.word	0x40021000

080019ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019f0:	f7ff ffca 	bl	8001988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019f6:	e003      	b.n	8001a00 <LoopCopyDataInit>

080019f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019fe:	3104      	adds	r1, #4

08001a00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a00:	480a      	ldr	r0, [pc, #40]	; (8001a2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a08:	d3f6      	bcc.n	80019f8 <CopyDataInit>
	ldr	r2, =_sbss
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a0c:	e002      	b.n	8001a14 <LoopFillZerobss>

08001a0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a10:	f842 3b04 	str.w	r3, [r2], #4

08001a14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <LoopForever+0x16>)
	cmp	r2, r3
 8001a16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a18:	d3f9      	bcc.n	8001a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f004 fb93 	bl	8006144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a1e:	f7ff fb3d 	bl	800109c <main>

08001a22 <LoopForever>:

LoopForever:
    b LoopForever
 8001a22:	e7fe      	b.n	8001a22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a24:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001a28:	08008fdc 	.word	0x08008fdc
	ldr	r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a30:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001a34:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001a38:	20000398 	.word	0x20000398

08001a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC1_2_IRQHandler>

08001a3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f001 fca2 	bl	8003392 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a4e:	200f      	movs	r0, #15
 8001a50:	f7ff fe48 	bl	80016e4 <HAL_InitTick>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	71fb      	strb	r3, [r7, #7]
 8001a5e:	e001      	b.n	8001a64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a60:	f7ff fcf6 	bl	8001450 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a64:	79fb      	ldrb	r3, [r7, #7]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x20>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x24>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_IncTick+0x24>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008
 8001a94:	20000384 	.word	0x20000384

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000384 	.word	0x20000384

08001ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff ffee 	bl	8001a98 <HAL_GetTick>
 8001abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ac8:	d005      	beq.n	8001ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_Delay+0x44>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad6:	bf00      	nop
 8001ad8:	f7ff ffde 	bl	8001a98 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d8f7      	bhi.n	8001ad8 <HAL_Delay+0x28>
  {
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000008 	.word	0x20000008

08001af8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	609a      	str	r2, [r3, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3360      	adds	r3, #96	; 0x60
 8001b72:	461a      	mov	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <LL_ADC_SetOffset+0x44>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b98:	bf00      	nop
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	03fff000 	.word	0x03fff000

08001ba8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3360      	adds	r3, #96	; 0x60
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3360      	adds	r3, #96	; 0x60
 8001be4:	461a      	mov	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bfe:	bf00      	nop
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3330      	adds	r3, #48	; 0x30
 8001c40:	461a      	mov	r2, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	4413      	add	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	211f      	movs	r1, #31
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	0e9b      	lsrs	r3, r3, #26
 8001c68:	f003 011f 	and.w	r1, r3, #31
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	431a      	orrs	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c7c:	bf00      	nop
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3314      	adds	r3, #20
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	0e5b      	lsrs	r3, r3, #25
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	0d1b      	lsrs	r3, r3, #20
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	2107      	movs	r1, #7
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	0d1b      	lsrs	r3, r3, #20
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cd2:	bf00      	nop
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0318 	and.w	r3, r3, #24
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d04:	40d9      	lsrs	r1, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	400b      	ands	r3, r1
 8001d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	0007ffff 	.word	0x0007ffff

08001d28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 031f 	and.w	r3, r3, #31
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6093      	str	r3, [r2, #8]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d98:	d101      	bne.n	8001d9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001dbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001de8:	d101      	bne.n	8001dee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e38:	f043 0202 	orr.w	r2, r3, #2
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <LL_ADC_IsEnabled+0x18>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <LL_ADC_IsEnabled+0x1a>
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d101      	bne.n	8001e8a <LL_ADC_IsDisableOngoing+0x18>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <LL_ADC_IsDisableOngoing+0x1a>
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ea8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eac:	f043 0204 	orr.w	r2, r3, #4
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ed0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ed4:	f043 0210 	orr.w	r2, r3, #16
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d101      	bne.n	8001f00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f22:	f043 0220 	orr.w	r2, r3, #32
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e136      	b.n	80021e4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fa87 	bl	8001498 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fef1 	bl	8001d84 <LL_ADC_IsDeepPowerDownEnabled>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d004      	beq.n	8001fb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fed7 	bl	8001d60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ff0c 	bl	8001dd4 <LL_ADC_IsInternalRegulatorEnabled>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d115      	bne.n	8001fee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fef0 	bl	8001dac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fcc:	4b87      	ldr	r3, [pc, #540]	; (80021ec <HAL_ADC_Init+0x290>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	099b      	lsrs	r3, r3, #6
 8001fd2:	4a87      	ldr	r2, [pc, #540]	; (80021f0 <HAL_ADC_Init+0x294>)
 8001fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	3301      	adds	r3, #1
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fe0:	e002      	b.n	8001fe8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f9      	bne.n	8001fe2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff feee 	bl	8001dd4 <LL_ADC_IsInternalRegulatorEnabled>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10d      	bne.n	800201a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f043 0210 	orr.w	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	f043 0201 	orr.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ff62 	bl	8001ee8 <LL_ADC_REG_IsConversionOngoing>
 8002024:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b00      	cmp	r3, #0
 8002030:	f040 80cf 	bne.w	80021d2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f040 80cb 	bne.w	80021d2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002040:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002044:	f043 0202 	orr.w	r2, r3, #2
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fefb 	bl	8001e4c <LL_ADC_IsEnabled>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d115      	bne.n	8002088 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800205c:	4865      	ldr	r0, [pc, #404]	; (80021f4 <HAL_ADC_Init+0x298>)
 800205e:	f7ff fef5 	bl	8001e4c <LL_ADC_IsEnabled>
 8002062:	4604      	mov	r4, r0
 8002064:	4864      	ldr	r0, [pc, #400]	; (80021f8 <HAL_ADC_Init+0x29c>)
 8002066:	f7ff fef1 	bl	8001e4c <LL_ADC_IsEnabled>
 800206a:	4603      	mov	r3, r0
 800206c:	431c      	orrs	r4, r3
 800206e:	4863      	ldr	r0, [pc, #396]	; (80021fc <HAL_ADC_Init+0x2a0>)
 8002070:	f7ff feec 	bl	8001e4c <LL_ADC_IsEnabled>
 8002074:	4603      	mov	r3, r0
 8002076:	4323      	orrs	r3, r4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4619      	mov	r1, r3
 8002082:	485f      	ldr	r0, [pc, #380]	; (8002200 <HAL_ADC_Init+0x2a4>)
 8002084:	f7ff fd38 	bl	8001af8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7e5b      	ldrb	r3, [r3, #25]
 800208c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002092:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002098:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800209e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d106      	bne.n	80020c4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	3b01      	subs	r3, #1
 80020bc:	045b      	lsls	r3, r3, #17
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d009      	beq.n	80020e0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_ADC_Init+0x2a8>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	69b9      	ldr	r1, [r7, #24]
 80020f0:	430b      	orrs	r3, r1
 80020f2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fef5 	bl	8001ee8 <LL_ADC_REG_IsConversionOngoing>
 80020fe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff16 	bl	8001f36 <LL_ADC_INJ_IsConversionOngoing>
 800210a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d13d      	bne.n	800218e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d13a      	bne.n	800218e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800211c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002124:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002134:	f023 0302 	bic.w	r3, r3, #2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	69b9      	ldr	r1, [r7, #24]
 800213e:	430b      	orrs	r3, r1
 8002140:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002148:	2b01      	cmp	r3, #1
 800214a:	d118      	bne.n	800217e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002156:	f023 0304 	bic.w	r3, r3, #4
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002162:	4311      	orrs	r1, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002168:	4311      	orrs	r1, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800216e:	430a      	orrs	r2, r1
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	611a      	str	r2, [r3, #16]
 800217c:	e007      	b.n	800218e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d10c      	bne.n	80021b0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	f023 010f 	bic.w	r1, r3, #15
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	1e5a      	subs	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
 80021ae:	e007      	b.n	80021c0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 020f 	bic.w	r2, r2, #15
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c4:	f023 0303 	bic.w	r3, r3, #3
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
 80021d0:	e007      	b.n	80021e2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	f043 0210 	orr.w	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3724      	adds	r7, #36	; 0x24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd90      	pop	{r4, r7, pc}
 80021ec:	20000000 	.word	0x20000000
 80021f0:	053e2d63 	.word	0x053e2d63
 80021f4:	50040000 	.word	0x50040000
 80021f8:	50040100 	.word	0x50040100
 80021fc:	50040200 	.word	0x50040200
 8002200:	50040300 	.word	0x50040300
 8002204:	fff0c007 	.word	0xfff0c007

08002208 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002210:	4857      	ldr	r0, [pc, #348]	; (8002370 <HAL_ADC_Start+0x168>)
 8002212:	f7ff fd89 	bl	8001d28 <LL_ADC_GetMultimode>
 8002216:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fe63 	bl	8001ee8 <LL_ADC_REG_IsConversionOngoing>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 809c 	bne.w	8002362 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_ADC_Start+0x30>
 8002234:	2302      	movs	r3, #2
 8002236:	e097      	b.n	8002368 <HAL_ADC_Start+0x160>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fe61 	bl	8002f08 <ADC_Enable>
 8002246:	4603      	mov	r3, r0
 8002248:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800224a:	7dfb      	ldrb	r3, [r7, #23]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f040 8083 	bne.w	8002358 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a42      	ldr	r2, [pc, #264]	; (8002374 <HAL_ADC_Start+0x16c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d002      	beq.n	8002276 <HAL_ADC_Start+0x6e>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	e000      	b.n	8002278 <HAL_ADC_Start+0x70>
 8002276:	4b40      	ldr	r3, [pc, #256]	; (8002378 <HAL_ADC_Start+0x170>)
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	4293      	cmp	r3, r2
 800227e:	d002      	beq.n	8002286 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800229e:	d106      	bne.n	80022ae <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	f023 0206 	bic.w	r2, r3, #6
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	659a      	str	r2, [r3, #88]	; 0x58
 80022ac:	e002      	b.n	80022b4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	221c      	movs	r2, #28
 80022ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2a      	ldr	r2, [pc, #168]	; (8002374 <HAL_ADC_Start+0x16c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d002      	beq.n	80022d4 <HAL_ADC_Start+0xcc>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	e000      	b.n	80022d6 <HAL_ADC_Start+0xce>
 80022d4:	4b28      	ldr	r3, [pc, #160]	; (8002378 <HAL_ADC_Start+0x170>)
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	4293      	cmp	r3, r2
 80022dc:	d008      	beq.n	80022f0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	2b05      	cmp	r3, #5
 80022e8:	d002      	beq.n	80022f0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	d114      	bne.n	800231a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d007      	beq.n	800230e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002306:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fdc0 	bl	8001e98 <LL_ADC_REG_StartConversion>
 8002318:	e025      	b.n	8002366 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <HAL_ADC_Start+0x16c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d002      	beq.n	8002336 <HAL_ADC_Start+0x12e>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	e000      	b.n	8002338 <HAL_ADC_Start+0x130>
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_ADC_Start+0x170>)
 8002338:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00f      	beq.n	8002366 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800234e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
 8002356:	e006      	b.n	8002366 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002360:	e001      	b.n	8002366 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002362:	2302      	movs	r3, #2
 8002364:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002366:	7dfb      	ldrb	r3, [r7, #23]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	50040300 	.word	0x50040300
 8002374:	50040100 	.word	0x50040100
 8002378:	50040000 	.word	0x50040000

0800237c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Stop+0x16>
 800238e:	2302      	movs	r3, #2
 8002390:	e023      	b.n	80023da <HAL_ADC_Stop+0x5e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800239a:	2103      	movs	r1, #3
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fcf7 	bl	8002d90 <ADC_ConversionStop>
 80023a2:	4603      	mov	r3, r0
 80023a4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d111      	bne.n	80023d0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fe0d 	bl	8002fcc <ADC_Disable>
 80023b2:	4603      	mov	r3, r0
 80023b4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d109      	bne.n	80023d0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023ee:	4866      	ldr	r0, [pc, #408]	; (8002588 <HAL_ADC_PollForConversion+0x1a4>)
 80023f0:	f7ff fc9a 	bl	8001d28 <LL_ADC_GetMultimode>
 80023f4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d102      	bne.n	8002404 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80023fe:	2308      	movs	r3, #8
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e02a      	b.n	800245a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b05      	cmp	r3, #5
 800240e:	d002      	beq.n	8002416 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2b09      	cmp	r3, #9
 8002414:	d111      	bne.n	800243a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002428:	f043 0220 	orr.w	r2, r3, #32
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0a4      	b.n	800257e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002434:	2304      	movs	r3, #4
 8002436:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002438:	e00f      	b.n	800245a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800243a:	4853      	ldr	r0, [pc, #332]	; (8002588 <HAL_ADC_PollForConversion+0x1a4>)
 800243c:	f7ff fc82 	bl	8001d44 <LL_ADC_GetMultiDMATransfer>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e093      	b.n	800257e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002456:	2304      	movs	r3, #4
 8002458:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800245a:	f7ff fb1d 	bl	8001a98 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002460:	e021      	b.n	80024a6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002468:	d01d      	beq.n	80024a6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800246a:	f7ff fb15 	bl	8001a98 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d302      	bcc.n	8002480 <HAL_ADC_PollForConversion+0x9c>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d112      	bne.n	80024a6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10b      	bne.n	80024a6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	f043 0204 	orr.w	r2, r3, #4
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e06b      	b.n	800257e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0d6      	beq.n	8002462 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fba0 	bl	8001c0a <LL_ADC_REG_IsTriggerSourceSWStart>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01c      	beq.n	800250a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7e5b      	ldrb	r3, [r3, #25]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d118      	bne.n	800250a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d111      	bne.n	800250a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d105      	bne.n	800250a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	f043 0201 	orr.w	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_ADC_PollForConversion+0x1a8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d002      	beq.n	800251a <HAL_ADC_PollForConversion+0x136>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	e000      	b.n	800251c <HAL_ADC_PollForConversion+0x138>
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_ADC_PollForConversion+0x1ac>)
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	4293      	cmp	r3, r2
 8002522:	d008      	beq.n	8002536 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b05      	cmp	r3, #5
 800252e:	d002      	beq.n	8002536 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b09      	cmp	r3, #9
 8002534:	d104      	bne.n	8002540 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	e00c      	b.n	800255a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a11      	ldr	r2, [pc, #68]	; (800258c <HAL_ADC_PollForConversion+0x1a8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d002      	beq.n	8002550 <HAL_ADC_PollForConversion+0x16c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	e000      	b.n	8002552 <HAL_ADC_PollForConversion+0x16e>
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_ADC_PollForConversion+0x1ac>)
 8002552:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d104      	bne.n	800256a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2208      	movs	r2, #8
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e008      	b.n	800257c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d103      	bne.n	800257c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	220c      	movs	r2, #12
 800257a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	50040300 	.word	0x50040300
 800258c:	50040100 	.word	0x50040100
 8002590:	50040000 	.word	0x50040000

08002594 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b0b6      	sub	sp, #216	; 0xd8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x22>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e3c7      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x7b2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fc82 	bl	8001ee8 <LL_ADC_REG_IsConversionOngoing>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 83a8 	bne.w	8002d3c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d824      	bhi.n	800263e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	3b02      	subs	r3, #2
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d81b      	bhi.n	8002636 <HAL_ADC_ConfigChannel+0x86>
 80025fe:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <HAL_ADC_ConfigChannel+0x54>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	08002615 	.word	0x08002615
 8002608:	0800261d 	.word	0x0800261d
 800260c:	08002625 	.word	0x08002625
 8002610:	0800262d 	.word	0x0800262d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	220c      	movs	r2, #12
 8002618:	605a      	str	r2, [r3, #4]
          break;
 800261a:	e011      	b.n	8002640 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2212      	movs	r2, #18
 8002620:	605a      	str	r2, [r3, #4]
          break;
 8002622:	e00d      	b.n	8002640 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2218      	movs	r2, #24
 8002628:	605a      	str	r2, [r3, #4]
          break;
 800262a:	e009      	b.n	8002640 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002632:	605a      	str	r2, [r3, #4]
          break;
 8002634:	e004      	b.n	8002640 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2206      	movs	r2, #6
 800263a:	605a      	str	r2, [r3, #4]
          break;
 800263c:	e000      	b.n	8002640 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800263e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	f7ff faef 	bl	8001c30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fc46 	bl	8001ee8 <LL_ADC_REG_IsConversionOngoing>
 800265c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fc66 	bl	8001f36 <LL_ADC_INJ_IsConversionOngoing>
 800266a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800266e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 81a6 	bne.w	80029c4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002678:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 81a1 	bne.w	80029c4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	461a      	mov	r2, r3
 8002690:	f7ff fafa 	bl	8001c88 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	08db      	lsrs	r3, r3, #3
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d00a      	beq.n	80026cc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6919      	ldr	r1, [r3, #16]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026c6:	f7ff fa4b 	bl	8001b60 <LL_ADC_SetOffset>
 80026ca:	e17b      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fa68 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x148>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fa5d 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	0e9b      	lsrs	r3, r3, #26
 80026f2:	f003 021f 	and.w	r2, r3, #31
 80026f6:	e01e      	b.n	8002736 <HAL_ADC_ConfigChannel+0x186>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fa52 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002704:	4603      	mov	r3, r0
 8002706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800271a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800271e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002726:	2320      	movs	r3, #32
 8002728:	e004      	b.n	8002734 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800272a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273e:	2b00      	cmp	r3, #0
 8002740:	d105      	bne.n	800274e <HAL_ADC_ConfigChannel+0x19e>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	0e9b      	lsrs	r3, r3, #26
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	e018      	b.n	8002780 <HAL_ADC_ConfigChannel+0x1d0>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002766:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800276a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002772:	2320      	movs	r3, #32
 8002774:	e004      	b.n	8002780 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002776:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002780:	429a      	cmp	r2, r3
 8002782:	d106      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fa21 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2101      	movs	r1, #1
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fa05 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800279e:	4603      	mov	r3, r0
 80027a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <HAL_ADC_ConfigChannel+0x20e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff f9fa 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80027b4:	4603      	mov	r3, r0
 80027b6:	0e9b      	lsrs	r3, r3, #26
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	e01e      	b.n	80027fc <HAL_ADC_ConfigChannel+0x24c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff f9ef 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80027ec:	2320      	movs	r3, #32
 80027ee:	e004      	b.n	80027fa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80027f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x264>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	e018      	b.n	8002846 <HAL_ADC_ConfigChannel+0x296>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002828:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800282c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	e004      	b.n	8002846 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800283c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002846:	429a      	cmp	r2, r3
 8002848:	d106      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	2101      	movs	r1, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff f9be 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2102      	movs	r1, #2
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff f9a2 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10a      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x2d4>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff f997 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	f003 021f 	and.w	r2, r3, #31
 8002882:	e01e      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x312>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2102      	movs	r1, #2
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff f98c 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002890:	4603      	mov	r3, r0
 8002892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e004      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80028b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <HAL_ADC_ConfigChannel+0x32a>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	e016      	b.n	8002908 <HAL_ADC_ConfigChannel+0x358>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80028fa:	2320      	movs	r3, #32
 80028fc:	e004      	b.n	8002908 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80028fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002908:	429a      	cmp	r2, r3
 800290a:	d106      	bne.n	800291a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2200      	movs	r2, #0
 8002912:	2102      	movs	r1, #2
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff f95d 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2103      	movs	r1, #3
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff f941 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x396>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2103      	movs	r1, #3
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff f936 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	0e9b      	lsrs	r3, r3, #26
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	e017      	b.n	8002976 <HAL_ADC_ConfigChannel+0x3c6>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2103      	movs	r1, #3
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff f92b 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800295e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002960:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e003      	b.n	8002974 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800296c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <HAL_ADC_ConfigChannel+0x3de>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	e011      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x402>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800299c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800299e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80029aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d106      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	2103      	movs	r1, #3
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff f908 	bl	8001bd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fa3f 	bl	8001e4c <LL_ADC_IsEnabled>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f040 813f 	bne.w	8002c54 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7ff f97c 	bl	8001ce0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a8e      	ldr	r2, [pc, #568]	; (8002c28 <HAL_ADC_ConfigChannel+0x678>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	f040 8130 	bne.w	8002c54 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x46c>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2b09      	cmp	r3, #9
 8002a12:	bf94      	ite	ls
 8002a14:	2301      	movls	r3, #1
 8002a16:	2300      	movhi	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e019      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x4a0>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a2c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2b09      	cmp	r3, #9
 8002a48:	bf94      	ite	ls
 8002a4a:	2301      	movls	r3, #1
 8002a4c:	2300      	movhi	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d079      	beq.n	8002b48 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x4c0>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	069b      	lsls	r3, r3, #26
 8002a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a6e:	e015      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x4ec>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a80:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e003      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	069b      	lsls	r3, r3, #26
 8002a98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x50c>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	e017      	b.n	8002aec <HAL_ADC_ConfigChannel+0x53c>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	e003      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	ea42 0103 	orr.w	r1, r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x562>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	3301      	adds	r3, #1
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	051b      	lsls	r3, r3, #20
 8002b10:	e018      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x594>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	e003      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b44:	430b      	orrs	r3, r1
 8002b46:	e080      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x5b4>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	069b      	lsls	r3, r3, #26
 8002b5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b62:	e015      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x5e0>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	e003      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	069b      	lsls	r3, r3, #26
 8002b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x600>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	e017      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x630>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	61fb      	str	r3, [r7, #28]
  return result;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	e003      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	ea42 0103 	orr.w	r1, r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10d      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x65c>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	3b1e      	subs	r3, #30
 8002c04:	051b      	lsls	r3, r3, #20
 8002c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	e01d      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x698>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	613b      	str	r3, [r7, #16]
  return result;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d103      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e005      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x684>
 8002c28:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	f003 021f 	and.w	r2, r3, #31
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	3b1e      	subs	r3, #30
 8002c42:	051b      	lsls	r3, r3, #20
 8002c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	6892      	ldr	r2, [r2, #8]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f7ff f81a 	bl	8001c88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b44      	ldr	r3, [pc, #272]	; (8002d6c <HAL_ADC_ConfigChannel+0x7bc>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d07a      	beq.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c60:	4843      	ldr	r0, [pc, #268]	; (8002d70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c62:	f7fe ff6f 	bl	8001b44 <LL_ADC_GetCommonPathInternalCh>
 8002c66:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a41      	ldr	r2, [pc, #260]	; (8002d74 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d12c      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d126      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a3c      	ldr	r2, [pc, #240]	; (8002d78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_ADC_ConfigChannel+0x6e4>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a3b      	ldr	r2, [pc, #236]	; (8002d7c <HAL_ADC_ConfigChannel+0x7cc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d15d      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4834      	ldr	r0, [pc, #208]	; (8002d70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ca0:	f7fe ff3d 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca4:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	4a36      	ldr	r2, [pc, #216]	; (8002d84 <HAL_ADC_ConfigChannel+0x7d4>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	099b      	lsrs	r3, r3, #6
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cbe:	e002      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f9      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ccc:	e040      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a2d      	ldr	r2, [pc, #180]	; (8002d88 <HAL_ADC_ConfigChannel+0x7d8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d118      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x75a>
 8002cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d112      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a23      	ldr	r2, [pc, #140]	; (8002d78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_ADC_ConfigChannel+0x748>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <HAL_ADC_ConfigChannel+0x7cc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d12d      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d00:	4619      	mov	r1, r3
 8002d02:	481b      	ldr	r0, [pc, #108]	; (8002d70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d04:	f7fe ff0b 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d08:	e024      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1f      	ldr	r2, [pc, #124]	; (8002d8c <HAL_ADC_ConfigChannel+0x7dc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d120      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d11a      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d115      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d32:	4619      	mov	r1, r3
 8002d34:	480e      	ldr	r0, [pc, #56]	; (8002d70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d36:	f7fe fef2 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
 8002d3a:	e00c      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d40:	f043 0220 	orr.w	r2, r3, #32
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d4e:	e002      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d50:	bf00      	nop
 8002d52:	e000      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	37d8      	adds	r7, #216	; 0xd8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	80080000 	.word	0x80080000
 8002d70:	50040300 	.word	0x50040300
 8002d74:	c7520000 	.word	0xc7520000
 8002d78:	50040000 	.word	0x50040000
 8002d7c:	50040200 	.word	0x50040200
 8002d80:	20000000 	.word	0x20000000
 8002d84:	053e2d63 	.word	0x053e2d63
 8002d88:	cb840000 	.word	0xcb840000
 8002d8c:	80000001 	.word	0x80000001

08002d90 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f89e 	bl	8001ee8 <LL_ADC_REG_IsConversionOngoing>
 8002dac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff f8bf 	bl	8001f36 <LL_ADC_INJ_IsConversionOngoing>
 8002db8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d103      	bne.n	8002dc8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8098 	beq.w	8002ef8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d02a      	beq.n	8002e2c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	7e5b      	ldrb	r3, [r3, #25]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d126      	bne.n	8002e2c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7e1b      	ldrb	r3, [r3, #24]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d122      	bne.n	8002e2c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002de6:	2301      	movs	r3, #1
 8002de8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002dea:	e014      	b.n	8002e16 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	4a45      	ldr	r2, [pc, #276]	; (8002f04 <ADC_ConversionStop+0x174>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d90d      	bls.n	8002e10 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	f043 0210 	orr.w	r2, r3, #16
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e074      	b.n	8002efa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	3301      	adds	r3, #1
 8002e14:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	d1e3      	bne.n	8002dec <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2240      	movs	r2, #64	; 0x40
 8002e2a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d014      	beq.n	8002e5c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff f856 	bl	8001ee8 <LL_ADC_REG_IsConversionOngoing>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00c      	beq.n	8002e5c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff f813 	bl	8001e72 <LL_ADC_IsDisableOngoing>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d104      	bne.n	8002e5c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f832 	bl	8001ec0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d014      	beq.n	8002e8c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff f865 	bl	8001f36 <LL_ADC_INJ_IsConversionOngoing>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00c      	beq.n	8002e8c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fffb 	bl	8001e72 <LL_ADC_IsDisableOngoing>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d104      	bne.n	8002e8c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f841 	bl	8001f0e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d005      	beq.n	8002e9e <ADC_ConversionStop+0x10e>
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d105      	bne.n	8002ea4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002e98:	230c      	movs	r3, #12
 8002e9a:	617b      	str	r3, [r7, #20]
        break;
 8002e9c:	e005      	b.n	8002eaa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	617b      	str	r3, [r7, #20]
        break;
 8002ea2:	e002      	b.n	8002eaa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	617b      	str	r3, [r7, #20]
        break;
 8002ea8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002eaa:	f7fe fdf5 	bl	8001a98 <HAL_GetTick>
 8002eae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002eb0:	e01b      	b.n	8002eea <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002eb2:	f7fe fdf1 	bl	8001a98 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d914      	bls.n	8002eea <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00d      	beq.n	8002eea <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	f043 0210 	orr.w	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ede:	f043 0201 	orr.w	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e007      	b.n	8002efa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1dc      	bne.n	8002eb2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	a33fffff 	.word	0xa33fffff

08002f08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe ff99 	bl	8001e4c <LL_ADC_IsEnabled>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d14d      	bne.n	8002fbc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <ADC_Enable+0xc0>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e039      	b.n	8002fbe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe ff54 	bl	8001dfc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f54:	f7fe fda0 	bl	8001a98 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f5a:	e028      	b.n	8002fae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe ff73 	bl	8001e4c <LL_ADC_IsEnabled>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d104      	bne.n	8002f76 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe ff43 	bl	8001dfc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f76:	f7fe fd8f 	bl	8001a98 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d914      	bls.n	8002fae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d00d      	beq.n	8002fae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	f043 0210 	orr.w	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e007      	b.n	8002fbe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d1cf      	bne.n	8002f5c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	8000003f 	.word	0x8000003f

08002fcc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe ff4a 	bl	8001e72 <LL_ADC_IsDisableOngoing>
 8002fde:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe ff31 	bl	8001e4c <LL_ADC_IsEnabled>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d047      	beq.n	8003080 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d144      	bne.n	8003080 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 030d 	and.w	r3, r3, #13
 8003000:	2b01      	cmp	r3, #1
 8003002:	d10c      	bne.n	800301e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe ff0b 	bl	8001e24 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2203      	movs	r2, #3
 8003014:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003016:	f7fe fd3f 	bl	8001a98 <HAL_GetTick>
 800301a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800301c:	e029      	b.n	8003072 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	f043 0210 	orr.w	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e023      	b.n	8003082 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800303a:	f7fe fd2d 	bl	8001a98 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d914      	bls.n	8003072 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00d      	beq.n	8003072 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305a:	f043 0210 	orr.w	r2, r3, #16
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	f043 0201 	orr.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e007      	b.n	8003082 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1dc      	bne.n	800303a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <LL_ADC_IsEnabled>:
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <LL_ADC_IsEnabled+0x18>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_ADC_IsEnabled+0x1a>
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_REG_IsConversionOngoing>:
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d101      	bne.n	80030c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b09f      	sub	sp, #124	; 0x7c
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e093      	b.n	800321e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80030fe:	2300      	movs	r3, #0
 8003100:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003102:	2300      	movs	r3, #0
 8003104:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a47      	ldr	r2, [pc, #284]	; (8003228 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d102      	bne.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003110:	4b46      	ldr	r3, [pc, #280]	; (800322c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	e001      	b.n	800311a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e072      	b.n	800321e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ffb8 	bl	80030b0 <LL_ADC_REG_IsConversionOngoing>
 8003140:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff ffb2 	bl	80030b0 <LL_ADC_REG_IsConversionOngoing>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d154      	bne.n	80031fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003154:	2b00      	cmp	r3, #0
 8003156:	d151      	bne.n	80031fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003158:	4b35      	ldr	r3, [pc, #212]	; (8003230 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800315a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d02c      	beq.n	80031be <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003176:	035b      	lsls	r3, r3, #13
 8003178:	430b      	orrs	r3, r1
 800317a:	431a      	orrs	r2, r3
 800317c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800317e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003180:	4829      	ldr	r0, [pc, #164]	; (8003228 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003182:	f7ff ff82 	bl	800308a <LL_ADC_IsEnabled>
 8003186:	4604      	mov	r4, r0
 8003188:	4828      	ldr	r0, [pc, #160]	; (800322c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800318a:	f7ff ff7e 	bl	800308a <LL_ADC_IsEnabled>
 800318e:	4603      	mov	r3, r0
 8003190:	431c      	orrs	r4, r3
 8003192:	4828      	ldr	r0, [pc, #160]	; (8003234 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003194:	f7ff ff79 	bl	800308a <LL_ADC_IsEnabled>
 8003198:	4603      	mov	r3, r0
 800319a:	4323      	orrs	r3, r4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d137      	bne.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80031a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031a8:	f023 030f 	bic.w	r3, r3, #15
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	6811      	ldr	r1, [r2, #0]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	6892      	ldr	r2, [r2, #8]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	431a      	orrs	r2, r3
 80031b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031bc:	e028      	b.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031ca:	4817      	ldr	r0, [pc, #92]	; (8003228 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031cc:	f7ff ff5d 	bl	800308a <LL_ADC_IsEnabled>
 80031d0:	4604      	mov	r4, r0
 80031d2:	4816      	ldr	r0, [pc, #88]	; (800322c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031d4:	f7ff ff59 	bl	800308a <LL_ADC_IsEnabled>
 80031d8:	4603      	mov	r3, r0
 80031da:	431c      	orrs	r4, r3
 80031dc:	4815      	ldr	r0, [pc, #84]	; (8003234 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80031de:	f7ff ff54 	bl	800308a <LL_ADC_IsEnabled>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4323      	orrs	r3, r4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d112      	bne.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031f2:	f023 030f 	bic.w	r3, r3, #15
 80031f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031f8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031fa:	e009      	b.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800320e:	e000      	b.n	8003212 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003210:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800321a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800321e:	4618      	mov	r0, r3
 8003220:	377c      	adds	r7, #124	; 0x7c
 8003222:	46bd      	mov	sp, r7
 8003224:	bd90      	pop	{r4, r7, pc}
 8003226:	bf00      	nop
 8003228:	50040000 	.word	0x50040000
 800322c:	50040100 	.word	0x50040100
 8003230:	50040300 	.word	0x50040300
 8003234:	50040200 	.word	0x50040200

08003238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <__NVIC_SetPriorityGrouping+0x44>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003254:	4013      	ands	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800326a:	4a04      	ldr	r2, [pc, #16]	; (800327c <__NVIC_SetPriorityGrouping+0x44>)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	60d3      	str	r3, [r2, #12]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <__NVIC_GetPriorityGrouping+0x18>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	0a1b      	lsrs	r3, r3, #8
 800328a:	f003 0307 	and.w	r3, r3, #7
}
 800328e:	4618      	mov	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	db0b      	blt.n	80032c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	f003 021f 	and.w	r2, r3, #31
 80032b4:	4907      	ldr	r1, [pc, #28]	; (80032d4 <__NVIC_EnableIRQ+0x38>)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2001      	movs	r0, #1
 80032be:	fa00 f202 	lsl.w	r2, r0, r2
 80032c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	e000e100 	.word	0xe000e100

080032d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	6039      	str	r1, [r7, #0]
 80032e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	db0a      	blt.n	8003302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	490c      	ldr	r1, [pc, #48]	; (8003324 <__NVIC_SetPriority+0x4c>)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	0112      	lsls	r2, r2, #4
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	440b      	add	r3, r1
 80032fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003300:	e00a      	b.n	8003318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4908      	ldr	r1, [pc, #32]	; (8003328 <__NVIC_SetPriority+0x50>)
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	3b04      	subs	r3, #4
 8003310:	0112      	lsls	r2, r2, #4
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	440b      	add	r3, r1
 8003316:	761a      	strb	r2, [r3, #24]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000e100 	.word	0xe000e100
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800332c:	b480      	push	{r7}
 800332e:	b089      	sub	sp, #36	; 0x24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f1c3 0307 	rsb	r3, r3, #7
 8003346:	2b04      	cmp	r3, #4
 8003348:	bf28      	it	cs
 800334a:	2304      	movcs	r3, #4
 800334c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3304      	adds	r3, #4
 8003352:	2b06      	cmp	r3, #6
 8003354:	d902      	bls.n	800335c <NVIC_EncodePriority+0x30>
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3b03      	subs	r3, #3
 800335a:	e000      	b.n	800335e <NVIC_EncodePriority+0x32>
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43da      	mvns	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	401a      	ands	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003374:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	43d9      	mvns	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003384:	4313      	orrs	r3, r2
         );
}
 8003386:	4618      	mov	r0, r3
 8003388:	3724      	adds	r7, #36	; 0x24
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ff4c 	bl	8003238 <__NVIC_SetPriorityGrouping>
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033ba:	f7ff ff61 	bl	8003280 <__NVIC_GetPriorityGrouping>
 80033be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	6978      	ldr	r0, [r7, #20]
 80033c6:	f7ff ffb1 	bl	800332c <NVIC_EncodePriority>
 80033ca:	4602      	mov	r2, r0
 80033cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ff80 	bl	80032d8 <__NVIC_SetPriority>
}
 80033d8:	bf00      	nop
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ff54 	bl	800329c <__NVIC_EnableIRQ>
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800340a:	e17f      	b.n	800370c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2101      	movs	r1, #1
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	fa01 f303 	lsl.w	r3, r1, r3
 8003418:	4013      	ands	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 8171 	beq.w	8003706 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d00b      	beq.n	8003444 <HAL_GPIO_Init+0x48>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d007      	beq.n	8003444 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003438:	2b11      	cmp	r3, #17
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b12      	cmp	r3, #18
 8003442:	d130      	bne.n	80034a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	2203      	movs	r2, #3
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800347a:	2201      	movs	r2, #1
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	f003 0201 	and.w	r2, r3, #1
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d118      	bne.n	80034e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80034b8:	2201      	movs	r2, #1
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4013      	ands	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	08db      	lsrs	r3, r3, #3
 80034ce:	f003 0201 	and.w	r2, r3, #1
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	2203      	movs	r2, #3
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4013      	ands	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x128>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b12      	cmp	r3, #18
 8003522:	d123      	bne.n	800356c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	08da      	lsrs	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3208      	adds	r2, #8
 800352c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	220f      	movs	r2, #15
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	08da      	lsrs	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3208      	adds	r2, #8
 8003566:	6939      	ldr	r1, [r7, #16]
 8003568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	2203      	movs	r2, #3
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0203 	and.w	r2, r3, #3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80ac 	beq.w	8003706 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ae:	4b5f      	ldr	r3, [pc, #380]	; (800372c <HAL_GPIO_Init+0x330>)
 80035b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b2:	4a5e      	ldr	r2, [pc, #376]	; (800372c <HAL_GPIO_Init+0x330>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6613      	str	r3, [r2, #96]	; 0x60
 80035ba:	4b5c      	ldr	r3, [pc, #368]	; (800372c <HAL_GPIO_Init+0x330>)
 80035bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035c6:	4a5a      	ldr	r2, [pc, #360]	; (8003730 <HAL_GPIO_Init+0x334>)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	089b      	lsrs	r3, r3, #2
 80035cc:	3302      	adds	r3, #2
 80035ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	220f      	movs	r2, #15
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035f0:	d025      	beq.n	800363e <HAL_GPIO_Init+0x242>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4f      	ldr	r2, [pc, #316]	; (8003734 <HAL_GPIO_Init+0x338>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01f      	beq.n	800363a <HAL_GPIO_Init+0x23e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a4e      	ldr	r2, [pc, #312]	; (8003738 <HAL_GPIO_Init+0x33c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d019      	beq.n	8003636 <HAL_GPIO_Init+0x23a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4d      	ldr	r2, [pc, #308]	; (800373c <HAL_GPIO_Init+0x340>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <HAL_GPIO_Init+0x236>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4c      	ldr	r2, [pc, #304]	; (8003740 <HAL_GPIO_Init+0x344>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00d      	beq.n	800362e <HAL_GPIO_Init+0x232>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a4b      	ldr	r2, [pc, #300]	; (8003744 <HAL_GPIO_Init+0x348>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <HAL_GPIO_Init+0x22e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a4a      	ldr	r2, [pc, #296]	; (8003748 <HAL_GPIO_Init+0x34c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <HAL_GPIO_Init+0x22a>
 8003622:	2306      	movs	r3, #6
 8003624:	e00c      	b.n	8003640 <HAL_GPIO_Init+0x244>
 8003626:	2307      	movs	r3, #7
 8003628:	e00a      	b.n	8003640 <HAL_GPIO_Init+0x244>
 800362a:	2305      	movs	r3, #5
 800362c:	e008      	b.n	8003640 <HAL_GPIO_Init+0x244>
 800362e:	2304      	movs	r3, #4
 8003630:	e006      	b.n	8003640 <HAL_GPIO_Init+0x244>
 8003632:	2303      	movs	r3, #3
 8003634:	e004      	b.n	8003640 <HAL_GPIO_Init+0x244>
 8003636:	2302      	movs	r3, #2
 8003638:	e002      	b.n	8003640 <HAL_GPIO_Init+0x244>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_GPIO_Init+0x244>
 800363e:	2300      	movs	r3, #0
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	f002 0203 	and.w	r2, r2, #3
 8003646:	0092      	lsls	r2, r2, #2
 8003648:	4093      	lsls	r3, r2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003650:	4937      	ldr	r1, [pc, #220]	; (8003730 <HAL_GPIO_Init+0x334>)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	3302      	adds	r3, #2
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800365e:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_GPIO_Init+0x350>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	43db      	mvns	r3, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4013      	ands	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003682:	4a32      	ldr	r2, [pc, #200]	; (800374c <HAL_GPIO_Init+0x350>)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003688:	4b30      	ldr	r3, [pc, #192]	; (800374c <HAL_GPIO_Init+0x350>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	43db      	mvns	r3, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036ac:	4a27      	ldr	r2, [pc, #156]	; (800374c <HAL_GPIO_Init+0x350>)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036b2:	4b26      	ldr	r3, [pc, #152]	; (800374c <HAL_GPIO_Init+0x350>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036d6:	4a1d      	ldr	r2, [pc, #116]	; (800374c <HAL_GPIO_Init+0x350>)
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036dc:	4b1b      	ldr	r3, [pc, #108]	; (800374c <HAL_GPIO_Init+0x350>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003700:	4a12      	ldr	r2, [pc, #72]	; (800374c <HAL_GPIO_Init+0x350>)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3301      	adds	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa22 f303 	lsr.w	r3, r2, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	f47f ae78 	bne.w	800340c <HAL_GPIO_Init+0x10>
  }
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
 8003730:	40010000 	.word	0x40010000
 8003734:	48000400 	.word	0x48000400
 8003738:	48000800 	.word	0x48000800
 800373c:	48000c00 	.word	0x48000c00
 8003740:	48001000 	.word	0x48001000
 8003744:	48001400 	.word	0x48001400
 8003748:	48001800 	.word	0x48001800
 800374c:	40010400 	.word	0x40010400

08003750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	807b      	strh	r3, [r7, #2]
 800375c:	4613      	mov	r3, r2
 800375e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003760:	787b      	ldrb	r3, [r7, #1]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003766:	887a      	ldrh	r2, [r7, #2]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800376c:	e002      	b.n	8003774 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e081      	b.n	8003896 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fd fee0 	bl	800156c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2224      	movs	r2, #36	; 0x24
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d107      	bne.n	80037fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	e006      	b.n	8003808 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003806:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	2b02      	cmp	r3, #2
 800380e:	d104      	bne.n	800381a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003818:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800382c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800383c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	ea42 0103 	orr.w	r1, r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	021a      	lsls	r2, r3, #8
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69d9      	ldr	r1, [r3, #28]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1a      	ldr	r2, [r3, #32]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d138      	bne.n	8003926 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038be:	2302      	movs	r3, #2
 80038c0:	e032      	b.n	8003928 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2224      	movs	r2, #36	; 0x24
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038f0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	e000      	b.n	8003928 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003926:	2302      	movs	r3, #2
  }
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b20      	cmp	r3, #32
 8003948:	d139      	bne.n	80039be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003954:	2302      	movs	r3, #2
 8003956:	e033      	b.n	80039c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2224      	movs	r2, #36	; 0x24
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003986:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e000      	b.n	80039c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039be:	2302      	movs	r3, #2
  }
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039d0:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40007000 	.word	0x40007000

080039e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039f6:	d130      	bne.n	8003a5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039f8:	4b23      	ldr	r3, [pc, #140]	; (8003a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a04:	d038      	beq.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a06:	4b20      	ldr	r3, [pc, #128]	; (8003a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a0e:	4a1e      	ldr	r2, [pc, #120]	; (8003a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2232      	movs	r2, #50	; 0x32
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	0c9b      	lsrs	r3, r3, #18
 8003a28:	3301      	adds	r3, #1
 8003a2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a2c:	e002      	b.n	8003a34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a34:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a40:	d102      	bne.n	8003a48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f2      	bne.n	8003a2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a48:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a54:	d110      	bne.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e00f      	b.n	8003a7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a66:	d007      	beq.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a68:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a70:	4a05      	ldr	r2, [pc, #20]	; (8003a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40007000 	.word	0x40007000
 8003a8c:	20000000 	.word	0x20000000
 8003a90:	431bde83 	.word	0x431bde83

08003a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e3d4      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aa6:	4ba1      	ldr	r3, [pc, #644]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ab0:	4b9e      	ldr	r3, [pc, #632]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80e4 	beq.w	8003c90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d007      	beq.n	8003ade <HAL_RCC_OscConfig+0x4a>
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b0c      	cmp	r3, #12
 8003ad2:	f040 808b 	bne.w	8003bec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	f040 8087 	bne.w	8003bec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ade:	4b93      	ldr	r3, [pc, #588]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_RCC_OscConfig+0x62>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e3ac      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1a      	ldr	r2, [r3, #32]
 8003afa:	4b8c      	ldr	r3, [pc, #560]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <HAL_RCC_OscConfig+0x7c>
 8003b06:	4b89      	ldr	r3, [pc, #548]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b0e:	e005      	b.n	8003b1c <HAL_RCC_OscConfig+0x88>
 8003b10:	4b86      	ldr	r3, [pc, #536]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d223      	bcs.n	8003b68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fd73 	bl	8004610 <RCC_SetFlashLatencyFromMSIRange>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e38d      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b34:	4b7d      	ldr	r3, [pc, #500]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a7c      	ldr	r2, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003b3a:	f043 0308 	orr.w	r3, r3, #8
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	4b7a      	ldr	r3, [pc, #488]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	4977      	ldr	r1, [pc, #476]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b52:	4b76      	ldr	r3, [pc, #472]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	4972      	ldr	r1, [pc, #456]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	604b      	str	r3, [r1, #4]
 8003b66:	e025      	b.n	8003bb4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b68:	4b70      	ldr	r3, [pc, #448]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a6f      	ldr	r2, [pc, #444]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003b6e:	f043 0308 	orr.w	r3, r3, #8
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	4b6d      	ldr	r3, [pc, #436]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	496a      	ldr	r1, [pc, #424]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b86:	4b69      	ldr	r3, [pc, #420]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	4965      	ldr	r1, [pc, #404]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d109      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fd33 	bl	8004610 <RCC_SetFlashLatencyFromMSIRange>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e34d      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bb4:	f000 fc36 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b5c      	ldr	r3, [pc, #368]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	091b      	lsrs	r3, r3, #4
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	495a      	ldr	r1, [pc, #360]	; (8003d30 <HAL_RCC_OscConfig+0x29c>)
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd0:	4a58      	ldr	r2, [pc, #352]	; (8003d34 <HAL_RCC_OscConfig+0x2a0>)
 8003bd2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bd4:	4b58      	ldr	r3, [pc, #352]	; (8003d38 <HAL_RCC_OscConfig+0x2a4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fd fd83 	bl	80016e4 <HAL_InitTick>
 8003bde:	4603      	mov	r3, r0
 8003be0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d052      	beq.n	8003c8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	e331      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d032      	beq.n	8003c5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bf4:	4b4d      	ldr	r3, [pc, #308]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a4c      	ldr	r2, [pc, #304]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c00:	f7fd ff4a 	bl	8001a98 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c08:	f7fd ff46 	bl	8001a98 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e31a      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c1a:	4b44      	ldr	r3, [pc, #272]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c26:	4b41      	ldr	r3, [pc, #260]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a40      	ldr	r2, [pc, #256]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003c2c:	f043 0308 	orr.w	r3, r3, #8
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	4b3e      	ldr	r3, [pc, #248]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	493b      	ldr	r1, [pc, #236]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c44:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	4936      	ldr	r1, [pc, #216]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
 8003c58:	e01a      	b.n	8003c90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c5a:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a33      	ldr	r2, [pc, #204]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c66:	f7fd ff17 	bl	8001a98 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c6e:	f7fd ff13 	bl	8001a98 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e2e7      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c80:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f0      	bne.n	8003c6e <HAL_RCC_OscConfig+0x1da>
 8003c8c:	e000      	b.n	8003c90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d074      	beq.n	8003d86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d005      	beq.n	8003cae <HAL_RCC_OscConfig+0x21a>
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b0c      	cmp	r3, #12
 8003ca6:	d10e      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d10b      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cae:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d064      	beq.n	8003d84 <HAL_RCC_OscConfig+0x2f0>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d160      	bne.n	8003d84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e2c4      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cce:	d106      	bne.n	8003cde <HAL_RCC_OscConfig+0x24a>
 8003cd0:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	e01d      	b.n	8003d1a <HAL_RCC_OscConfig+0x286>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ce6:	d10c      	bne.n	8003d02 <HAL_RCC_OscConfig+0x26e>
 8003ce8:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0f      	ldr	r2, [pc, #60]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003cee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a0c      	ldr	r2, [pc, #48]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	e00b      	b.n	8003d1a <HAL_RCC_OscConfig+0x286>
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a06      	ldr	r2, [pc, #24]	; (8003d2c <HAL_RCC_OscConfig+0x298>)
 8003d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fd feb9 	bl	8001a98 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d28:	e011      	b.n	8003d4e <HAL_RCC_OscConfig+0x2ba>
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	08008ba0 	.word	0x08008ba0
 8003d34:	20000000 	.word	0x20000000
 8003d38:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fd feac 	bl	8001a98 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e280      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d4e:	4baf      	ldr	r3, [pc, #700]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x2a8>
 8003d5a:	e014      	b.n	8003d86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fd fe9c 	bl	8001a98 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fd fe98 	bl	8001a98 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e26c      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d76:	4ba5      	ldr	r3, [pc, #660]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x2d0>
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d060      	beq.n	8003e54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_OscConfig+0x310>
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2b0c      	cmp	r3, #12
 8003d9c:	d119      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d116      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003da4:	4b99      	ldr	r3, [pc, #612]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <HAL_RCC_OscConfig+0x328>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e249      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dbc:	4b93      	ldr	r3, [pc, #588]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	061b      	lsls	r3, r3, #24
 8003dca:	4990      	ldr	r1, [pc, #576]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dd0:	e040      	b.n	8003e54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d023      	beq.n	8003e22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dda:	4b8c      	ldr	r3, [pc, #560]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a8b      	ldr	r2, [pc, #556]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7fd fe57 	bl	8001a98 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dee:	f7fd fe53 	bl	8001a98 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e227      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e00:	4b82      	ldr	r3, [pc, #520]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0c:	4b7f      	ldr	r3, [pc, #508]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	061b      	lsls	r3, r3, #24
 8003e1a:	497c      	ldr	r1, [pc, #496]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
 8003e20:	e018      	b.n	8003e54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e22:	4b7a      	ldr	r3, [pc, #488]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a79      	ldr	r2, [pc, #484]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2e:	f7fd fe33 	bl	8001a98 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e36:	f7fd fe2f 	bl	8001a98 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e203      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e48:	4b70      	ldr	r3, [pc, #448]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d03c      	beq.n	8003eda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01c      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e68:	4b68      	ldr	r3, [pc, #416]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6e:	4a67      	ldr	r2, [pc, #412]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e78:	f7fd fe0e 	bl	8001a98 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e80:	f7fd fe0a 	bl	8001a98 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e1de      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e92:	4b5e      	ldr	r3, [pc, #376]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0ef      	beq.n	8003e80 <HAL_RCC_OscConfig+0x3ec>
 8003ea0:	e01b      	b.n	8003eda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea2:	4b5a      	ldr	r3, [pc, #360]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea8:	4a58      	ldr	r2, [pc, #352]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003eaa:	f023 0301 	bic.w	r3, r3, #1
 8003eae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb2:	f7fd fdf1 	bl	8001a98 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eba:	f7fd fded 	bl	8001a98 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e1c1      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ecc:	4b4f      	ldr	r3, [pc, #316]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1ef      	bne.n	8003eba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80a6 	beq.w	8004034 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003eec:	4b47      	ldr	r3, [pc, #284]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10d      	bne.n	8003f14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef8:	4b44      	ldr	r3, [pc, #272]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	4a43      	ldr	r2, [pc, #268]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f02:	6593      	str	r3, [r2, #88]	; 0x58
 8003f04:	4b41      	ldr	r3, [pc, #260]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f10:	2301      	movs	r3, #1
 8003f12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f14:	4b3e      	ldr	r3, [pc, #248]	; (8004010 <HAL_RCC_OscConfig+0x57c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d118      	bne.n	8003f52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f20:	4b3b      	ldr	r3, [pc, #236]	; (8004010 <HAL_RCC_OscConfig+0x57c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a3a      	ldr	r2, [pc, #232]	; (8004010 <HAL_RCC_OscConfig+0x57c>)
 8003f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2c:	f7fd fdb4 	bl	8001a98 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f34:	f7fd fdb0 	bl	8001a98 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e184      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f46:	4b32      	ldr	r3, [pc, #200]	; (8004010 <HAL_RCC_OscConfig+0x57c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d108      	bne.n	8003f6c <HAL_RCC_OscConfig+0x4d8>
 8003f5a:	4b2c      	ldr	r3, [pc, #176]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	4a2a      	ldr	r2, [pc, #168]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f6a:	e024      	b.n	8003fb6 <HAL_RCC_OscConfig+0x522>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b05      	cmp	r3, #5
 8003f72:	d110      	bne.n	8003f96 <HAL_RCC_OscConfig+0x502>
 8003f74:	4b25      	ldr	r3, [pc, #148]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7a:	4a24      	ldr	r2, [pc, #144]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003f7c:	f043 0304 	orr.w	r3, r3, #4
 8003f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f84:	4b21      	ldr	r3, [pc, #132]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	4a20      	ldr	r2, [pc, #128]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f94:	e00f      	b.n	8003fb6 <HAL_RCC_OscConfig+0x522>
 8003f96:	4b1d      	ldr	r3, [pc, #116]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9c:	4a1b      	ldr	r2, [pc, #108]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fa6:	4b19      	ldr	r3, [pc, #100]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	4a17      	ldr	r2, [pc, #92]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003fae:	f023 0304 	bic.w	r3, r3, #4
 8003fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d016      	beq.n	8003fec <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbe:	f7fd fd6b 	bl	8001a98 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc6:	f7fd fd67 	bl	8001a98 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e139      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0ed      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x532>
 8003fea:	e01a      	b.n	8004022 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fd fd54 	bl	8001a98 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ff2:	e00f      	b.n	8004014 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fd fd50 	bl	8001a98 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d906      	bls.n	8004014 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e122      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
 8004010:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004014:	4b90      	ldr	r3, [pc, #576]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e8      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004022:	7ffb      	ldrb	r3, [r7, #31]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d105      	bne.n	8004034 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004028:	4b8b      	ldr	r3, [pc, #556]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 800402a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402c:	4a8a      	ldr	r2, [pc, #552]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 800402e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004032:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8108 	beq.w	800424e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	2b02      	cmp	r3, #2
 8004044:	f040 80d0 	bne.w	80041e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004048:	4b83      	ldr	r3, [pc, #524]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f003 0203 	and.w	r2, r3, #3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	429a      	cmp	r2, r3
 800405a:	d130      	bne.n	80040be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	3b01      	subs	r3, #1
 8004068:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d127      	bne.n	80040be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004078:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d11f      	bne.n	80040be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004088:	2a07      	cmp	r2, #7
 800408a:	bf14      	ite	ne
 800408c:	2201      	movne	r2, #1
 800408e:	2200      	moveq	r2, #0
 8004090:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004092:	4293      	cmp	r3, r2
 8004094:	d113      	bne.n	80040be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	3b01      	subs	r3, #1
 80040a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d109      	bne.n	80040be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	3b01      	subs	r3, #1
 80040b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d06e      	beq.n	800419c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b0c      	cmp	r3, #12
 80040c2:	d069      	beq.n	8004198 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040c4:	4b64      	ldr	r3, [pc, #400]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d105      	bne.n	80040dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040d0:	4b61      	ldr	r3, [pc, #388]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0b7      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040e0:	4b5d      	ldr	r3, [pc, #372]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a5c      	ldr	r2, [pc, #368]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 80040e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040ec:	f7fd fcd4 	bl	8001a98 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fd fcd0 	bl	8001a98 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e0a4      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004106:	4b54      	ldr	r3, [pc, #336]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004112:	4b51      	ldr	r3, [pc, #324]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	4b51      	ldr	r3, [pc, #324]	; (800425c <HAL_RCC_OscConfig+0x7c8>)
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004122:	3a01      	subs	r2, #1
 8004124:	0112      	lsls	r2, r2, #4
 8004126:	4311      	orrs	r1, r2
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800412c:	0212      	lsls	r2, r2, #8
 800412e:	4311      	orrs	r1, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004134:	0852      	lsrs	r2, r2, #1
 8004136:	3a01      	subs	r2, #1
 8004138:	0552      	lsls	r2, r2, #21
 800413a:	4311      	orrs	r1, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004140:	0852      	lsrs	r2, r2, #1
 8004142:	3a01      	subs	r2, #1
 8004144:	0652      	lsls	r2, r2, #25
 8004146:	4311      	orrs	r1, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800414c:	0912      	lsrs	r2, r2, #4
 800414e:	0452      	lsls	r2, r2, #17
 8004150:	430a      	orrs	r2, r1
 8004152:	4941      	ldr	r1, [pc, #260]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 8004154:	4313      	orrs	r3, r2
 8004156:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004158:	4b3f      	ldr	r3, [pc, #252]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a3e      	ldr	r2, [pc, #248]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 800415e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004162:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004164:	4b3c      	ldr	r3, [pc, #240]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4a3b      	ldr	r2, [pc, #236]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 800416a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800416e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004170:	f7fd fc92 	bl	8001a98 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004178:	f7fd fc8e 	bl	8001a98 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e062      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800418a:	4b33      	ldr	r3, [pc, #204]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004196:	e05a      	b.n	800424e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e059      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800419c:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d152      	bne.n	800424e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041a8:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a2a      	ldr	r2, [pc, #168]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 80041ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041b4:	4b28      	ldr	r3, [pc, #160]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4a27      	ldr	r2, [pc, #156]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 80041ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041c0:	f7fd fc6a 	bl	8001a98 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fd fc66 	bl	8001a98 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e03a      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041da:	4b1f      	ldr	r3, [pc, #124]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x734>
 80041e6:	e032      	b.n	800424e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	d02d      	beq.n	800424a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ee:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a19      	ldr	r2, [pc, #100]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 80041f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041f8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80041fa:	4b17      	ldr	r3, [pc, #92]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d105      	bne.n	8004212 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004206:	4b14      	ldr	r3, [pc, #80]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	4a13      	ldr	r2, [pc, #76]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 800420c:	f023 0303 	bic.w	r3, r3, #3
 8004210:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004212:	4b11      	ldr	r3, [pc, #68]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	4a10      	ldr	r2, [pc, #64]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 8004218:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800421c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004220:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004222:	f7fd fc39 	bl	8001a98 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422a:	f7fd fc35 	bl	8001a98 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e009      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_RCC_OscConfig+0x7c4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f0      	bne.n	800422a <HAL_RCC_OscConfig+0x796>
 8004248:	e001      	b.n	800424e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3720      	adds	r7, #32
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000
 800425c:	f99d808c 	.word	0xf99d808c

08004260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0c8      	b.n	8004406 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004274:	4b66      	ldr	r3, [pc, #408]	; (8004410 <HAL_RCC_ClockConfig+0x1b0>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d910      	bls.n	80042a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004282:	4b63      	ldr	r3, [pc, #396]	; (8004410 <HAL_RCC_ClockConfig+0x1b0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 0207 	bic.w	r2, r3, #7
 800428a:	4961      	ldr	r1, [pc, #388]	; (8004410 <HAL_RCC_ClockConfig+0x1b0>)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	4313      	orrs	r3, r2
 8004290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004292:	4b5f      	ldr	r3, [pc, #380]	; (8004410 <HAL_RCC_ClockConfig+0x1b0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0b0      	b.n	8004406 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d04c      	beq.n	800434a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d107      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b8:	4b56      	ldr	r3, [pc, #344]	; (8004414 <HAL_RCC_ClockConfig+0x1b4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d121      	bne.n	8004308 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e09e      	b.n	8004406 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042d0:	4b50      	ldr	r3, [pc, #320]	; (8004414 <HAL_RCC_ClockConfig+0x1b4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d115      	bne.n	8004308 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e092      	b.n	8004406 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d107      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042e8:	4b4a      	ldr	r3, [pc, #296]	; (8004414 <HAL_RCC_ClockConfig+0x1b4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d109      	bne.n	8004308 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e086      	b.n	8004406 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f8:	4b46      	ldr	r3, [pc, #280]	; (8004414 <HAL_RCC_ClockConfig+0x1b4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e07e      	b.n	8004406 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004308:	4b42      	ldr	r3, [pc, #264]	; (8004414 <HAL_RCC_ClockConfig+0x1b4>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f023 0203 	bic.w	r2, r3, #3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	493f      	ldr	r1, [pc, #252]	; (8004414 <HAL_RCC_ClockConfig+0x1b4>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800431a:	f7fd fbbd 	bl	8001a98 <HAL_GetTick>
 800431e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004320:	e00a      	b.n	8004338 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004322:	f7fd fbb9 	bl	8001a98 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004330:	4293      	cmp	r3, r2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e066      	b.n	8004406 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004338:	4b36      	ldr	r3, [pc, #216]	; (8004414 <HAL_RCC_ClockConfig+0x1b4>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 020c 	and.w	r2, r3, #12
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	429a      	cmp	r2, r3
 8004348:	d1eb      	bne.n	8004322 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004356:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <HAL_RCC_ClockConfig+0x1b4>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	492c      	ldr	r1, [pc, #176]	; (8004414 <HAL_RCC_ClockConfig+0x1b4>)
 8004364:	4313      	orrs	r3, r2
 8004366:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004368:	4b29      	ldr	r3, [pc, #164]	; (8004410 <HAL_RCC_ClockConfig+0x1b0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d210      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004376:	4b26      	ldr	r3, [pc, #152]	; (8004410 <HAL_RCC_ClockConfig+0x1b0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f023 0207 	bic.w	r2, r3, #7
 800437e:	4924      	ldr	r1, [pc, #144]	; (8004410 <HAL_RCC_ClockConfig+0x1b0>)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	4313      	orrs	r3, r2
 8004384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004386:	4b22      	ldr	r3, [pc, #136]	; (8004410 <HAL_RCC_ClockConfig+0x1b0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e036      	b.n	8004406 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <HAL_RCC_ClockConfig+0x1b4>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4918      	ldr	r1, [pc, #96]	; (8004414 <HAL_RCC_ClockConfig+0x1b4>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c2:	4b14      	ldr	r3, [pc, #80]	; (8004414 <HAL_RCC_ClockConfig+0x1b4>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4910      	ldr	r1, [pc, #64]	; (8004414 <HAL_RCC_ClockConfig+0x1b4>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043d6:	f000 f825 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 80043da:	4602      	mov	r2, r0
 80043dc:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <HAL_RCC_ClockConfig+0x1b4>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	490c      	ldr	r1, [pc, #48]	; (8004418 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	5ccb      	ldrb	r3, [r1, r3]
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	fa22 f303 	lsr.w	r3, r2, r3
 80043f2:	4a0a      	ldr	r2, [pc, #40]	; (800441c <HAL_RCC_ClockConfig+0x1bc>)
 80043f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_RCC_ClockConfig+0x1c0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd f972 	bl	80016e4 <HAL_InitTick>
 8004400:	4603      	mov	r3, r0
 8004402:	72fb      	strb	r3, [r7, #11]

  return status;
 8004404:	7afb      	ldrb	r3, [r7, #11]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40022000 	.word	0x40022000
 8004414:	40021000 	.word	0x40021000
 8004418:	08008ba0 	.word	0x08008ba0
 800441c:	20000000 	.word	0x20000000
 8004420:	20000004 	.word	0x20000004

08004424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004424:	b480      	push	{r7}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	2300      	movs	r3, #0
 8004430:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004432:	4b3e      	ldr	r3, [pc, #248]	; (800452c <HAL_RCC_GetSysClockFreq+0x108>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800443c:	4b3b      	ldr	r3, [pc, #236]	; (800452c <HAL_RCC_GetSysClockFreq+0x108>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0x34>
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	2b0c      	cmp	r3, #12
 8004450:	d121      	bne.n	8004496 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d11e      	bne.n	8004496 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004458:	4b34      	ldr	r3, [pc, #208]	; (800452c <HAL_RCC_GetSysClockFreq+0x108>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d107      	bne.n	8004474 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004464:	4b31      	ldr	r3, [pc, #196]	; (800452c <HAL_RCC_GetSysClockFreq+0x108>)
 8004466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	e005      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004474:	4b2d      	ldr	r3, [pc, #180]	; (800452c <HAL_RCC_GetSysClockFreq+0x108>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004480:	4a2b      	ldr	r2, [pc, #172]	; (8004530 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004488:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10d      	bne.n	80044ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004494:	e00a      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2b04      	cmp	r3, #4
 800449a:	d102      	bne.n	80044a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800449c:	4b25      	ldr	r3, [pc, #148]	; (8004534 <HAL_RCC_GetSysClockFreq+0x110>)
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	e004      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d101      	bne.n	80044ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044a8:	4b23      	ldr	r3, [pc, #140]	; (8004538 <HAL_RCC_GetSysClockFreq+0x114>)
 80044aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b0c      	cmp	r3, #12
 80044b0:	d134      	bne.n	800451c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044b2:	4b1e      	ldr	r3, [pc, #120]	; (800452c <HAL_RCC_GetSysClockFreq+0x108>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d003      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0xa6>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d003      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0xac>
 80044c8:	e005      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044ca:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <HAL_RCC_GetSysClockFreq+0x110>)
 80044cc:	617b      	str	r3, [r7, #20]
      break;
 80044ce:	e005      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044d0:	4b19      	ldr	r3, [pc, #100]	; (8004538 <HAL_RCC_GetSysClockFreq+0x114>)
 80044d2:	617b      	str	r3, [r7, #20]
      break;
 80044d4:	e002      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	617b      	str	r3, [r7, #20]
      break;
 80044da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044dc:	4b13      	ldr	r3, [pc, #76]	; (800452c <HAL_RCC_GetSysClockFreq+0x108>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	3301      	adds	r3, #1
 80044e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044ea:	4b10      	ldr	r3, [pc, #64]	; (800452c <HAL_RCC_GetSysClockFreq+0x108>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	0a1b      	lsrs	r3, r3, #8
 80044f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	fb02 f203 	mul.w	r2, r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <HAL_RCC_GetSysClockFreq+0x108>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	0e5b      	lsrs	r3, r3, #25
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	3301      	adds	r3, #1
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800451c:	69bb      	ldr	r3, [r7, #24]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3724      	adds	r7, #36	; 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40021000 	.word	0x40021000
 8004530:	08008bb8 	.word	0x08008bb8
 8004534:	00f42400 	.word	0x00f42400
 8004538:	007a1200 	.word	0x007a1200

0800453c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <HAL_RCC_GetHCLKFreq+0x14>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000000 	.word	0x20000000

08004554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004558:	f7ff fff0 	bl	800453c <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0a1b      	lsrs	r3, r3, #8
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4904      	ldr	r1, [pc, #16]	; (800457c <HAL_RCC_GetPCLK1Freq+0x28>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000
 800457c:	08008bb0 	.word	0x08008bb0

08004580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004584:	f7ff ffda 	bl	800453c <HAL_RCC_GetHCLKFreq>
 8004588:	4602      	mov	r2, r0
 800458a:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	0adb      	lsrs	r3, r3, #11
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	4904      	ldr	r1, [pc, #16]	; (80045a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004596:	5ccb      	ldrb	r3, [r1, r3]
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40021000 	.word	0x40021000
 80045a8:	08008bb0 	.word	0x08008bb0

080045ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	220f      	movs	r2, #15
 80045ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80045bc:	4b12      	ldr	r3, [pc, #72]	; (8004608 <HAL_RCC_GetClockConfig+0x5c>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 0203 	and.w	r2, r3, #3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80045c8:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <HAL_RCC_GetClockConfig+0x5c>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80045d4:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <HAL_RCC_GetClockConfig+0x5c>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <HAL_RCC_GetClockConfig+0x5c>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	08db      	lsrs	r3, r3, #3
 80045e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <HAL_RCC_GetClockConfig+0x60>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0207 	and.w	r2, r3, #7
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	601a      	str	r2, [r3, #0]
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
 800460c:	40022000 	.word	0x40022000

08004610 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800461c:	4b2a      	ldr	r3, [pc, #168]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004628:	f7ff f9d0 	bl	80039cc <HAL_PWREx_GetVoltageRange>
 800462c:	6178      	str	r0, [r7, #20]
 800462e:	e014      	b.n	800465a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004630:	4b25      	ldr	r3, [pc, #148]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	4a24      	ldr	r2, [pc, #144]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	6593      	str	r3, [r2, #88]	; 0x58
 800463c:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800463e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004648:	f7ff f9c0 	bl	80039cc <HAL_PWREx_GetVoltageRange>
 800464c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800464e:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004652:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004658:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004660:	d10b      	bne.n	800467a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d919      	bls.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2ba0      	cmp	r3, #160	; 0xa0
 800466c:	d902      	bls.n	8004674 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800466e:	2302      	movs	r3, #2
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	e013      	b.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004674:	2301      	movs	r3, #1
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	e010      	b.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d902      	bls.n	8004686 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004680:	2303      	movs	r3, #3
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	e00a      	b.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b80      	cmp	r3, #128	; 0x80
 800468a:	d102      	bne.n	8004692 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800468c:	2302      	movs	r3, #2
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	e004      	b.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b70      	cmp	r3, #112	; 0x70
 8004696:	d101      	bne.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004698:	2301      	movs	r3, #1
 800469a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800469c:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 0207 	bic.w	r2, r3, #7
 80046a4:	4909      	ldr	r1, [pc, #36]	; (80046cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046ac:	4b07      	ldr	r3, [pc, #28]	; (80046cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d001      	beq.n	80046be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40022000 	.word	0x40022000

080046d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046d8:	2300      	movs	r3, #0
 80046da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046dc:	2300      	movs	r3, #0
 80046de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d041      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046f4:	d02a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046fa:	d824      	bhi.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004700:	d008      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004702:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004706:	d81e      	bhi.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800470c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004710:	d010      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004712:	e018      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004714:	4b86      	ldr	r3, [pc, #536]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a85      	ldr	r2, [pc, #532]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004720:	e015      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3304      	adds	r3, #4
 8004726:	2100      	movs	r1, #0
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fabb 	bl	8004ca4 <RCCEx_PLLSAI1_Config>
 800472e:	4603      	mov	r3, r0
 8004730:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004732:	e00c      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3320      	adds	r3, #32
 8004738:	2100      	movs	r1, #0
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fba6 	bl	8004e8c <RCCEx_PLLSAI2_Config>
 8004740:	4603      	mov	r3, r0
 8004742:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004744:	e003      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	74fb      	strb	r3, [r7, #19]
      break;
 800474a:	e000      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800474c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800474e:	7cfb      	ldrb	r3, [r7, #19]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004754:	4b76      	ldr	r3, [pc, #472]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004762:	4973      	ldr	r1, [pc, #460]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800476a:	e001      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d041      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004780:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004784:	d02a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004786:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800478a:	d824      	bhi.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800478c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004790:	d008      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004796:	d81e      	bhi.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800479c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047a0:	d010      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047a2:	e018      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047a4:	4b62      	ldr	r3, [pc, #392]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4a61      	ldr	r2, [pc, #388]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047b0:	e015      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3304      	adds	r3, #4
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 fa73 	bl	8004ca4 <RCCEx_PLLSAI1_Config>
 80047be:	4603      	mov	r3, r0
 80047c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047c2:	e00c      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3320      	adds	r3, #32
 80047c8:	2100      	movs	r1, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fb5e 	bl	8004e8c <RCCEx_PLLSAI2_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047d4:	e003      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	74fb      	strb	r3, [r7, #19]
      break;
 80047da:	e000      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80047dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047de:	7cfb      	ldrb	r3, [r7, #19]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10b      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047e4:	4b52      	ldr	r3, [pc, #328]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047f2:	494f      	ldr	r1, [pc, #316]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047fa:	e001      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80a0 	beq.w	800494e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800480e:	2300      	movs	r3, #0
 8004810:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004812:	4b47      	ldr	r3, [pc, #284]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800481e:	2301      	movs	r3, #1
 8004820:	e000      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004822:	2300      	movs	r3, #0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00d      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004828:	4b41      	ldr	r3, [pc, #260]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482c:	4a40      	ldr	r2, [pc, #256]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004832:	6593      	str	r3, [r2, #88]	; 0x58
 8004834:	4b3e      	ldr	r3, [pc, #248]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004840:	2301      	movs	r3, #1
 8004842:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004844:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a3a      	ldr	r2, [pc, #232]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800484a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004850:	f7fd f922 	bl	8001a98 <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004856:	e009      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004858:	f7fd f91e 	bl	8001a98 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d902      	bls.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	74fb      	strb	r3, [r7, #19]
        break;
 800486a:	e005      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800486c:	4b31      	ldr	r3, [pc, #196]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0ef      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d15c      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800487e:	4b2c      	ldr	r3, [pc, #176]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004888:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01f      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	429a      	cmp	r2, r3
 800489a:	d019      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800489c:	4b24      	ldr	r3, [pc, #144]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048a8:	4b21      	ldr	r3, [pc, #132]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ae:	4a20      	ldr	r2, [pc, #128]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048b8:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048be:	4a1c      	ldr	r2, [pc, #112]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048c8:	4a19      	ldr	r2, [pc, #100]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d016      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048da:	f7fd f8dd 	bl	8001a98 <HAL_GetTick>
 80048de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e0:	e00b      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e2:	f7fd f8d9 	bl	8001a98 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d902      	bls.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	74fb      	strb	r3, [r7, #19]
            break;
 80048f8:	e006      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048fa:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ec      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10c      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800490e:	4b08      	ldr	r3, [pc, #32]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491e:	4904      	ldr	r1, [pc, #16]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004926:	e009      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	74bb      	strb	r3, [r7, #18]
 800492c:	e006      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000
 8004934:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	7cfb      	ldrb	r3, [r7, #19]
 800493a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800493c:	7c7b      	ldrb	r3, [r7, #17]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d105      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004942:	4b9e      	ldr	r3, [pc, #632]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004946:	4a9d      	ldr	r2, [pc, #628]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800494c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800495a:	4b98      	ldr	r3, [pc, #608]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004960:	f023 0203 	bic.w	r2, r3, #3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	4994      	ldr	r1, [pc, #592]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800497c:	4b8f      	ldr	r3, [pc, #572]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f023 020c 	bic.w	r2, r3, #12
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498a:	498c      	ldr	r1, [pc, #560]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800499e:	4b87      	ldr	r3, [pc, #540]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	4983      	ldr	r1, [pc, #524]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049c0:	4b7e      	ldr	r3, [pc, #504]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	497b      	ldr	r1, [pc, #492]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049e2:	4b76      	ldr	r3, [pc, #472]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f0:	4972      	ldr	r1, [pc, #456]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a04:	4b6d      	ldr	r3, [pc, #436]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a12:	496a      	ldr	r1, [pc, #424]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a26:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a34:	4961      	ldr	r1, [pc, #388]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a48:	4b5c      	ldr	r3, [pc, #368]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a56:	4959      	ldr	r1, [pc, #356]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a6a:	4b54      	ldr	r3, [pc, #336]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a78:	4950      	ldr	r1, [pc, #320]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a8c:	4b4b      	ldr	r3, [pc, #300]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	4948      	ldr	r1, [pc, #288]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004aae:	4b43      	ldr	r3, [pc, #268]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abc:	493f      	ldr	r1, [pc, #252]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d028      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ad0:	4b3a      	ldr	r3, [pc, #232]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ade:	4937      	ldr	r1, [pc, #220]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aee:	d106      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af0:	4b32      	ldr	r3, [pc, #200]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4a31      	ldr	r2, [pc, #196]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004afa:	60d3      	str	r3, [r2, #12]
 8004afc:	e011      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b06:	d10c      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f8c8 	bl	8004ca4 <RCCEx_PLLSAI1_Config>
 8004b14:	4603      	mov	r3, r0
 8004b16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b18:	7cfb      	ldrb	r3, [r7, #19]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004b1e:	7cfb      	ldrb	r3, [r7, #19]
 8004b20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d028      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b2e:	4b23      	ldr	r3, [pc, #140]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3c:	491f      	ldr	r1, [pc, #124]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b4c:	d106      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b4e:	4b1b      	ldr	r3, [pc, #108]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	4a1a      	ldr	r2, [pc, #104]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b58:	60d3      	str	r3, [r2, #12]
 8004b5a:	e011      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 f899 	bl	8004ca4 <RCCEx_PLLSAI1_Config>
 8004b72:	4603      	mov	r3, r0
 8004b74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b76:	7cfb      	ldrb	r3, [r7, #19]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b7c:	7cfb      	ldrb	r3, [r7, #19]
 8004b7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d02b      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9a:	4908      	ldr	r1, [pc, #32]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004baa:	d109      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bac:	4b03      	ldr	r3, [pc, #12]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4a02      	ldr	r2, [pc, #8]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb6:	60d3      	str	r3, [r2, #12]
 8004bb8:	e014      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bc8:	d10c      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	2101      	movs	r1, #1
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 f867 	bl	8004ca4 <RCCEx_PLLSAI1_Config>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bda:	7cfb      	ldrb	r3, [r7, #19]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004be0:	7cfb      	ldrb	r3, [r7, #19]
 8004be2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d02f      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bf0:	4b2b      	ldr	r3, [pc, #172]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bfe:	4928      	ldr	r1, [pc, #160]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c0e:	d10d      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3304      	adds	r3, #4
 8004c14:	2102      	movs	r1, #2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 f844 	bl	8004ca4 <RCCEx_PLLSAI1_Config>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c20:	7cfb      	ldrb	r3, [r7, #19]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d014      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c26:	7cfb      	ldrb	r3, [r7, #19]
 8004c28:	74bb      	strb	r3, [r7, #18]
 8004c2a:	e011      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c34:	d10c      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3320      	adds	r3, #32
 8004c3a:	2102      	movs	r1, #2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 f925 	bl	8004e8c <RCCEx_PLLSAI2_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c4c:	7cfb      	ldrb	r3, [r7, #19]
 8004c4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c5c:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c6a:	490d      	ldr	r1, [pc, #52]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00b      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c7e:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c8e:	4904      	ldr	r1, [pc, #16]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c96:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40021000 	.word	0x40021000

08004ca4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cb2:	4b75      	ldr	r3, [pc, #468]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d018      	beq.n	8004cf0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cbe:	4b72      	ldr	r3, [pc, #456]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0203 	and.w	r2, r3, #3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d10d      	bne.n	8004cea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
       ||
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cd6:	4b6c      	ldr	r3, [pc, #432]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	091b      	lsrs	r3, r3, #4
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d047      	beq.n	8004d7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	73fb      	strb	r3, [r7, #15]
 8004cee:	e044      	b.n	8004d7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	d018      	beq.n	8004d2a <RCCEx_PLLSAI1_Config+0x86>
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d825      	bhi.n	8004d48 <RCCEx_PLLSAI1_Config+0xa4>
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d002      	beq.n	8004d06 <RCCEx_PLLSAI1_Config+0x62>
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d009      	beq.n	8004d18 <RCCEx_PLLSAI1_Config+0x74>
 8004d04:	e020      	b.n	8004d48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d06:	4b60      	ldr	r3, [pc, #384]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d11d      	bne.n	8004d4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d16:	e01a      	b.n	8004d4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d18:	4b5b      	ldr	r3, [pc, #364]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d116      	bne.n	8004d52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d28:	e013      	b.n	8004d52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d2a:	4b57      	ldr	r3, [pc, #348]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10f      	bne.n	8004d56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d36:	4b54      	ldr	r3, [pc, #336]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d109      	bne.n	8004d56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d46:	e006      	b.n	8004d56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4c:	e004      	b.n	8004d58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d4e:	bf00      	nop
 8004d50:	e002      	b.n	8004d58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d56:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10d      	bne.n	8004d7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d5e:	4b4a      	ldr	r3, [pc, #296]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6819      	ldr	r1, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	430b      	orrs	r3, r1
 8004d74:	4944      	ldr	r1, [pc, #272]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d17d      	bne.n	8004e7c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d80:	4b41      	ldr	r3, [pc, #260]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a40      	ldr	r2, [pc, #256]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8c:	f7fc fe84 	bl	8001a98 <HAL_GetTick>
 8004d90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d92:	e009      	b.n	8004da8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d94:	f7fc fe80 	bl	8001a98 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d902      	bls.n	8004da8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	73fb      	strb	r3, [r7, #15]
        break;
 8004da6:	e005      	b.n	8004db4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004da8:	4b37      	ldr	r3, [pc, #220]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1ef      	bne.n	8004d94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d160      	bne.n	8004e7c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d111      	bne.n	8004de4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dc0:	4b31      	ldr	r3, [pc, #196]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6892      	ldr	r2, [r2, #8]
 8004dd0:	0211      	lsls	r1, r2, #8
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68d2      	ldr	r2, [r2, #12]
 8004dd6:	0912      	lsrs	r2, r2, #4
 8004dd8:	0452      	lsls	r2, r2, #17
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	492a      	ldr	r1, [pc, #168]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	610b      	str	r3, [r1, #16]
 8004de2:	e027      	b.n	8004e34 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d112      	bne.n	8004e10 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dea:	4b27      	ldr	r3, [pc, #156]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004df2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6892      	ldr	r2, [r2, #8]
 8004dfa:	0211      	lsls	r1, r2, #8
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6912      	ldr	r2, [r2, #16]
 8004e00:	0852      	lsrs	r2, r2, #1
 8004e02:	3a01      	subs	r2, #1
 8004e04:	0552      	lsls	r2, r2, #21
 8004e06:	430a      	orrs	r2, r1
 8004e08:	491f      	ldr	r1, [pc, #124]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	610b      	str	r3, [r1, #16]
 8004e0e:	e011      	b.n	8004e34 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e10:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6892      	ldr	r2, [r2, #8]
 8004e20:	0211      	lsls	r1, r2, #8
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6952      	ldr	r2, [r2, #20]
 8004e26:	0852      	lsrs	r2, r2, #1
 8004e28:	3a01      	subs	r2, #1
 8004e2a:	0652      	lsls	r2, r2, #25
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	4916      	ldr	r1, [pc, #88]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e34:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a13      	ldr	r2, [pc, #76]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e40:	f7fc fe2a 	bl	8001a98 <HAL_GetTick>
 8004e44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e46:	e009      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e48:	f7fc fe26 	bl	8001a98 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d902      	bls.n	8004e5c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	73fb      	strb	r3, [r7, #15]
          break;
 8004e5a:	e005      	b.n	8004e68 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0ef      	beq.n	8004e48 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e6e:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	4904      	ldr	r1, [pc, #16]	; (8004e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40021000 	.word	0x40021000

08004e8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e9a:	4b6a      	ldr	r3, [pc, #424]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d018      	beq.n	8004ed8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ea6:	4b67      	ldr	r3, [pc, #412]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f003 0203 	and.w	r2, r3, #3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d10d      	bne.n	8004ed2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
       ||
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d009      	beq.n	8004ed2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ebe:	4b61      	ldr	r3, [pc, #388]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
       ||
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d047      	beq.n	8004f62 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
 8004ed6:	e044      	b.n	8004f62 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d018      	beq.n	8004f12 <RCCEx_PLLSAI2_Config+0x86>
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d825      	bhi.n	8004f30 <RCCEx_PLLSAI2_Config+0xa4>
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d002      	beq.n	8004eee <RCCEx_PLLSAI2_Config+0x62>
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d009      	beq.n	8004f00 <RCCEx_PLLSAI2_Config+0x74>
 8004eec:	e020      	b.n	8004f30 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004eee:	4b55      	ldr	r3, [pc, #340]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d11d      	bne.n	8004f36 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004efe:	e01a      	b.n	8004f36 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f00:	4b50      	ldr	r3, [pc, #320]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d116      	bne.n	8004f3a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f10:	e013      	b.n	8004f3a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f12:	4b4c      	ldr	r3, [pc, #304]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10f      	bne.n	8004f3e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f1e:	4b49      	ldr	r3, [pc, #292]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f2e:	e006      	b.n	8004f3e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
      break;
 8004f34:	e004      	b.n	8004f40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f36:	bf00      	nop
 8004f38:	e002      	b.n	8004f40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f3a:	bf00      	nop
 8004f3c:	e000      	b.n	8004f40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10d      	bne.n	8004f62 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f46:	4b3f      	ldr	r3, [pc, #252]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6819      	ldr	r1, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	430b      	orrs	r3, r1
 8004f5c:	4939      	ldr	r1, [pc, #228]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d167      	bne.n	8005038 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f68:	4b36      	ldr	r3, [pc, #216]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a35      	ldr	r2, [pc, #212]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f74:	f7fc fd90 	bl	8001a98 <HAL_GetTick>
 8004f78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f7a:	e009      	b.n	8004f90 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f7c:	f7fc fd8c 	bl	8001a98 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d902      	bls.n	8004f90 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f8e:	e005      	b.n	8004f9c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f90:	4b2c      	ldr	r3, [pc, #176]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1ef      	bne.n	8004f7c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d14a      	bne.n	8005038 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d111      	bne.n	8004fcc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fa8:	4b26      	ldr	r3, [pc, #152]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6892      	ldr	r2, [r2, #8]
 8004fb8:	0211      	lsls	r1, r2, #8
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	68d2      	ldr	r2, [r2, #12]
 8004fbe:	0912      	lsrs	r2, r2, #4
 8004fc0:	0452      	lsls	r2, r2, #17
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	491f      	ldr	r1, [pc, #124]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	614b      	str	r3, [r1, #20]
 8004fca:	e011      	b.n	8004ff0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fcc:	4b1d      	ldr	r3, [pc, #116]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6892      	ldr	r2, [r2, #8]
 8004fdc:	0211      	lsls	r1, r2, #8
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6912      	ldr	r2, [r2, #16]
 8004fe2:	0852      	lsrs	r2, r2, #1
 8004fe4:	3a01      	subs	r2, #1
 8004fe6:	0652      	lsls	r2, r2, #25
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	4916      	ldr	r1, [pc, #88]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ff0:	4b14      	ldr	r3, [pc, #80]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a13      	ldr	r2, [pc, #76]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffc:	f7fc fd4c 	bl	8001a98 <HAL_GetTick>
 8005000:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005002:	e009      	b.n	8005018 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005004:	f7fc fd48 	bl	8001a98 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d902      	bls.n	8005018 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	73fb      	strb	r3, [r7, #15]
          break;
 8005016:	e005      	b.n	8005024 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0ef      	beq.n	8005004 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800502a:	4b06      	ldr	r3, [pc, #24]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	4904      	ldr	r1, [pc, #16]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005034:	4313      	orrs	r3, r2
 8005036:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40021000 	.word	0x40021000

08005048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e049      	b.n	80050ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f841 	bl	80050f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3304      	adds	r3, #4
 8005084:	4619      	mov	r1, r3
 8005086:	4610      	mov	r0, r2
 8005088:	f000 f9f8 	bl	800547c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	d001      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e04f      	b.n	80051c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a23      	ldr	r2, [pc, #140]	; (80051d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01d      	beq.n	8005182 <HAL_TIM_Base_Start_IT+0x76>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514e:	d018      	beq.n	8005182 <HAL_TIM_Base_Start_IT+0x76>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1f      	ldr	r2, [pc, #124]	; (80051d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <HAL_TIM_Base_Start_IT+0x76>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1e      	ldr	r2, [pc, #120]	; (80051d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00e      	beq.n	8005182 <HAL_TIM_Base_Start_IT+0x76>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1c      	ldr	r2, [pc, #112]	; (80051dc <HAL_TIM_Base_Start_IT+0xd0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d009      	beq.n	8005182 <HAL_TIM_Base_Start_IT+0x76>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1b      	ldr	r2, [pc, #108]	; (80051e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d004      	beq.n	8005182 <HAL_TIM_Base_Start_IT+0x76>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a19      	ldr	r2, [pc, #100]	; (80051e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d115      	bne.n	80051ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	4b17      	ldr	r3, [pc, #92]	; (80051e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800518a:	4013      	ands	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b06      	cmp	r3, #6
 8005192:	d015      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0xb4>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519a:	d011      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ac:	e008      	b.n	80051c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0201 	orr.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	e000      	b.n	80051c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	40012c00 	.word	0x40012c00
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40013400 	.word	0x40013400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	00010007 	.word	0x00010007

080051ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d122      	bne.n	8005248 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b02      	cmp	r3, #2
 800520e:	d11b      	bne.n	8005248 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0202 	mvn.w	r2, #2
 8005218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f905 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 8005234:	e005      	b.n	8005242 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f8f7 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f908 	bl	8005452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b04      	cmp	r3, #4
 8005254:	d122      	bne.n	800529c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b04      	cmp	r3, #4
 8005262:	d11b      	bne.n	800529c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0204 	mvn.w	r2, #4
 800526c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f8db 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 8005288:	e005      	b.n	8005296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f8cd 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f8de 	bl	8005452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d122      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d11b      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0208 	mvn.w	r2, #8
 80052c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2204      	movs	r2, #4
 80052c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f8b1 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 80052dc:	e005      	b.n	80052ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f8a3 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f8b4 	bl	8005452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0310 	and.w	r3, r3, #16
 80052fa:	2b10      	cmp	r3, #16
 80052fc:	d122      	bne.n	8005344 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b10      	cmp	r3, #16
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0210 	mvn.w	r2, #16
 8005314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2208      	movs	r2, #8
 800531a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f887 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f879 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f88a 	bl	8005452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b01      	cmp	r3, #1
 8005350:	d10e      	bne.n	8005370 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b01      	cmp	r3, #1
 800535e:	d107      	bne.n	8005370 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0201 	mvn.w	r2, #1
 8005368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fc f858 	bl	8001420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537a:	2b80      	cmp	r3, #128	; 0x80
 800537c:	d10e      	bne.n	800539c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005388:	2b80      	cmp	r3, #128	; 0x80
 800538a:	d107      	bne.n	800539c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f914 	bl	80055c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053aa:	d10e      	bne.n	80053ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b6:	2b80      	cmp	r3, #128	; 0x80
 80053b8:	d107      	bne.n	80053ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f907 	bl	80055d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d10e      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e2:	2b40      	cmp	r3, #64	; 0x40
 80053e4:	d107      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f838 	bl	8005466 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b20      	cmp	r3, #32
 8005402:	d10e      	bne.n	8005422 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b20      	cmp	r3, #32
 8005410:	d107      	bne.n	8005422 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f06f 0220 	mvn.w	r2, #32
 800541a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8c7 	bl	80055b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a40      	ldr	r2, [pc, #256]	; (8005590 <TIM_Base_SetConfig+0x114>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d013      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549a:	d00f      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a3d      	ldr	r2, [pc, #244]	; (8005594 <TIM_Base_SetConfig+0x118>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00b      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a3c      	ldr	r2, [pc, #240]	; (8005598 <TIM_Base_SetConfig+0x11c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a3b      	ldr	r2, [pc, #236]	; (800559c <TIM_Base_SetConfig+0x120>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a3a      	ldr	r2, [pc, #232]	; (80055a0 <TIM_Base_SetConfig+0x124>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d108      	bne.n	80054ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a2f      	ldr	r2, [pc, #188]	; (8005590 <TIM_Base_SetConfig+0x114>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d01f      	beq.n	8005516 <TIM_Base_SetConfig+0x9a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054dc:	d01b      	beq.n	8005516 <TIM_Base_SetConfig+0x9a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a2c      	ldr	r2, [pc, #176]	; (8005594 <TIM_Base_SetConfig+0x118>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d017      	beq.n	8005516 <TIM_Base_SetConfig+0x9a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a2b      	ldr	r2, [pc, #172]	; (8005598 <TIM_Base_SetConfig+0x11c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <TIM_Base_SetConfig+0x9a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2a      	ldr	r2, [pc, #168]	; (800559c <TIM_Base_SetConfig+0x120>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00f      	beq.n	8005516 <TIM_Base_SetConfig+0x9a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a29      	ldr	r2, [pc, #164]	; (80055a0 <TIM_Base_SetConfig+0x124>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00b      	beq.n	8005516 <TIM_Base_SetConfig+0x9a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a28      	ldr	r2, [pc, #160]	; (80055a4 <TIM_Base_SetConfig+0x128>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d007      	beq.n	8005516 <TIM_Base_SetConfig+0x9a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a27      	ldr	r2, [pc, #156]	; (80055a8 <TIM_Base_SetConfig+0x12c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d003      	beq.n	8005516 <TIM_Base_SetConfig+0x9a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a26      	ldr	r2, [pc, #152]	; (80055ac <TIM_Base_SetConfig+0x130>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d108      	bne.n	8005528 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a10      	ldr	r2, [pc, #64]	; (8005590 <TIM_Base_SetConfig+0x114>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00f      	beq.n	8005574 <TIM_Base_SetConfig+0xf8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a12      	ldr	r2, [pc, #72]	; (80055a0 <TIM_Base_SetConfig+0x124>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00b      	beq.n	8005574 <TIM_Base_SetConfig+0xf8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a11      	ldr	r2, [pc, #68]	; (80055a4 <TIM_Base_SetConfig+0x128>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_Base_SetConfig+0xf8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a10      	ldr	r2, [pc, #64]	; (80055a8 <TIM_Base_SetConfig+0x12c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_Base_SetConfig+0xf8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a0f      	ldr	r2, [pc, #60]	; (80055ac <TIM_Base_SetConfig+0x130>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d103      	bne.n	800557c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	615a      	str	r2, [r3, #20]
}
 8005582:	bf00      	nop
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40012c00 	.word	0x40012c00
 8005594:	40000400 	.word	0x40000400
 8005598:	40000800 	.word	0x40000800
 800559c:	40000c00 	.word	0x40000c00
 80055a0:	40013400 	.word	0x40013400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40014400 	.word	0x40014400
 80055ac:	40014800 	.word	0x40014800

080055b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e040      	b.n	8005680 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fc f80a 	bl	8001628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2224      	movs	r2, #36	; 0x24
 8005618:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0201 	bic.w	r2, r2, #1
 8005628:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f992 	bl	8005954 <UART_SetConfig>
 8005630:	4603      	mov	r3, r0
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e022      	b.n	8005680 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fc10 	bl	8005e68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005656:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005666:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fc97 	bl	8005fac <UART_CheckIdleState>
 800567e:	4603      	mov	r3, r0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08a      	sub	sp, #40	; 0x28
 800568c:	af02      	add	r7, sp, #8
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800569c:	2b20      	cmp	r3, #32
 800569e:	f040 8082 	bne.w	80057a6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <HAL_UART_Transmit+0x26>
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e07a      	b.n	80057a8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_UART_Transmit+0x38>
 80056bc:	2302      	movs	r3, #2
 80056be:	e073      	b.n	80057a8 <HAL_UART_Transmit+0x120>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2221      	movs	r2, #33	; 0x21
 80056d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056d6:	f7fc f9df 	bl	8001a98 <HAL_GetTick>
 80056da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	88fa      	ldrh	r2, [r7, #6]
 80056e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	88fa      	ldrh	r2, [r7, #6]
 80056e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f4:	d108      	bne.n	8005708 <HAL_UART_Transmit+0x80>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d104      	bne.n	8005708 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	e003      	b.n	8005710 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800570c:	2300      	movs	r3, #0
 800570e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005718:	e02d      	b.n	8005776 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2200      	movs	r2, #0
 8005722:	2180      	movs	r1, #128	; 0x80
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fc8a 	bl	800603e <UART_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e039      	b.n	80057a8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10b      	bne.n	8005752 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	881a      	ldrh	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005746:	b292      	uxth	r2, r2
 8005748:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	3302      	adds	r3, #2
 800574e:	61bb      	str	r3, [r7, #24]
 8005750:	e008      	b.n	8005764 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	781a      	ldrb	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	b292      	uxth	r2, r2
 800575c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	3301      	adds	r3, #1
 8005762:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800577c:	b29b      	uxth	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1cb      	bne.n	800571a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2200      	movs	r2, #0
 800578a:	2140      	movs	r1, #64	; 0x40
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fc56 	bl	800603e <UART_WaitOnFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e005      	b.n	80057a8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e000      	b.n	80057a8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80057a6:	2302      	movs	r3, #2
  }
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3720      	adds	r7, #32
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08a      	sub	sp, #40	; 0x28
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	4613      	mov	r3, r2
 80057be:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	f040 80bf 	bne.w	8005948 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <HAL_UART_Receive+0x26>
 80057d0:	88fb      	ldrh	r3, [r7, #6]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e0b7      	b.n	800594a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_UART_Receive+0x38>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e0b0      	b.n	800594a <HAL_UART_Receive+0x19a>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2222      	movs	r2, #34	; 0x22
 80057fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005804:	f7fc f948 	bl	8001a98 <HAL_GetTick>
 8005808:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	88fa      	ldrh	r2, [r7, #6]
 800580e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	88fa      	ldrh	r2, [r7, #6]
 8005816:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005822:	d10e      	bne.n	8005842 <HAL_UART_Receive+0x92>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d105      	bne.n	8005838 <HAL_UART_Receive+0x88>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005832:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005836:	e02d      	b.n	8005894 <HAL_UART_Receive+0xe4>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	22ff      	movs	r2, #255	; 0xff
 800583c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005840:	e028      	b.n	8005894 <HAL_UART_Receive+0xe4>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10d      	bne.n	8005866 <HAL_UART_Receive+0xb6>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d104      	bne.n	800585c <HAL_UART_Receive+0xac>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	22ff      	movs	r2, #255	; 0xff
 8005856:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800585a:	e01b      	b.n	8005894 <HAL_UART_Receive+0xe4>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	227f      	movs	r2, #127	; 0x7f
 8005860:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005864:	e016      	b.n	8005894 <HAL_UART_Receive+0xe4>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800586e:	d10d      	bne.n	800588c <HAL_UART_Receive+0xdc>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d104      	bne.n	8005882 <HAL_UART_Receive+0xd2>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	227f      	movs	r2, #127	; 0x7f
 800587c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005880:	e008      	b.n	8005894 <HAL_UART_Receive+0xe4>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	223f      	movs	r2, #63	; 0x3f
 8005886:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800588a:	e003      	b.n	8005894 <HAL_UART_Receive+0xe4>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800589a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a4:	d108      	bne.n	80058b8 <HAL_UART_Receive+0x108>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d104      	bne.n	80058b8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	e003      	b.n	80058c0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058bc:	2300      	movs	r3, #0
 80058be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80058c8:	e033      	b.n	8005932 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2200      	movs	r2, #0
 80058d2:	2120      	movs	r1, #32
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 fbb2 	bl	800603e <UART_WaitOnFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e032      	b.n	800594a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10c      	bne.n	8005904 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	8a7b      	ldrh	r3, [r7, #18]
 80058f4:	4013      	ands	r3, r2
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	3302      	adds	r3, #2
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	e00d      	b.n	8005920 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800590a:	b29b      	uxth	r3, r3
 800590c:	b2da      	uxtb	r2, r3
 800590e:	8a7b      	ldrh	r3, [r7, #18]
 8005910:	b2db      	uxtb	r3, r3
 8005912:	4013      	ands	r3, r2
 8005914:	b2da      	uxtb	r2, r3
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	3301      	adds	r3, #1
 800591e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1c5      	bne.n	80058ca <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	e000      	b.n	800594a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005948:	2302      	movs	r3, #2
  }
}
 800594a:	4618      	mov	r0, r3
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005954:	b5b0      	push	{r4, r5, r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	4313      	orrs	r3, r2
 8005976:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4bad      	ldr	r3, [pc, #692]	; (8005c34 <UART_SetConfig+0x2e0>)
 8005980:	4013      	ands	r3, r2
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	69f9      	ldr	r1, [r7, #28]
 8005988:	430b      	orrs	r3, r1
 800598a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4aa2      	ldr	r2, [pc, #648]	; (8005c38 <UART_SetConfig+0x2e4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d004      	beq.n	80059bc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69fa      	ldr	r2, [r7, #28]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a99      	ldr	r2, [pc, #612]	; (8005c3c <UART_SetConfig+0x2e8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d121      	bne.n	8005a1e <UART_SetConfig+0xca>
 80059da:	4b99      	ldr	r3, [pc, #612]	; (8005c40 <UART_SetConfig+0x2ec>)
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d817      	bhi.n	8005a18 <UART_SetConfig+0xc4>
 80059e8:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <UART_SetConfig+0x9c>)
 80059ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ee:	bf00      	nop
 80059f0:	08005a01 	.word	0x08005a01
 80059f4:	08005a0d 	.word	0x08005a0d
 80059f8:	08005a07 	.word	0x08005a07
 80059fc:	08005a13 	.word	0x08005a13
 8005a00:	2301      	movs	r3, #1
 8005a02:	76fb      	strb	r3, [r7, #27]
 8005a04:	e0e7      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005a06:	2302      	movs	r3, #2
 8005a08:	76fb      	strb	r3, [r7, #27]
 8005a0a:	e0e4      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	76fb      	strb	r3, [r7, #27]
 8005a10:	e0e1      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005a12:	2308      	movs	r3, #8
 8005a14:	76fb      	strb	r3, [r7, #27]
 8005a16:	e0de      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005a18:	2310      	movs	r3, #16
 8005a1a:	76fb      	strb	r3, [r7, #27]
 8005a1c:	e0db      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a88      	ldr	r2, [pc, #544]	; (8005c44 <UART_SetConfig+0x2f0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d132      	bne.n	8005a8e <UART_SetConfig+0x13a>
 8005a28:	4b85      	ldr	r3, [pc, #532]	; (8005c40 <UART_SetConfig+0x2ec>)
 8005a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2e:	f003 030c 	and.w	r3, r3, #12
 8005a32:	2b0c      	cmp	r3, #12
 8005a34:	d828      	bhi.n	8005a88 <UART_SetConfig+0x134>
 8005a36:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <UART_SetConfig+0xe8>)
 8005a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3c:	08005a71 	.word	0x08005a71
 8005a40:	08005a89 	.word	0x08005a89
 8005a44:	08005a89 	.word	0x08005a89
 8005a48:	08005a89 	.word	0x08005a89
 8005a4c:	08005a7d 	.word	0x08005a7d
 8005a50:	08005a89 	.word	0x08005a89
 8005a54:	08005a89 	.word	0x08005a89
 8005a58:	08005a89 	.word	0x08005a89
 8005a5c:	08005a77 	.word	0x08005a77
 8005a60:	08005a89 	.word	0x08005a89
 8005a64:	08005a89 	.word	0x08005a89
 8005a68:	08005a89 	.word	0x08005a89
 8005a6c:	08005a83 	.word	0x08005a83
 8005a70:	2300      	movs	r3, #0
 8005a72:	76fb      	strb	r3, [r7, #27]
 8005a74:	e0af      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005a76:	2302      	movs	r3, #2
 8005a78:	76fb      	strb	r3, [r7, #27]
 8005a7a:	e0ac      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	76fb      	strb	r3, [r7, #27]
 8005a80:	e0a9      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005a82:	2308      	movs	r3, #8
 8005a84:	76fb      	strb	r3, [r7, #27]
 8005a86:	e0a6      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005a88:	2310      	movs	r3, #16
 8005a8a:	76fb      	strb	r3, [r7, #27]
 8005a8c:	e0a3      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a6d      	ldr	r2, [pc, #436]	; (8005c48 <UART_SetConfig+0x2f4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d120      	bne.n	8005ada <UART_SetConfig+0x186>
 8005a98:	4b69      	ldr	r3, [pc, #420]	; (8005c40 <UART_SetConfig+0x2ec>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aa2:	2b30      	cmp	r3, #48	; 0x30
 8005aa4:	d013      	beq.n	8005ace <UART_SetConfig+0x17a>
 8005aa6:	2b30      	cmp	r3, #48	; 0x30
 8005aa8:	d814      	bhi.n	8005ad4 <UART_SetConfig+0x180>
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d009      	beq.n	8005ac2 <UART_SetConfig+0x16e>
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d810      	bhi.n	8005ad4 <UART_SetConfig+0x180>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <UART_SetConfig+0x168>
 8005ab6:	2b10      	cmp	r3, #16
 8005ab8:	d006      	beq.n	8005ac8 <UART_SetConfig+0x174>
 8005aba:	e00b      	b.n	8005ad4 <UART_SetConfig+0x180>
 8005abc:	2300      	movs	r3, #0
 8005abe:	76fb      	strb	r3, [r7, #27]
 8005ac0:	e089      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	76fb      	strb	r3, [r7, #27]
 8005ac6:	e086      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	76fb      	strb	r3, [r7, #27]
 8005acc:	e083      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005ace:	2308      	movs	r3, #8
 8005ad0:	76fb      	strb	r3, [r7, #27]
 8005ad2:	e080      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	76fb      	strb	r3, [r7, #27]
 8005ad8:	e07d      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a5b      	ldr	r2, [pc, #364]	; (8005c4c <UART_SetConfig+0x2f8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d120      	bne.n	8005b26 <UART_SetConfig+0x1d2>
 8005ae4:	4b56      	ldr	r3, [pc, #344]	; (8005c40 <UART_SetConfig+0x2ec>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005aee:	2bc0      	cmp	r3, #192	; 0xc0
 8005af0:	d013      	beq.n	8005b1a <UART_SetConfig+0x1c6>
 8005af2:	2bc0      	cmp	r3, #192	; 0xc0
 8005af4:	d814      	bhi.n	8005b20 <UART_SetConfig+0x1cc>
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d009      	beq.n	8005b0e <UART_SetConfig+0x1ba>
 8005afa:	2b80      	cmp	r3, #128	; 0x80
 8005afc:	d810      	bhi.n	8005b20 <UART_SetConfig+0x1cc>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <UART_SetConfig+0x1b4>
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d006      	beq.n	8005b14 <UART_SetConfig+0x1c0>
 8005b06:	e00b      	b.n	8005b20 <UART_SetConfig+0x1cc>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	76fb      	strb	r3, [r7, #27]
 8005b0c:	e063      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	76fb      	strb	r3, [r7, #27]
 8005b12:	e060      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005b14:	2304      	movs	r3, #4
 8005b16:	76fb      	strb	r3, [r7, #27]
 8005b18:	e05d      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	76fb      	strb	r3, [r7, #27]
 8005b1e:	e05a      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005b20:	2310      	movs	r3, #16
 8005b22:	76fb      	strb	r3, [r7, #27]
 8005b24:	e057      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a49      	ldr	r2, [pc, #292]	; (8005c50 <UART_SetConfig+0x2fc>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d125      	bne.n	8005b7c <UART_SetConfig+0x228>
 8005b30:	4b43      	ldr	r3, [pc, #268]	; (8005c40 <UART_SetConfig+0x2ec>)
 8005b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b3e:	d017      	beq.n	8005b70 <UART_SetConfig+0x21c>
 8005b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b44:	d817      	bhi.n	8005b76 <UART_SetConfig+0x222>
 8005b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b4a:	d00b      	beq.n	8005b64 <UART_SetConfig+0x210>
 8005b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b50:	d811      	bhi.n	8005b76 <UART_SetConfig+0x222>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <UART_SetConfig+0x20a>
 8005b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b5a:	d006      	beq.n	8005b6a <UART_SetConfig+0x216>
 8005b5c:	e00b      	b.n	8005b76 <UART_SetConfig+0x222>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	76fb      	strb	r3, [r7, #27]
 8005b62:	e038      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005b64:	2302      	movs	r3, #2
 8005b66:	76fb      	strb	r3, [r7, #27]
 8005b68:	e035      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005b6a:	2304      	movs	r3, #4
 8005b6c:	76fb      	strb	r3, [r7, #27]
 8005b6e:	e032      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005b70:	2308      	movs	r3, #8
 8005b72:	76fb      	strb	r3, [r7, #27]
 8005b74:	e02f      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005b76:	2310      	movs	r3, #16
 8005b78:	76fb      	strb	r3, [r7, #27]
 8005b7a:	e02c      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2d      	ldr	r2, [pc, #180]	; (8005c38 <UART_SetConfig+0x2e4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d125      	bne.n	8005bd2 <UART_SetConfig+0x27e>
 8005b86:	4b2e      	ldr	r3, [pc, #184]	; (8005c40 <UART_SetConfig+0x2ec>)
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b94:	d017      	beq.n	8005bc6 <UART_SetConfig+0x272>
 8005b96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b9a:	d817      	bhi.n	8005bcc <UART_SetConfig+0x278>
 8005b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba0:	d00b      	beq.n	8005bba <UART_SetConfig+0x266>
 8005ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba6:	d811      	bhi.n	8005bcc <UART_SetConfig+0x278>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <UART_SetConfig+0x260>
 8005bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb0:	d006      	beq.n	8005bc0 <UART_SetConfig+0x26c>
 8005bb2:	e00b      	b.n	8005bcc <UART_SetConfig+0x278>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	76fb      	strb	r3, [r7, #27]
 8005bb8:	e00d      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	76fb      	strb	r3, [r7, #27]
 8005bbe:	e00a      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	76fb      	strb	r3, [r7, #27]
 8005bc4:	e007      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005bc6:	2308      	movs	r3, #8
 8005bc8:	76fb      	strb	r3, [r7, #27]
 8005bca:	e004      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005bcc:	2310      	movs	r3, #16
 8005bce:	76fb      	strb	r3, [r7, #27]
 8005bd0:	e001      	b.n	8005bd6 <UART_SetConfig+0x282>
 8005bd2:	2310      	movs	r3, #16
 8005bd4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a17      	ldr	r2, [pc, #92]	; (8005c38 <UART_SetConfig+0x2e4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	f040 8087 	bne.w	8005cf0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005be2:	7efb      	ldrb	r3, [r7, #27]
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d837      	bhi.n	8005c58 <UART_SetConfig+0x304>
 8005be8:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <UART_SetConfig+0x29c>)
 8005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bee:	bf00      	nop
 8005bf0:	08005c15 	.word	0x08005c15
 8005bf4:	08005c59 	.word	0x08005c59
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c59 	.word	0x08005c59
 8005c00:	08005c23 	.word	0x08005c23
 8005c04:	08005c59 	.word	0x08005c59
 8005c08:	08005c59 	.word	0x08005c59
 8005c0c:	08005c59 	.word	0x08005c59
 8005c10:	08005c2b 	.word	0x08005c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c14:	f7fe fc9e 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8005c18:	6178      	str	r0, [r7, #20]
        break;
 8005c1a:	e022      	b.n	8005c62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c1c:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <UART_SetConfig+0x300>)
 8005c1e:	617b      	str	r3, [r7, #20]
        break;
 8005c20:	e01f      	b.n	8005c62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c22:	f7fe fbff 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 8005c26:	6178      	str	r0, [r7, #20]
        break;
 8005c28:	e01b      	b.n	8005c62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c2e:	617b      	str	r3, [r7, #20]
        break;
 8005c30:	e017      	b.n	8005c62 <UART_SetConfig+0x30e>
 8005c32:	bf00      	nop
 8005c34:	efff69f3 	.word	0xefff69f3
 8005c38:	40008000 	.word	0x40008000
 8005c3c:	40013800 	.word	0x40013800
 8005c40:	40021000 	.word	0x40021000
 8005c44:	40004400 	.word	0x40004400
 8005c48:	40004800 	.word	0x40004800
 8005c4c:	40004c00 	.word	0x40004c00
 8005c50:	40005000 	.word	0x40005000
 8005c54:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	76bb      	strb	r3, [r7, #26]
        break;
 8005c60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 80f1 	beq.w	8005e4c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	4413      	add	r3, r2
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d305      	bcc.n	8005c86 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d902      	bls.n	8005c8c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	76bb      	strb	r3, [r7, #26]
 8005c8a:	e0df      	b.n	8005e4c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f04f 0100 	mov.w	r1, #0
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	f04f 0300 	mov.w	r3, #0
 8005c9c:	020b      	lsls	r3, r1, #8
 8005c9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ca2:	0202      	lsls	r2, r0, #8
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	6849      	ldr	r1, [r1, #4]
 8005ca8:	0849      	lsrs	r1, r1, #1
 8005caa:	4608      	mov	r0, r1
 8005cac:	f04f 0100 	mov.w	r1, #0
 8005cb0:	1814      	adds	r4, r2, r0
 8005cb2:	eb43 0501 	adc.w	r5, r3, r1
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	f7fa ffc0 	bl	8000c48 <__aeabi_uldivmod>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4613      	mov	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd6:	d308      	bcc.n	8005cea <UART_SetConfig+0x396>
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cde:	d204      	bcs.n	8005cea <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	60da      	str	r2, [r3, #12]
 8005ce8:	e0b0      	b.n	8005e4c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	76bb      	strb	r3, [r7, #26]
 8005cee:	e0ad      	b.n	8005e4c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cf8:	d15c      	bne.n	8005db4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005cfa:	7efb      	ldrb	r3, [r7, #27]
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d828      	bhi.n	8005d52 <UART_SetConfig+0x3fe>
 8005d00:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <UART_SetConfig+0x3b4>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d2d 	.word	0x08005d2d
 8005d0c:	08005d35 	.word	0x08005d35
 8005d10:	08005d3d 	.word	0x08005d3d
 8005d14:	08005d53 	.word	0x08005d53
 8005d18:	08005d43 	.word	0x08005d43
 8005d1c:	08005d53 	.word	0x08005d53
 8005d20:	08005d53 	.word	0x08005d53
 8005d24:	08005d53 	.word	0x08005d53
 8005d28:	08005d4b 	.word	0x08005d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d2c:	f7fe fc12 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8005d30:	6178      	str	r0, [r7, #20]
        break;
 8005d32:	e013      	b.n	8005d5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d34:	f7fe fc24 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 8005d38:	6178      	str	r0, [r7, #20]
        break;
 8005d3a:	e00f      	b.n	8005d5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d3c:	4b49      	ldr	r3, [pc, #292]	; (8005e64 <UART_SetConfig+0x510>)
 8005d3e:	617b      	str	r3, [r7, #20]
        break;
 8005d40:	e00c      	b.n	8005d5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d42:	f7fe fb6f 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 8005d46:	6178      	str	r0, [r7, #20]
        break;
 8005d48:	e008      	b.n	8005d5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4e:	617b      	str	r3, [r7, #20]
        break;
 8005d50:	e004      	b.n	8005d5c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	76bb      	strb	r3, [r7, #26]
        break;
 8005d5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d074      	beq.n	8005e4c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	005a      	lsls	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	085b      	lsrs	r3, r3, #1
 8005d6c:	441a      	add	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b0f      	cmp	r3, #15
 8005d7e:	d916      	bls.n	8005dae <UART_SetConfig+0x45a>
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d86:	d212      	bcs.n	8005dae <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f023 030f 	bic.w	r3, r3, #15
 8005d90:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	89fb      	ldrh	r3, [r7, #14]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	89fa      	ldrh	r2, [r7, #14]
 8005daa:	60da      	str	r2, [r3, #12]
 8005dac:	e04e      	b.n	8005e4c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	76bb      	strb	r3, [r7, #26]
 8005db2:	e04b      	b.n	8005e4c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005db4:	7efb      	ldrb	r3, [r7, #27]
 8005db6:	2b08      	cmp	r3, #8
 8005db8:	d827      	bhi.n	8005e0a <UART_SetConfig+0x4b6>
 8005dba:	a201      	add	r2, pc, #4	; (adr r2, 8005dc0 <UART_SetConfig+0x46c>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005de5 	.word	0x08005de5
 8005dc4:	08005ded 	.word	0x08005ded
 8005dc8:	08005df5 	.word	0x08005df5
 8005dcc:	08005e0b 	.word	0x08005e0b
 8005dd0:	08005dfb 	.word	0x08005dfb
 8005dd4:	08005e0b 	.word	0x08005e0b
 8005dd8:	08005e0b 	.word	0x08005e0b
 8005ddc:	08005e0b 	.word	0x08005e0b
 8005de0:	08005e03 	.word	0x08005e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005de4:	f7fe fbb6 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8005de8:	6178      	str	r0, [r7, #20]
        break;
 8005dea:	e013      	b.n	8005e14 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dec:	f7fe fbc8 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 8005df0:	6178      	str	r0, [r7, #20]
        break;
 8005df2:	e00f      	b.n	8005e14 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005df4:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <UART_SetConfig+0x510>)
 8005df6:	617b      	str	r3, [r7, #20]
        break;
 8005df8:	e00c      	b.n	8005e14 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dfa:	f7fe fb13 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 8005dfe:	6178      	str	r0, [r7, #20]
        break;
 8005e00:	e008      	b.n	8005e14 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e06:	617b      	str	r3, [r7, #20]
        break;
 8005e08:	e004      	b.n	8005e14 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	76bb      	strb	r3, [r7, #26]
        break;
 8005e12:	bf00      	nop
    }

    if (pclk != 0U)
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d018      	beq.n	8005e4c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	085a      	lsrs	r2, r3, #1
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	441a      	add	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b0f      	cmp	r3, #15
 8005e34:	d908      	bls.n	8005e48 <UART_SetConfig+0x4f4>
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3c:	d204      	bcs.n	8005e48 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	60da      	str	r2, [r3, #12]
 8005e46:	e001      	b.n	8005e4c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e58:	7ebb      	ldrb	r3, [r7, #26]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bdb0      	pop	{r4, r5, r7, pc}
 8005e62:	bf00      	nop
 8005e64:	00f42400 	.word	0x00f42400

08005e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01a      	beq.n	8005f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f66:	d10a      	bne.n	8005f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
  }
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fbc:	f7fb fd6c 	bl	8001a98 <HAL_GetTick>
 8005fc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d10e      	bne.n	8005fee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f82d 	bl	800603e <UART_WaitOnFlagUntilTimeout>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e023      	b.n	8006036 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d10e      	bne.n	800601a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ffc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f817 	bl	800603e <UART_WaitOnFlagUntilTimeout>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e00d      	b.n	8006036 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2220      	movs	r2, #32
 8006024:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	603b      	str	r3, [r7, #0]
 800604a:	4613      	mov	r3, r2
 800604c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800604e:	e05e      	b.n	800610e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006056:	d05a      	beq.n	800610e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006058:	f7fb fd1e 	bl	8001a98 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	429a      	cmp	r2, r3
 8006066:	d302      	bcc.n	800606e <UART_WaitOnFlagUntilTimeout+0x30>
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d11b      	bne.n	80060a6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800607c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0201 	bic.w	r2, r2, #1
 800608c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2220      	movs	r2, #32
 8006092:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e043      	b.n	800612e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d02c      	beq.n	800610e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c2:	d124      	bne.n	800610e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060cc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060dc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0201 	bic.w	r2, r2, #1
 80060ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2220      	movs	r2, #32
 80060f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e00f      	b.n	800612e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69da      	ldr	r2, [r3, #28]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4013      	ands	r3, r2
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	429a      	cmp	r2, r3
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	429a      	cmp	r2, r3
 800612a:	d091      	beq.n	8006050 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <__errno>:
 8006138:	4b01      	ldr	r3, [pc, #4]	; (8006140 <__errno+0x8>)
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	2000000c 	.word	0x2000000c

08006144 <__libc_init_array>:
 8006144:	b570      	push	{r4, r5, r6, lr}
 8006146:	4d0d      	ldr	r5, [pc, #52]	; (800617c <__libc_init_array+0x38>)
 8006148:	4c0d      	ldr	r4, [pc, #52]	; (8006180 <__libc_init_array+0x3c>)
 800614a:	1b64      	subs	r4, r4, r5
 800614c:	10a4      	asrs	r4, r4, #2
 800614e:	2600      	movs	r6, #0
 8006150:	42a6      	cmp	r6, r4
 8006152:	d109      	bne.n	8006168 <__libc_init_array+0x24>
 8006154:	4d0b      	ldr	r5, [pc, #44]	; (8006184 <__libc_init_array+0x40>)
 8006156:	4c0c      	ldr	r4, [pc, #48]	; (8006188 <__libc_init_array+0x44>)
 8006158:	f002 fd08 	bl	8008b6c <_init>
 800615c:	1b64      	subs	r4, r4, r5
 800615e:	10a4      	asrs	r4, r4, #2
 8006160:	2600      	movs	r6, #0
 8006162:	42a6      	cmp	r6, r4
 8006164:	d105      	bne.n	8006172 <__libc_init_array+0x2e>
 8006166:	bd70      	pop	{r4, r5, r6, pc}
 8006168:	f855 3b04 	ldr.w	r3, [r5], #4
 800616c:	4798      	blx	r3
 800616e:	3601      	adds	r6, #1
 8006170:	e7ee      	b.n	8006150 <__libc_init_array+0xc>
 8006172:	f855 3b04 	ldr.w	r3, [r5], #4
 8006176:	4798      	blx	r3
 8006178:	3601      	adds	r6, #1
 800617a:	e7f2      	b.n	8006162 <__libc_init_array+0x1e>
 800617c:	08008fd4 	.word	0x08008fd4
 8006180:	08008fd4 	.word	0x08008fd4
 8006184:	08008fd4 	.word	0x08008fd4
 8006188:	08008fd8 	.word	0x08008fd8

0800618c <memset>:
 800618c:	4402      	add	r2, r0
 800618e:	4603      	mov	r3, r0
 8006190:	4293      	cmp	r3, r2
 8006192:	d100      	bne.n	8006196 <memset+0xa>
 8006194:	4770      	bx	lr
 8006196:	f803 1b01 	strb.w	r1, [r3], #1
 800619a:	e7f9      	b.n	8006190 <memset+0x4>

0800619c <__cvt>:
 800619c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061a0:	ec55 4b10 	vmov	r4, r5, d0
 80061a4:	2d00      	cmp	r5, #0
 80061a6:	460e      	mov	r6, r1
 80061a8:	4619      	mov	r1, r3
 80061aa:	462b      	mov	r3, r5
 80061ac:	bfbb      	ittet	lt
 80061ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061b2:	461d      	movlt	r5, r3
 80061b4:	2300      	movge	r3, #0
 80061b6:	232d      	movlt	r3, #45	; 0x2d
 80061b8:	700b      	strb	r3, [r1, #0]
 80061ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061c0:	4691      	mov	r9, r2
 80061c2:	f023 0820 	bic.w	r8, r3, #32
 80061c6:	bfbc      	itt	lt
 80061c8:	4622      	movlt	r2, r4
 80061ca:	4614      	movlt	r4, r2
 80061cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061d0:	d005      	beq.n	80061de <__cvt+0x42>
 80061d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061d6:	d100      	bne.n	80061da <__cvt+0x3e>
 80061d8:	3601      	adds	r6, #1
 80061da:	2102      	movs	r1, #2
 80061dc:	e000      	b.n	80061e0 <__cvt+0x44>
 80061de:	2103      	movs	r1, #3
 80061e0:	ab03      	add	r3, sp, #12
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	ab02      	add	r3, sp, #8
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	ec45 4b10 	vmov	d0, r4, r5
 80061ec:	4653      	mov	r3, sl
 80061ee:	4632      	mov	r2, r6
 80061f0:	f000 fce2 	bl	8006bb8 <_dtoa_r>
 80061f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061f8:	4607      	mov	r7, r0
 80061fa:	d102      	bne.n	8006202 <__cvt+0x66>
 80061fc:	f019 0f01 	tst.w	r9, #1
 8006200:	d022      	beq.n	8006248 <__cvt+0xac>
 8006202:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006206:	eb07 0906 	add.w	r9, r7, r6
 800620a:	d110      	bne.n	800622e <__cvt+0x92>
 800620c:	783b      	ldrb	r3, [r7, #0]
 800620e:	2b30      	cmp	r3, #48	; 0x30
 8006210:	d10a      	bne.n	8006228 <__cvt+0x8c>
 8006212:	2200      	movs	r2, #0
 8006214:	2300      	movs	r3, #0
 8006216:	4620      	mov	r0, r4
 8006218:	4629      	mov	r1, r5
 800621a:	f7fa fc55 	bl	8000ac8 <__aeabi_dcmpeq>
 800621e:	b918      	cbnz	r0, 8006228 <__cvt+0x8c>
 8006220:	f1c6 0601 	rsb	r6, r6, #1
 8006224:	f8ca 6000 	str.w	r6, [sl]
 8006228:	f8da 3000 	ldr.w	r3, [sl]
 800622c:	4499      	add	r9, r3
 800622e:	2200      	movs	r2, #0
 8006230:	2300      	movs	r3, #0
 8006232:	4620      	mov	r0, r4
 8006234:	4629      	mov	r1, r5
 8006236:	f7fa fc47 	bl	8000ac8 <__aeabi_dcmpeq>
 800623a:	b108      	cbz	r0, 8006240 <__cvt+0xa4>
 800623c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006240:	2230      	movs	r2, #48	; 0x30
 8006242:	9b03      	ldr	r3, [sp, #12]
 8006244:	454b      	cmp	r3, r9
 8006246:	d307      	bcc.n	8006258 <__cvt+0xbc>
 8006248:	9b03      	ldr	r3, [sp, #12]
 800624a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800624c:	1bdb      	subs	r3, r3, r7
 800624e:	4638      	mov	r0, r7
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	b004      	add	sp, #16
 8006254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006258:	1c59      	adds	r1, r3, #1
 800625a:	9103      	str	r1, [sp, #12]
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	e7f0      	b.n	8006242 <__cvt+0xa6>

08006260 <__exponent>:
 8006260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006262:	4603      	mov	r3, r0
 8006264:	2900      	cmp	r1, #0
 8006266:	bfb8      	it	lt
 8006268:	4249      	neglt	r1, r1
 800626a:	f803 2b02 	strb.w	r2, [r3], #2
 800626e:	bfb4      	ite	lt
 8006270:	222d      	movlt	r2, #45	; 0x2d
 8006272:	222b      	movge	r2, #43	; 0x2b
 8006274:	2909      	cmp	r1, #9
 8006276:	7042      	strb	r2, [r0, #1]
 8006278:	dd2a      	ble.n	80062d0 <__exponent+0x70>
 800627a:	f10d 0407 	add.w	r4, sp, #7
 800627e:	46a4      	mov	ip, r4
 8006280:	270a      	movs	r7, #10
 8006282:	46a6      	mov	lr, r4
 8006284:	460a      	mov	r2, r1
 8006286:	fb91 f6f7 	sdiv	r6, r1, r7
 800628a:	fb07 1516 	mls	r5, r7, r6, r1
 800628e:	3530      	adds	r5, #48	; 0x30
 8006290:	2a63      	cmp	r2, #99	; 0x63
 8006292:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006296:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800629a:	4631      	mov	r1, r6
 800629c:	dcf1      	bgt.n	8006282 <__exponent+0x22>
 800629e:	3130      	adds	r1, #48	; 0x30
 80062a0:	f1ae 0502 	sub.w	r5, lr, #2
 80062a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062a8:	1c44      	adds	r4, r0, #1
 80062aa:	4629      	mov	r1, r5
 80062ac:	4561      	cmp	r1, ip
 80062ae:	d30a      	bcc.n	80062c6 <__exponent+0x66>
 80062b0:	f10d 0209 	add.w	r2, sp, #9
 80062b4:	eba2 020e 	sub.w	r2, r2, lr
 80062b8:	4565      	cmp	r5, ip
 80062ba:	bf88      	it	hi
 80062bc:	2200      	movhi	r2, #0
 80062be:	4413      	add	r3, r2
 80062c0:	1a18      	subs	r0, r3, r0
 80062c2:	b003      	add	sp, #12
 80062c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062ce:	e7ed      	b.n	80062ac <__exponent+0x4c>
 80062d0:	2330      	movs	r3, #48	; 0x30
 80062d2:	3130      	adds	r1, #48	; 0x30
 80062d4:	7083      	strb	r3, [r0, #2]
 80062d6:	70c1      	strb	r1, [r0, #3]
 80062d8:	1d03      	adds	r3, r0, #4
 80062da:	e7f1      	b.n	80062c0 <__exponent+0x60>

080062dc <_printf_float>:
 80062dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e0:	ed2d 8b02 	vpush	{d8}
 80062e4:	b08d      	sub	sp, #52	; 0x34
 80062e6:	460c      	mov	r4, r1
 80062e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062ec:	4616      	mov	r6, r2
 80062ee:	461f      	mov	r7, r3
 80062f0:	4605      	mov	r5, r0
 80062f2:	f001 fb43 	bl	800797c <_localeconv_r>
 80062f6:	f8d0 a000 	ldr.w	sl, [r0]
 80062fa:	4650      	mov	r0, sl
 80062fc:	f7f9 ff68 	bl	80001d0 <strlen>
 8006300:	2300      	movs	r3, #0
 8006302:	930a      	str	r3, [sp, #40]	; 0x28
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	9305      	str	r3, [sp, #20]
 8006308:	f8d8 3000 	ldr.w	r3, [r8]
 800630c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006310:	3307      	adds	r3, #7
 8006312:	f023 0307 	bic.w	r3, r3, #7
 8006316:	f103 0208 	add.w	r2, r3, #8
 800631a:	f8c8 2000 	str.w	r2, [r8]
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006326:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800632a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800632e:	9307      	str	r3, [sp, #28]
 8006330:	f8cd 8018 	str.w	r8, [sp, #24]
 8006334:	ee08 0a10 	vmov	s16, r0
 8006338:	4b9f      	ldr	r3, [pc, #636]	; (80065b8 <_printf_float+0x2dc>)
 800633a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800633e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006342:	f7fa fbf3 	bl	8000b2c <__aeabi_dcmpun>
 8006346:	bb88      	cbnz	r0, 80063ac <_printf_float+0xd0>
 8006348:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800634c:	4b9a      	ldr	r3, [pc, #616]	; (80065b8 <_printf_float+0x2dc>)
 800634e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006352:	f7fa fbcd 	bl	8000af0 <__aeabi_dcmple>
 8006356:	bb48      	cbnz	r0, 80063ac <_printf_float+0xd0>
 8006358:	2200      	movs	r2, #0
 800635a:	2300      	movs	r3, #0
 800635c:	4640      	mov	r0, r8
 800635e:	4649      	mov	r1, r9
 8006360:	f7fa fbbc 	bl	8000adc <__aeabi_dcmplt>
 8006364:	b110      	cbz	r0, 800636c <_printf_float+0x90>
 8006366:	232d      	movs	r3, #45	; 0x2d
 8006368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800636c:	4b93      	ldr	r3, [pc, #588]	; (80065bc <_printf_float+0x2e0>)
 800636e:	4894      	ldr	r0, [pc, #592]	; (80065c0 <_printf_float+0x2e4>)
 8006370:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006374:	bf94      	ite	ls
 8006376:	4698      	movls	r8, r3
 8006378:	4680      	movhi	r8, r0
 800637a:	2303      	movs	r3, #3
 800637c:	6123      	str	r3, [r4, #16]
 800637e:	9b05      	ldr	r3, [sp, #20]
 8006380:	f023 0204 	bic.w	r2, r3, #4
 8006384:	6022      	str	r2, [r4, #0]
 8006386:	f04f 0900 	mov.w	r9, #0
 800638a:	9700      	str	r7, [sp, #0]
 800638c:	4633      	mov	r3, r6
 800638e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006390:	4621      	mov	r1, r4
 8006392:	4628      	mov	r0, r5
 8006394:	f000 f9d8 	bl	8006748 <_printf_common>
 8006398:	3001      	adds	r0, #1
 800639a:	f040 8090 	bne.w	80064be <_printf_float+0x1e2>
 800639e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063a2:	b00d      	add	sp, #52	; 0x34
 80063a4:	ecbd 8b02 	vpop	{d8}
 80063a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	4640      	mov	r0, r8
 80063b2:	4649      	mov	r1, r9
 80063b4:	f7fa fbba 	bl	8000b2c <__aeabi_dcmpun>
 80063b8:	b140      	cbz	r0, 80063cc <_printf_float+0xf0>
 80063ba:	464b      	mov	r3, r9
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bfbc      	itt	lt
 80063c0:	232d      	movlt	r3, #45	; 0x2d
 80063c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063c6:	487f      	ldr	r0, [pc, #508]	; (80065c4 <_printf_float+0x2e8>)
 80063c8:	4b7f      	ldr	r3, [pc, #508]	; (80065c8 <_printf_float+0x2ec>)
 80063ca:	e7d1      	b.n	8006370 <_printf_float+0x94>
 80063cc:	6863      	ldr	r3, [r4, #4]
 80063ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063d2:	9206      	str	r2, [sp, #24]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	d13f      	bne.n	8006458 <_printf_float+0x17c>
 80063d8:	2306      	movs	r3, #6
 80063da:	6063      	str	r3, [r4, #4]
 80063dc:	9b05      	ldr	r3, [sp, #20]
 80063de:	6861      	ldr	r1, [r4, #4]
 80063e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063e4:	2300      	movs	r3, #0
 80063e6:	9303      	str	r3, [sp, #12]
 80063e8:	ab0a      	add	r3, sp, #40	; 0x28
 80063ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063ee:	ab09      	add	r3, sp, #36	; 0x24
 80063f0:	ec49 8b10 	vmov	d0, r8, r9
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	6022      	str	r2, [r4, #0]
 80063f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063fc:	4628      	mov	r0, r5
 80063fe:	f7ff fecd 	bl	800619c <__cvt>
 8006402:	9b06      	ldr	r3, [sp, #24]
 8006404:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006406:	2b47      	cmp	r3, #71	; 0x47
 8006408:	4680      	mov	r8, r0
 800640a:	d108      	bne.n	800641e <_printf_float+0x142>
 800640c:	1cc8      	adds	r0, r1, #3
 800640e:	db02      	blt.n	8006416 <_printf_float+0x13a>
 8006410:	6863      	ldr	r3, [r4, #4]
 8006412:	4299      	cmp	r1, r3
 8006414:	dd41      	ble.n	800649a <_printf_float+0x1be>
 8006416:	f1ab 0b02 	sub.w	fp, fp, #2
 800641a:	fa5f fb8b 	uxtb.w	fp, fp
 800641e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006422:	d820      	bhi.n	8006466 <_printf_float+0x18a>
 8006424:	3901      	subs	r1, #1
 8006426:	465a      	mov	r2, fp
 8006428:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800642c:	9109      	str	r1, [sp, #36]	; 0x24
 800642e:	f7ff ff17 	bl	8006260 <__exponent>
 8006432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006434:	1813      	adds	r3, r2, r0
 8006436:	2a01      	cmp	r2, #1
 8006438:	4681      	mov	r9, r0
 800643a:	6123      	str	r3, [r4, #16]
 800643c:	dc02      	bgt.n	8006444 <_printf_float+0x168>
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	07d2      	lsls	r2, r2, #31
 8006442:	d501      	bpl.n	8006448 <_printf_float+0x16c>
 8006444:	3301      	adds	r3, #1
 8006446:	6123      	str	r3, [r4, #16]
 8006448:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800644c:	2b00      	cmp	r3, #0
 800644e:	d09c      	beq.n	800638a <_printf_float+0xae>
 8006450:	232d      	movs	r3, #45	; 0x2d
 8006452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006456:	e798      	b.n	800638a <_printf_float+0xae>
 8006458:	9a06      	ldr	r2, [sp, #24]
 800645a:	2a47      	cmp	r2, #71	; 0x47
 800645c:	d1be      	bne.n	80063dc <_printf_float+0x100>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1bc      	bne.n	80063dc <_printf_float+0x100>
 8006462:	2301      	movs	r3, #1
 8006464:	e7b9      	b.n	80063da <_printf_float+0xfe>
 8006466:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800646a:	d118      	bne.n	800649e <_printf_float+0x1c2>
 800646c:	2900      	cmp	r1, #0
 800646e:	6863      	ldr	r3, [r4, #4]
 8006470:	dd0b      	ble.n	800648a <_printf_float+0x1ae>
 8006472:	6121      	str	r1, [r4, #16]
 8006474:	b913      	cbnz	r3, 800647c <_printf_float+0x1a0>
 8006476:	6822      	ldr	r2, [r4, #0]
 8006478:	07d0      	lsls	r0, r2, #31
 800647a:	d502      	bpl.n	8006482 <_printf_float+0x1a6>
 800647c:	3301      	adds	r3, #1
 800647e:	440b      	add	r3, r1
 8006480:	6123      	str	r3, [r4, #16]
 8006482:	65a1      	str	r1, [r4, #88]	; 0x58
 8006484:	f04f 0900 	mov.w	r9, #0
 8006488:	e7de      	b.n	8006448 <_printf_float+0x16c>
 800648a:	b913      	cbnz	r3, 8006492 <_printf_float+0x1b6>
 800648c:	6822      	ldr	r2, [r4, #0]
 800648e:	07d2      	lsls	r2, r2, #31
 8006490:	d501      	bpl.n	8006496 <_printf_float+0x1ba>
 8006492:	3302      	adds	r3, #2
 8006494:	e7f4      	b.n	8006480 <_printf_float+0x1a4>
 8006496:	2301      	movs	r3, #1
 8006498:	e7f2      	b.n	8006480 <_printf_float+0x1a4>
 800649a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800649e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a0:	4299      	cmp	r1, r3
 80064a2:	db05      	blt.n	80064b0 <_printf_float+0x1d4>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	6121      	str	r1, [r4, #16]
 80064a8:	07d8      	lsls	r0, r3, #31
 80064aa:	d5ea      	bpl.n	8006482 <_printf_float+0x1a6>
 80064ac:	1c4b      	adds	r3, r1, #1
 80064ae:	e7e7      	b.n	8006480 <_printf_float+0x1a4>
 80064b0:	2900      	cmp	r1, #0
 80064b2:	bfd4      	ite	le
 80064b4:	f1c1 0202 	rsble	r2, r1, #2
 80064b8:	2201      	movgt	r2, #1
 80064ba:	4413      	add	r3, r2
 80064bc:	e7e0      	b.n	8006480 <_printf_float+0x1a4>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	055a      	lsls	r2, r3, #21
 80064c2:	d407      	bmi.n	80064d4 <_printf_float+0x1f8>
 80064c4:	6923      	ldr	r3, [r4, #16]
 80064c6:	4642      	mov	r2, r8
 80064c8:	4631      	mov	r1, r6
 80064ca:	4628      	mov	r0, r5
 80064cc:	47b8      	blx	r7
 80064ce:	3001      	adds	r0, #1
 80064d0:	d12c      	bne.n	800652c <_printf_float+0x250>
 80064d2:	e764      	b.n	800639e <_printf_float+0xc2>
 80064d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064d8:	f240 80e0 	bls.w	800669c <_printf_float+0x3c0>
 80064dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064e0:	2200      	movs	r2, #0
 80064e2:	2300      	movs	r3, #0
 80064e4:	f7fa faf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d034      	beq.n	8006556 <_printf_float+0x27a>
 80064ec:	4a37      	ldr	r2, [pc, #220]	; (80065cc <_printf_float+0x2f0>)
 80064ee:	2301      	movs	r3, #1
 80064f0:	4631      	mov	r1, r6
 80064f2:	4628      	mov	r0, r5
 80064f4:	47b8      	blx	r7
 80064f6:	3001      	adds	r0, #1
 80064f8:	f43f af51 	beq.w	800639e <_printf_float+0xc2>
 80064fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006500:	429a      	cmp	r2, r3
 8006502:	db02      	blt.n	800650a <_printf_float+0x22e>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	07d8      	lsls	r0, r3, #31
 8006508:	d510      	bpl.n	800652c <_printf_float+0x250>
 800650a:	ee18 3a10 	vmov	r3, s16
 800650e:	4652      	mov	r2, sl
 8006510:	4631      	mov	r1, r6
 8006512:	4628      	mov	r0, r5
 8006514:	47b8      	blx	r7
 8006516:	3001      	adds	r0, #1
 8006518:	f43f af41 	beq.w	800639e <_printf_float+0xc2>
 800651c:	f04f 0800 	mov.w	r8, #0
 8006520:	f104 091a 	add.w	r9, r4, #26
 8006524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006526:	3b01      	subs	r3, #1
 8006528:	4543      	cmp	r3, r8
 800652a:	dc09      	bgt.n	8006540 <_printf_float+0x264>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	079b      	lsls	r3, r3, #30
 8006530:	f100 8105 	bmi.w	800673e <_printf_float+0x462>
 8006534:	68e0      	ldr	r0, [r4, #12]
 8006536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006538:	4298      	cmp	r0, r3
 800653a:	bfb8      	it	lt
 800653c:	4618      	movlt	r0, r3
 800653e:	e730      	b.n	80063a2 <_printf_float+0xc6>
 8006540:	2301      	movs	r3, #1
 8006542:	464a      	mov	r2, r9
 8006544:	4631      	mov	r1, r6
 8006546:	4628      	mov	r0, r5
 8006548:	47b8      	blx	r7
 800654a:	3001      	adds	r0, #1
 800654c:	f43f af27 	beq.w	800639e <_printf_float+0xc2>
 8006550:	f108 0801 	add.w	r8, r8, #1
 8006554:	e7e6      	b.n	8006524 <_printf_float+0x248>
 8006556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006558:	2b00      	cmp	r3, #0
 800655a:	dc39      	bgt.n	80065d0 <_printf_float+0x2f4>
 800655c:	4a1b      	ldr	r2, [pc, #108]	; (80065cc <_printf_float+0x2f0>)
 800655e:	2301      	movs	r3, #1
 8006560:	4631      	mov	r1, r6
 8006562:	4628      	mov	r0, r5
 8006564:	47b8      	blx	r7
 8006566:	3001      	adds	r0, #1
 8006568:	f43f af19 	beq.w	800639e <_printf_float+0xc2>
 800656c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006570:	4313      	orrs	r3, r2
 8006572:	d102      	bne.n	800657a <_printf_float+0x29e>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	07d9      	lsls	r1, r3, #31
 8006578:	d5d8      	bpl.n	800652c <_printf_float+0x250>
 800657a:	ee18 3a10 	vmov	r3, s16
 800657e:	4652      	mov	r2, sl
 8006580:	4631      	mov	r1, r6
 8006582:	4628      	mov	r0, r5
 8006584:	47b8      	blx	r7
 8006586:	3001      	adds	r0, #1
 8006588:	f43f af09 	beq.w	800639e <_printf_float+0xc2>
 800658c:	f04f 0900 	mov.w	r9, #0
 8006590:	f104 0a1a 	add.w	sl, r4, #26
 8006594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006596:	425b      	negs	r3, r3
 8006598:	454b      	cmp	r3, r9
 800659a:	dc01      	bgt.n	80065a0 <_printf_float+0x2c4>
 800659c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800659e:	e792      	b.n	80064c6 <_printf_float+0x1ea>
 80065a0:	2301      	movs	r3, #1
 80065a2:	4652      	mov	r2, sl
 80065a4:	4631      	mov	r1, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	47b8      	blx	r7
 80065aa:	3001      	adds	r0, #1
 80065ac:	f43f aef7 	beq.w	800639e <_printf_float+0xc2>
 80065b0:	f109 0901 	add.w	r9, r9, #1
 80065b4:	e7ee      	b.n	8006594 <_printf_float+0x2b8>
 80065b6:	bf00      	nop
 80065b8:	7fefffff 	.word	0x7fefffff
 80065bc:	08008bec 	.word	0x08008bec
 80065c0:	08008bf0 	.word	0x08008bf0
 80065c4:	08008bf8 	.word	0x08008bf8
 80065c8:	08008bf4 	.word	0x08008bf4
 80065cc:	08008bfc 	.word	0x08008bfc
 80065d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065d4:	429a      	cmp	r2, r3
 80065d6:	bfa8      	it	ge
 80065d8:	461a      	movge	r2, r3
 80065da:	2a00      	cmp	r2, #0
 80065dc:	4691      	mov	r9, r2
 80065de:	dc37      	bgt.n	8006650 <_printf_float+0x374>
 80065e0:	f04f 0b00 	mov.w	fp, #0
 80065e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065e8:	f104 021a 	add.w	r2, r4, #26
 80065ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065ee:	9305      	str	r3, [sp, #20]
 80065f0:	eba3 0309 	sub.w	r3, r3, r9
 80065f4:	455b      	cmp	r3, fp
 80065f6:	dc33      	bgt.n	8006660 <_printf_float+0x384>
 80065f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065fc:	429a      	cmp	r2, r3
 80065fe:	db3b      	blt.n	8006678 <_printf_float+0x39c>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	07da      	lsls	r2, r3, #31
 8006604:	d438      	bmi.n	8006678 <_printf_float+0x39c>
 8006606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006608:	9b05      	ldr	r3, [sp, #20]
 800660a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	eba2 0901 	sub.w	r9, r2, r1
 8006612:	4599      	cmp	r9, r3
 8006614:	bfa8      	it	ge
 8006616:	4699      	movge	r9, r3
 8006618:	f1b9 0f00 	cmp.w	r9, #0
 800661c:	dc35      	bgt.n	800668a <_printf_float+0x3ae>
 800661e:	f04f 0800 	mov.w	r8, #0
 8006622:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006626:	f104 0a1a 	add.w	sl, r4, #26
 800662a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800662e:	1a9b      	subs	r3, r3, r2
 8006630:	eba3 0309 	sub.w	r3, r3, r9
 8006634:	4543      	cmp	r3, r8
 8006636:	f77f af79 	ble.w	800652c <_printf_float+0x250>
 800663a:	2301      	movs	r3, #1
 800663c:	4652      	mov	r2, sl
 800663e:	4631      	mov	r1, r6
 8006640:	4628      	mov	r0, r5
 8006642:	47b8      	blx	r7
 8006644:	3001      	adds	r0, #1
 8006646:	f43f aeaa 	beq.w	800639e <_printf_float+0xc2>
 800664a:	f108 0801 	add.w	r8, r8, #1
 800664e:	e7ec      	b.n	800662a <_printf_float+0x34e>
 8006650:	4613      	mov	r3, r2
 8006652:	4631      	mov	r1, r6
 8006654:	4642      	mov	r2, r8
 8006656:	4628      	mov	r0, r5
 8006658:	47b8      	blx	r7
 800665a:	3001      	adds	r0, #1
 800665c:	d1c0      	bne.n	80065e0 <_printf_float+0x304>
 800665e:	e69e      	b.n	800639e <_printf_float+0xc2>
 8006660:	2301      	movs	r3, #1
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	9205      	str	r2, [sp, #20]
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	f43f ae97 	beq.w	800639e <_printf_float+0xc2>
 8006670:	9a05      	ldr	r2, [sp, #20]
 8006672:	f10b 0b01 	add.w	fp, fp, #1
 8006676:	e7b9      	b.n	80065ec <_printf_float+0x310>
 8006678:	ee18 3a10 	vmov	r3, s16
 800667c:	4652      	mov	r2, sl
 800667e:	4631      	mov	r1, r6
 8006680:	4628      	mov	r0, r5
 8006682:	47b8      	blx	r7
 8006684:	3001      	adds	r0, #1
 8006686:	d1be      	bne.n	8006606 <_printf_float+0x32a>
 8006688:	e689      	b.n	800639e <_printf_float+0xc2>
 800668a:	9a05      	ldr	r2, [sp, #20]
 800668c:	464b      	mov	r3, r9
 800668e:	4442      	add	r2, r8
 8006690:	4631      	mov	r1, r6
 8006692:	4628      	mov	r0, r5
 8006694:	47b8      	blx	r7
 8006696:	3001      	adds	r0, #1
 8006698:	d1c1      	bne.n	800661e <_printf_float+0x342>
 800669a:	e680      	b.n	800639e <_printf_float+0xc2>
 800669c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800669e:	2a01      	cmp	r2, #1
 80066a0:	dc01      	bgt.n	80066a6 <_printf_float+0x3ca>
 80066a2:	07db      	lsls	r3, r3, #31
 80066a4:	d538      	bpl.n	8006718 <_printf_float+0x43c>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4642      	mov	r2, r8
 80066aa:	4631      	mov	r1, r6
 80066ac:	4628      	mov	r0, r5
 80066ae:	47b8      	blx	r7
 80066b0:	3001      	adds	r0, #1
 80066b2:	f43f ae74 	beq.w	800639e <_printf_float+0xc2>
 80066b6:	ee18 3a10 	vmov	r3, s16
 80066ba:	4652      	mov	r2, sl
 80066bc:	4631      	mov	r1, r6
 80066be:	4628      	mov	r0, r5
 80066c0:	47b8      	blx	r7
 80066c2:	3001      	adds	r0, #1
 80066c4:	f43f ae6b 	beq.w	800639e <_printf_float+0xc2>
 80066c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066cc:	2200      	movs	r2, #0
 80066ce:	2300      	movs	r3, #0
 80066d0:	f7fa f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80066d4:	b9d8      	cbnz	r0, 800670e <_printf_float+0x432>
 80066d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d8:	f108 0201 	add.w	r2, r8, #1
 80066dc:	3b01      	subs	r3, #1
 80066de:	4631      	mov	r1, r6
 80066e0:	4628      	mov	r0, r5
 80066e2:	47b8      	blx	r7
 80066e4:	3001      	adds	r0, #1
 80066e6:	d10e      	bne.n	8006706 <_printf_float+0x42a>
 80066e8:	e659      	b.n	800639e <_printf_float+0xc2>
 80066ea:	2301      	movs	r3, #1
 80066ec:	4652      	mov	r2, sl
 80066ee:	4631      	mov	r1, r6
 80066f0:	4628      	mov	r0, r5
 80066f2:	47b8      	blx	r7
 80066f4:	3001      	adds	r0, #1
 80066f6:	f43f ae52 	beq.w	800639e <_printf_float+0xc2>
 80066fa:	f108 0801 	add.w	r8, r8, #1
 80066fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006700:	3b01      	subs	r3, #1
 8006702:	4543      	cmp	r3, r8
 8006704:	dcf1      	bgt.n	80066ea <_printf_float+0x40e>
 8006706:	464b      	mov	r3, r9
 8006708:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800670c:	e6dc      	b.n	80064c8 <_printf_float+0x1ec>
 800670e:	f04f 0800 	mov.w	r8, #0
 8006712:	f104 0a1a 	add.w	sl, r4, #26
 8006716:	e7f2      	b.n	80066fe <_printf_float+0x422>
 8006718:	2301      	movs	r3, #1
 800671a:	4642      	mov	r2, r8
 800671c:	e7df      	b.n	80066de <_printf_float+0x402>
 800671e:	2301      	movs	r3, #1
 8006720:	464a      	mov	r2, r9
 8006722:	4631      	mov	r1, r6
 8006724:	4628      	mov	r0, r5
 8006726:	47b8      	blx	r7
 8006728:	3001      	adds	r0, #1
 800672a:	f43f ae38 	beq.w	800639e <_printf_float+0xc2>
 800672e:	f108 0801 	add.w	r8, r8, #1
 8006732:	68e3      	ldr	r3, [r4, #12]
 8006734:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006736:	1a5b      	subs	r3, r3, r1
 8006738:	4543      	cmp	r3, r8
 800673a:	dcf0      	bgt.n	800671e <_printf_float+0x442>
 800673c:	e6fa      	b.n	8006534 <_printf_float+0x258>
 800673e:	f04f 0800 	mov.w	r8, #0
 8006742:	f104 0919 	add.w	r9, r4, #25
 8006746:	e7f4      	b.n	8006732 <_printf_float+0x456>

08006748 <_printf_common>:
 8006748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800674c:	4616      	mov	r6, r2
 800674e:	4699      	mov	r9, r3
 8006750:	688a      	ldr	r2, [r1, #8]
 8006752:	690b      	ldr	r3, [r1, #16]
 8006754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006758:	4293      	cmp	r3, r2
 800675a:	bfb8      	it	lt
 800675c:	4613      	movlt	r3, r2
 800675e:	6033      	str	r3, [r6, #0]
 8006760:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006764:	4607      	mov	r7, r0
 8006766:	460c      	mov	r4, r1
 8006768:	b10a      	cbz	r2, 800676e <_printf_common+0x26>
 800676a:	3301      	adds	r3, #1
 800676c:	6033      	str	r3, [r6, #0]
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	0699      	lsls	r1, r3, #26
 8006772:	bf42      	ittt	mi
 8006774:	6833      	ldrmi	r3, [r6, #0]
 8006776:	3302      	addmi	r3, #2
 8006778:	6033      	strmi	r3, [r6, #0]
 800677a:	6825      	ldr	r5, [r4, #0]
 800677c:	f015 0506 	ands.w	r5, r5, #6
 8006780:	d106      	bne.n	8006790 <_printf_common+0x48>
 8006782:	f104 0a19 	add.w	sl, r4, #25
 8006786:	68e3      	ldr	r3, [r4, #12]
 8006788:	6832      	ldr	r2, [r6, #0]
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	42ab      	cmp	r3, r5
 800678e:	dc26      	bgt.n	80067de <_printf_common+0x96>
 8006790:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006794:	1e13      	subs	r3, r2, #0
 8006796:	6822      	ldr	r2, [r4, #0]
 8006798:	bf18      	it	ne
 800679a:	2301      	movne	r3, #1
 800679c:	0692      	lsls	r2, r2, #26
 800679e:	d42b      	bmi.n	80067f8 <_printf_common+0xb0>
 80067a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067a4:	4649      	mov	r1, r9
 80067a6:	4638      	mov	r0, r7
 80067a8:	47c0      	blx	r8
 80067aa:	3001      	adds	r0, #1
 80067ac:	d01e      	beq.n	80067ec <_printf_common+0xa4>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	68e5      	ldr	r5, [r4, #12]
 80067b2:	6832      	ldr	r2, [r6, #0]
 80067b4:	f003 0306 	and.w	r3, r3, #6
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	bf08      	it	eq
 80067bc:	1aad      	subeq	r5, r5, r2
 80067be:	68a3      	ldr	r3, [r4, #8]
 80067c0:	6922      	ldr	r2, [r4, #16]
 80067c2:	bf0c      	ite	eq
 80067c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067c8:	2500      	movne	r5, #0
 80067ca:	4293      	cmp	r3, r2
 80067cc:	bfc4      	itt	gt
 80067ce:	1a9b      	subgt	r3, r3, r2
 80067d0:	18ed      	addgt	r5, r5, r3
 80067d2:	2600      	movs	r6, #0
 80067d4:	341a      	adds	r4, #26
 80067d6:	42b5      	cmp	r5, r6
 80067d8:	d11a      	bne.n	8006810 <_printf_common+0xc8>
 80067da:	2000      	movs	r0, #0
 80067dc:	e008      	b.n	80067f0 <_printf_common+0xa8>
 80067de:	2301      	movs	r3, #1
 80067e0:	4652      	mov	r2, sl
 80067e2:	4649      	mov	r1, r9
 80067e4:	4638      	mov	r0, r7
 80067e6:	47c0      	blx	r8
 80067e8:	3001      	adds	r0, #1
 80067ea:	d103      	bne.n	80067f4 <_printf_common+0xac>
 80067ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f4:	3501      	adds	r5, #1
 80067f6:	e7c6      	b.n	8006786 <_printf_common+0x3e>
 80067f8:	18e1      	adds	r1, r4, r3
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	2030      	movs	r0, #48	; 0x30
 80067fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006802:	4422      	add	r2, r4
 8006804:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006808:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800680c:	3302      	adds	r3, #2
 800680e:	e7c7      	b.n	80067a0 <_printf_common+0x58>
 8006810:	2301      	movs	r3, #1
 8006812:	4622      	mov	r2, r4
 8006814:	4649      	mov	r1, r9
 8006816:	4638      	mov	r0, r7
 8006818:	47c0      	blx	r8
 800681a:	3001      	adds	r0, #1
 800681c:	d0e6      	beq.n	80067ec <_printf_common+0xa4>
 800681e:	3601      	adds	r6, #1
 8006820:	e7d9      	b.n	80067d6 <_printf_common+0x8e>
	...

08006824 <_printf_i>:
 8006824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006828:	460c      	mov	r4, r1
 800682a:	4691      	mov	r9, r2
 800682c:	7e27      	ldrb	r7, [r4, #24]
 800682e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006830:	2f78      	cmp	r7, #120	; 0x78
 8006832:	4680      	mov	r8, r0
 8006834:	469a      	mov	sl, r3
 8006836:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800683a:	d807      	bhi.n	800684c <_printf_i+0x28>
 800683c:	2f62      	cmp	r7, #98	; 0x62
 800683e:	d80a      	bhi.n	8006856 <_printf_i+0x32>
 8006840:	2f00      	cmp	r7, #0
 8006842:	f000 80d8 	beq.w	80069f6 <_printf_i+0x1d2>
 8006846:	2f58      	cmp	r7, #88	; 0x58
 8006848:	f000 80a3 	beq.w	8006992 <_printf_i+0x16e>
 800684c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006854:	e03a      	b.n	80068cc <_printf_i+0xa8>
 8006856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800685a:	2b15      	cmp	r3, #21
 800685c:	d8f6      	bhi.n	800684c <_printf_i+0x28>
 800685e:	a001      	add	r0, pc, #4	; (adr r0, 8006864 <_printf_i+0x40>)
 8006860:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006864:	080068bd 	.word	0x080068bd
 8006868:	080068d1 	.word	0x080068d1
 800686c:	0800684d 	.word	0x0800684d
 8006870:	0800684d 	.word	0x0800684d
 8006874:	0800684d 	.word	0x0800684d
 8006878:	0800684d 	.word	0x0800684d
 800687c:	080068d1 	.word	0x080068d1
 8006880:	0800684d 	.word	0x0800684d
 8006884:	0800684d 	.word	0x0800684d
 8006888:	0800684d 	.word	0x0800684d
 800688c:	0800684d 	.word	0x0800684d
 8006890:	080069dd 	.word	0x080069dd
 8006894:	08006901 	.word	0x08006901
 8006898:	080069bf 	.word	0x080069bf
 800689c:	0800684d 	.word	0x0800684d
 80068a0:	0800684d 	.word	0x0800684d
 80068a4:	080069ff 	.word	0x080069ff
 80068a8:	0800684d 	.word	0x0800684d
 80068ac:	08006901 	.word	0x08006901
 80068b0:	0800684d 	.word	0x0800684d
 80068b4:	0800684d 	.word	0x0800684d
 80068b8:	080069c7 	.word	0x080069c7
 80068bc:	680b      	ldr	r3, [r1, #0]
 80068be:	1d1a      	adds	r2, r3, #4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	600a      	str	r2, [r1, #0]
 80068c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068cc:	2301      	movs	r3, #1
 80068ce:	e0a3      	b.n	8006a18 <_printf_i+0x1f4>
 80068d0:	6825      	ldr	r5, [r4, #0]
 80068d2:	6808      	ldr	r0, [r1, #0]
 80068d4:	062e      	lsls	r6, r5, #24
 80068d6:	f100 0304 	add.w	r3, r0, #4
 80068da:	d50a      	bpl.n	80068f2 <_printf_i+0xce>
 80068dc:	6805      	ldr	r5, [r0, #0]
 80068de:	600b      	str	r3, [r1, #0]
 80068e0:	2d00      	cmp	r5, #0
 80068e2:	da03      	bge.n	80068ec <_printf_i+0xc8>
 80068e4:	232d      	movs	r3, #45	; 0x2d
 80068e6:	426d      	negs	r5, r5
 80068e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ec:	485e      	ldr	r0, [pc, #376]	; (8006a68 <_printf_i+0x244>)
 80068ee:	230a      	movs	r3, #10
 80068f0:	e019      	b.n	8006926 <_printf_i+0x102>
 80068f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068f6:	6805      	ldr	r5, [r0, #0]
 80068f8:	600b      	str	r3, [r1, #0]
 80068fa:	bf18      	it	ne
 80068fc:	b22d      	sxthne	r5, r5
 80068fe:	e7ef      	b.n	80068e0 <_printf_i+0xbc>
 8006900:	680b      	ldr	r3, [r1, #0]
 8006902:	6825      	ldr	r5, [r4, #0]
 8006904:	1d18      	adds	r0, r3, #4
 8006906:	6008      	str	r0, [r1, #0]
 8006908:	0628      	lsls	r0, r5, #24
 800690a:	d501      	bpl.n	8006910 <_printf_i+0xec>
 800690c:	681d      	ldr	r5, [r3, #0]
 800690e:	e002      	b.n	8006916 <_printf_i+0xf2>
 8006910:	0669      	lsls	r1, r5, #25
 8006912:	d5fb      	bpl.n	800690c <_printf_i+0xe8>
 8006914:	881d      	ldrh	r5, [r3, #0]
 8006916:	4854      	ldr	r0, [pc, #336]	; (8006a68 <_printf_i+0x244>)
 8006918:	2f6f      	cmp	r7, #111	; 0x6f
 800691a:	bf0c      	ite	eq
 800691c:	2308      	moveq	r3, #8
 800691e:	230a      	movne	r3, #10
 8006920:	2100      	movs	r1, #0
 8006922:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006926:	6866      	ldr	r6, [r4, #4]
 8006928:	60a6      	str	r6, [r4, #8]
 800692a:	2e00      	cmp	r6, #0
 800692c:	bfa2      	ittt	ge
 800692e:	6821      	ldrge	r1, [r4, #0]
 8006930:	f021 0104 	bicge.w	r1, r1, #4
 8006934:	6021      	strge	r1, [r4, #0]
 8006936:	b90d      	cbnz	r5, 800693c <_printf_i+0x118>
 8006938:	2e00      	cmp	r6, #0
 800693a:	d04d      	beq.n	80069d8 <_printf_i+0x1b4>
 800693c:	4616      	mov	r6, r2
 800693e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006942:	fb03 5711 	mls	r7, r3, r1, r5
 8006946:	5dc7      	ldrb	r7, [r0, r7]
 8006948:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800694c:	462f      	mov	r7, r5
 800694e:	42bb      	cmp	r3, r7
 8006950:	460d      	mov	r5, r1
 8006952:	d9f4      	bls.n	800693e <_printf_i+0x11a>
 8006954:	2b08      	cmp	r3, #8
 8006956:	d10b      	bne.n	8006970 <_printf_i+0x14c>
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	07df      	lsls	r7, r3, #31
 800695c:	d508      	bpl.n	8006970 <_printf_i+0x14c>
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	6861      	ldr	r1, [r4, #4]
 8006962:	4299      	cmp	r1, r3
 8006964:	bfde      	ittt	le
 8006966:	2330      	movle	r3, #48	; 0x30
 8006968:	f806 3c01 	strble.w	r3, [r6, #-1]
 800696c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006970:	1b92      	subs	r2, r2, r6
 8006972:	6122      	str	r2, [r4, #16]
 8006974:	f8cd a000 	str.w	sl, [sp]
 8006978:	464b      	mov	r3, r9
 800697a:	aa03      	add	r2, sp, #12
 800697c:	4621      	mov	r1, r4
 800697e:	4640      	mov	r0, r8
 8006980:	f7ff fee2 	bl	8006748 <_printf_common>
 8006984:	3001      	adds	r0, #1
 8006986:	d14c      	bne.n	8006a22 <_printf_i+0x1fe>
 8006988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800698c:	b004      	add	sp, #16
 800698e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006992:	4835      	ldr	r0, [pc, #212]	; (8006a68 <_printf_i+0x244>)
 8006994:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	680e      	ldr	r6, [r1, #0]
 800699c:	061f      	lsls	r7, r3, #24
 800699e:	f856 5b04 	ldr.w	r5, [r6], #4
 80069a2:	600e      	str	r6, [r1, #0]
 80069a4:	d514      	bpl.n	80069d0 <_printf_i+0x1ac>
 80069a6:	07d9      	lsls	r1, r3, #31
 80069a8:	bf44      	itt	mi
 80069aa:	f043 0320 	orrmi.w	r3, r3, #32
 80069ae:	6023      	strmi	r3, [r4, #0]
 80069b0:	b91d      	cbnz	r5, 80069ba <_printf_i+0x196>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	f023 0320 	bic.w	r3, r3, #32
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	2310      	movs	r3, #16
 80069bc:	e7b0      	b.n	8006920 <_printf_i+0xfc>
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	f043 0320 	orr.w	r3, r3, #32
 80069c4:	6023      	str	r3, [r4, #0]
 80069c6:	2378      	movs	r3, #120	; 0x78
 80069c8:	4828      	ldr	r0, [pc, #160]	; (8006a6c <_printf_i+0x248>)
 80069ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069ce:	e7e3      	b.n	8006998 <_printf_i+0x174>
 80069d0:	065e      	lsls	r6, r3, #25
 80069d2:	bf48      	it	mi
 80069d4:	b2ad      	uxthmi	r5, r5
 80069d6:	e7e6      	b.n	80069a6 <_printf_i+0x182>
 80069d8:	4616      	mov	r6, r2
 80069da:	e7bb      	b.n	8006954 <_printf_i+0x130>
 80069dc:	680b      	ldr	r3, [r1, #0]
 80069de:	6826      	ldr	r6, [r4, #0]
 80069e0:	6960      	ldr	r0, [r4, #20]
 80069e2:	1d1d      	adds	r5, r3, #4
 80069e4:	600d      	str	r5, [r1, #0]
 80069e6:	0635      	lsls	r5, r6, #24
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	d501      	bpl.n	80069f0 <_printf_i+0x1cc>
 80069ec:	6018      	str	r0, [r3, #0]
 80069ee:	e002      	b.n	80069f6 <_printf_i+0x1d2>
 80069f0:	0671      	lsls	r1, r6, #25
 80069f2:	d5fb      	bpl.n	80069ec <_printf_i+0x1c8>
 80069f4:	8018      	strh	r0, [r3, #0]
 80069f6:	2300      	movs	r3, #0
 80069f8:	6123      	str	r3, [r4, #16]
 80069fa:	4616      	mov	r6, r2
 80069fc:	e7ba      	b.n	8006974 <_printf_i+0x150>
 80069fe:	680b      	ldr	r3, [r1, #0]
 8006a00:	1d1a      	adds	r2, r3, #4
 8006a02:	600a      	str	r2, [r1, #0]
 8006a04:	681e      	ldr	r6, [r3, #0]
 8006a06:	6862      	ldr	r2, [r4, #4]
 8006a08:	2100      	movs	r1, #0
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f7f9 fbe8 	bl	80001e0 <memchr>
 8006a10:	b108      	cbz	r0, 8006a16 <_printf_i+0x1f2>
 8006a12:	1b80      	subs	r0, r0, r6
 8006a14:	6060      	str	r0, [r4, #4]
 8006a16:	6863      	ldr	r3, [r4, #4]
 8006a18:	6123      	str	r3, [r4, #16]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a20:	e7a8      	b.n	8006974 <_printf_i+0x150>
 8006a22:	6923      	ldr	r3, [r4, #16]
 8006a24:	4632      	mov	r2, r6
 8006a26:	4649      	mov	r1, r9
 8006a28:	4640      	mov	r0, r8
 8006a2a:	47d0      	blx	sl
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d0ab      	beq.n	8006988 <_printf_i+0x164>
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	079b      	lsls	r3, r3, #30
 8006a34:	d413      	bmi.n	8006a5e <_printf_i+0x23a>
 8006a36:	68e0      	ldr	r0, [r4, #12]
 8006a38:	9b03      	ldr	r3, [sp, #12]
 8006a3a:	4298      	cmp	r0, r3
 8006a3c:	bfb8      	it	lt
 8006a3e:	4618      	movlt	r0, r3
 8006a40:	e7a4      	b.n	800698c <_printf_i+0x168>
 8006a42:	2301      	movs	r3, #1
 8006a44:	4632      	mov	r2, r6
 8006a46:	4649      	mov	r1, r9
 8006a48:	4640      	mov	r0, r8
 8006a4a:	47d0      	blx	sl
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d09b      	beq.n	8006988 <_printf_i+0x164>
 8006a50:	3501      	adds	r5, #1
 8006a52:	68e3      	ldr	r3, [r4, #12]
 8006a54:	9903      	ldr	r1, [sp, #12]
 8006a56:	1a5b      	subs	r3, r3, r1
 8006a58:	42ab      	cmp	r3, r5
 8006a5a:	dcf2      	bgt.n	8006a42 <_printf_i+0x21e>
 8006a5c:	e7eb      	b.n	8006a36 <_printf_i+0x212>
 8006a5e:	2500      	movs	r5, #0
 8006a60:	f104 0619 	add.w	r6, r4, #25
 8006a64:	e7f5      	b.n	8006a52 <_printf_i+0x22e>
 8006a66:	bf00      	nop
 8006a68:	08008bfe 	.word	0x08008bfe
 8006a6c:	08008c0f 	.word	0x08008c0f

08006a70 <iprintf>:
 8006a70:	b40f      	push	{r0, r1, r2, r3}
 8006a72:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <iprintf+0x2c>)
 8006a74:	b513      	push	{r0, r1, r4, lr}
 8006a76:	681c      	ldr	r4, [r3, #0]
 8006a78:	b124      	cbz	r4, 8006a84 <iprintf+0x14>
 8006a7a:	69a3      	ldr	r3, [r4, #24]
 8006a7c:	b913      	cbnz	r3, 8006a84 <iprintf+0x14>
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f000 fede 	bl	8007840 <__sinit>
 8006a84:	ab05      	add	r3, sp, #20
 8006a86:	9a04      	ldr	r2, [sp, #16]
 8006a88:	68a1      	ldr	r1, [r4, #8]
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f001 fbf5 	bl	800827c <_vfiprintf_r>
 8006a92:	b002      	add	sp, #8
 8006a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a98:	b004      	add	sp, #16
 8006a9a:	4770      	bx	lr
 8006a9c:	2000000c 	.word	0x2000000c

08006aa0 <quorem>:
 8006aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	6903      	ldr	r3, [r0, #16]
 8006aa6:	690c      	ldr	r4, [r1, #16]
 8006aa8:	42a3      	cmp	r3, r4
 8006aaa:	4607      	mov	r7, r0
 8006aac:	f2c0 8081 	blt.w	8006bb2 <quorem+0x112>
 8006ab0:	3c01      	subs	r4, #1
 8006ab2:	f101 0814 	add.w	r8, r1, #20
 8006ab6:	f100 0514 	add.w	r5, r0, #20
 8006aba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ac4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	429a      	cmp	r2, r3
 8006acc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ad0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ad4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ad8:	d331      	bcc.n	8006b3e <quorem+0x9e>
 8006ada:	f04f 0e00 	mov.w	lr, #0
 8006ade:	4640      	mov	r0, r8
 8006ae0:	46ac      	mov	ip, r5
 8006ae2:	46f2      	mov	sl, lr
 8006ae4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ae8:	b293      	uxth	r3, r2
 8006aea:	fb06 e303 	mla	r3, r6, r3, lr
 8006aee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	ebaa 0303 	sub.w	r3, sl, r3
 8006af8:	0c12      	lsrs	r2, r2, #16
 8006afa:	f8dc a000 	ldr.w	sl, [ip]
 8006afe:	fb06 e202 	mla	r2, r6, r2, lr
 8006b02:	fa13 f38a 	uxtah	r3, r3, sl
 8006b06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b0a:	fa1f fa82 	uxth.w	sl, r2
 8006b0e:	f8dc 2000 	ldr.w	r2, [ip]
 8006b12:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006b16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b20:	4581      	cmp	r9, r0
 8006b22:	f84c 3b04 	str.w	r3, [ip], #4
 8006b26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b2a:	d2db      	bcs.n	8006ae4 <quorem+0x44>
 8006b2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b30:	b92b      	cbnz	r3, 8006b3e <quorem+0x9e>
 8006b32:	9b01      	ldr	r3, [sp, #4]
 8006b34:	3b04      	subs	r3, #4
 8006b36:	429d      	cmp	r5, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	d32e      	bcc.n	8006b9a <quorem+0xfa>
 8006b3c:	613c      	str	r4, [r7, #16]
 8006b3e:	4638      	mov	r0, r7
 8006b40:	f001 f9b8 	bl	8007eb4 <__mcmp>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	db24      	blt.n	8006b92 <quorem+0xf2>
 8006b48:	3601      	adds	r6, #1
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f04f 0c00 	mov.w	ip, #0
 8006b50:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b54:	f8d0 e000 	ldr.w	lr, [r0]
 8006b58:	b293      	uxth	r3, r2
 8006b5a:	ebac 0303 	sub.w	r3, ip, r3
 8006b5e:	0c12      	lsrs	r2, r2, #16
 8006b60:	fa13 f38e 	uxtah	r3, r3, lr
 8006b64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b72:	45c1      	cmp	r9, r8
 8006b74:	f840 3b04 	str.w	r3, [r0], #4
 8006b78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b7c:	d2e8      	bcs.n	8006b50 <quorem+0xb0>
 8006b7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b86:	b922      	cbnz	r2, 8006b92 <quorem+0xf2>
 8006b88:	3b04      	subs	r3, #4
 8006b8a:	429d      	cmp	r5, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	d30a      	bcc.n	8006ba6 <quorem+0x106>
 8006b90:	613c      	str	r4, [r7, #16]
 8006b92:	4630      	mov	r0, r6
 8006b94:	b003      	add	sp, #12
 8006b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	3b04      	subs	r3, #4
 8006b9e:	2a00      	cmp	r2, #0
 8006ba0:	d1cc      	bne.n	8006b3c <quorem+0x9c>
 8006ba2:	3c01      	subs	r4, #1
 8006ba4:	e7c7      	b.n	8006b36 <quorem+0x96>
 8006ba6:	6812      	ldr	r2, [r2, #0]
 8006ba8:	3b04      	subs	r3, #4
 8006baa:	2a00      	cmp	r2, #0
 8006bac:	d1f0      	bne.n	8006b90 <quorem+0xf0>
 8006bae:	3c01      	subs	r4, #1
 8006bb0:	e7eb      	b.n	8006b8a <quorem+0xea>
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	e7ee      	b.n	8006b94 <quorem+0xf4>
	...

08006bb8 <_dtoa_r>:
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	ed2d 8b02 	vpush	{d8}
 8006bc0:	ec57 6b10 	vmov	r6, r7, d0
 8006bc4:	b095      	sub	sp, #84	; 0x54
 8006bc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006bc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006bcc:	9105      	str	r1, [sp, #20]
 8006bce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8006bd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bd8:	b975      	cbnz	r5, 8006bf8 <_dtoa_r+0x40>
 8006bda:	2010      	movs	r0, #16
 8006bdc:	f000 fed6 	bl	800798c <malloc>
 8006be0:	4602      	mov	r2, r0
 8006be2:	6260      	str	r0, [r4, #36]	; 0x24
 8006be4:	b920      	cbnz	r0, 8006bf0 <_dtoa_r+0x38>
 8006be6:	4bb2      	ldr	r3, [pc, #712]	; (8006eb0 <_dtoa_r+0x2f8>)
 8006be8:	21ea      	movs	r1, #234	; 0xea
 8006bea:	48b2      	ldr	r0, [pc, #712]	; (8006eb4 <_dtoa_r+0x2fc>)
 8006bec:	f001 fd9c 	bl	8008728 <__assert_func>
 8006bf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bf4:	6005      	str	r5, [r0, #0]
 8006bf6:	60c5      	str	r5, [r0, #12]
 8006bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bfa:	6819      	ldr	r1, [r3, #0]
 8006bfc:	b151      	cbz	r1, 8006c14 <_dtoa_r+0x5c>
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	604a      	str	r2, [r1, #4]
 8006c02:	2301      	movs	r3, #1
 8006c04:	4093      	lsls	r3, r2
 8006c06:	608b      	str	r3, [r1, #8]
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f000 ff15 	bl	8007a38 <_Bfree>
 8006c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	1e3b      	subs	r3, r7, #0
 8006c16:	bfb9      	ittee	lt
 8006c18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c1c:	9303      	strlt	r3, [sp, #12]
 8006c1e:	2300      	movge	r3, #0
 8006c20:	f8c8 3000 	strge.w	r3, [r8]
 8006c24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006c28:	4ba3      	ldr	r3, [pc, #652]	; (8006eb8 <_dtoa_r+0x300>)
 8006c2a:	bfbc      	itt	lt
 8006c2c:	2201      	movlt	r2, #1
 8006c2e:	f8c8 2000 	strlt.w	r2, [r8]
 8006c32:	ea33 0309 	bics.w	r3, r3, r9
 8006c36:	d11b      	bne.n	8006c70 <_dtoa_r+0xb8>
 8006c38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c44:	4333      	orrs	r3, r6
 8006c46:	f000 857a 	beq.w	800773e <_dtoa_r+0xb86>
 8006c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c4c:	b963      	cbnz	r3, 8006c68 <_dtoa_r+0xb0>
 8006c4e:	4b9b      	ldr	r3, [pc, #620]	; (8006ebc <_dtoa_r+0x304>)
 8006c50:	e024      	b.n	8006c9c <_dtoa_r+0xe4>
 8006c52:	4b9b      	ldr	r3, [pc, #620]	; (8006ec0 <_dtoa_r+0x308>)
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	3308      	adds	r3, #8
 8006c58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	9800      	ldr	r0, [sp, #0]
 8006c5e:	b015      	add	sp, #84	; 0x54
 8006c60:	ecbd 8b02 	vpop	{d8}
 8006c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c68:	4b94      	ldr	r3, [pc, #592]	; (8006ebc <_dtoa_r+0x304>)
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	3303      	adds	r3, #3
 8006c6e:	e7f3      	b.n	8006c58 <_dtoa_r+0xa0>
 8006c70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	ec51 0b17 	vmov	r0, r1, d7
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006c80:	f7f9 ff22 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c84:	4680      	mov	r8, r0
 8006c86:	b158      	cbz	r0, 8006ca0 <_dtoa_r+0xe8>
 8006c88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 8551 	beq.w	8007738 <_dtoa_r+0xb80>
 8006c96:	488b      	ldr	r0, [pc, #556]	; (8006ec4 <_dtoa_r+0x30c>)
 8006c98:	6018      	str	r0, [r3, #0]
 8006c9a:	1e43      	subs	r3, r0, #1
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	e7dd      	b.n	8006c5c <_dtoa_r+0xa4>
 8006ca0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006ca4:	aa12      	add	r2, sp, #72	; 0x48
 8006ca6:	a913      	add	r1, sp, #76	; 0x4c
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f001 f9a7 	bl	8007ffc <__d2b>
 8006cae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006cb2:	4683      	mov	fp, r0
 8006cb4:	2d00      	cmp	r5, #0
 8006cb6:	d07c      	beq.n	8006db2 <_dtoa_r+0x1fa>
 8006cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cc2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006cc6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006cca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006cce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006cd2:	4b7d      	ldr	r3, [pc, #500]	; (8006ec8 <_dtoa_r+0x310>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	4639      	mov	r1, r7
 8006cda:	f7f9 fad5 	bl	8000288 <__aeabi_dsub>
 8006cde:	a36e      	add	r3, pc, #440	; (adr r3, 8006e98 <_dtoa_r+0x2e0>)
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	f7f9 fc88 	bl	80005f8 <__aeabi_dmul>
 8006ce8:	a36d      	add	r3, pc, #436	; (adr r3, 8006ea0 <_dtoa_r+0x2e8>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 facd 	bl	800028c <__adddf3>
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	460f      	mov	r7, r1
 8006cf8:	f7f9 fc14 	bl	8000524 <__aeabi_i2d>
 8006cfc:	a36a      	add	r3, pc, #424	; (adr r3, 8006ea8 <_dtoa_r+0x2f0>)
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	f7f9 fc79 	bl	80005f8 <__aeabi_dmul>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	f7f9 fabd 	bl	800028c <__adddf3>
 8006d12:	4606      	mov	r6, r0
 8006d14:	460f      	mov	r7, r1
 8006d16:	f7f9 ff1f 	bl	8000b58 <__aeabi_d2iz>
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	4682      	mov	sl, r0
 8006d1e:	2300      	movs	r3, #0
 8006d20:	4630      	mov	r0, r6
 8006d22:	4639      	mov	r1, r7
 8006d24:	f7f9 feda 	bl	8000adc <__aeabi_dcmplt>
 8006d28:	b148      	cbz	r0, 8006d3e <_dtoa_r+0x186>
 8006d2a:	4650      	mov	r0, sl
 8006d2c:	f7f9 fbfa 	bl	8000524 <__aeabi_i2d>
 8006d30:	4632      	mov	r2, r6
 8006d32:	463b      	mov	r3, r7
 8006d34:	f7f9 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d38:	b908      	cbnz	r0, 8006d3e <_dtoa_r+0x186>
 8006d3a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006d3e:	f1ba 0f16 	cmp.w	sl, #22
 8006d42:	d854      	bhi.n	8006dee <_dtoa_r+0x236>
 8006d44:	4b61      	ldr	r3, [pc, #388]	; (8006ecc <_dtoa_r+0x314>)
 8006d46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d52:	f7f9 fec3 	bl	8000adc <__aeabi_dcmplt>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d04b      	beq.n	8006df2 <_dtoa_r+0x23a>
 8006d5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006d5e:	2300      	movs	r3, #0
 8006d60:	930e      	str	r3, [sp, #56]	; 0x38
 8006d62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d64:	1b5d      	subs	r5, r3, r5
 8006d66:	1e6b      	subs	r3, r5, #1
 8006d68:	9304      	str	r3, [sp, #16]
 8006d6a:	bf43      	ittte	mi
 8006d6c:	2300      	movmi	r3, #0
 8006d6e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006d72:	9304      	strmi	r3, [sp, #16]
 8006d74:	f04f 0800 	movpl.w	r8, #0
 8006d78:	f1ba 0f00 	cmp.w	sl, #0
 8006d7c:	db3b      	blt.n	8006df6 <_dtoa_r+0x23e>
 8006d7e:	9b04      	ldr	r3, [sp, #16]
 8006d80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006d84:	4453      	add	r3, sl
 8006d86:	9304      	str	r3, [sp, #16]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	9306      	str	r3, [sp, #24]
 8006d8c:	9b05      	ldr	r3, [sp, #20]
 8006d8e:	2b09      	cmp	r3, #9
 8006d90:	d869      	bhi.n	8006e66 <_dtoa_r+0x2ae>
 8006d92:	2b05      	cmp	r3, #5
 8006d94:	bfc4      	itt	gt
 8006d96:	3b04      	subgt	r3, #4
 8006d98:	9305      	strgt	r3, [sp, #20]
 8006d9a:	9b05      	ldr	r3, [sp, #20]
 8006d9c:	f1a3 0302 	sub.w	r3, r3, #2
 8006da0:	bfcc      	ite	gt
 8006da2:	2500      	movgt	r5, #0
 8006da4:	2501      	movle	r5, #1
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d869      	bhi.n	8006e7e <_dtoa_r+0x2c6>
 8006daa:	e8df f003 	tbb	[pc, r3]
 8006dae:	4e2c      	.short	0x4e2c
 8006db0:	5a4c      	.short	0x5a4c
 8006db2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006db6:	441d      	add	r5, r3
 8006db8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	bfc1      	itttt	gt
 8006dc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006dc4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006dc8:	fa09 f303 	lslgt.w	r3, r9, r3
 8006dcc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006dd0:	bfda      	itte	le
 8006dd2:	f1c3 0320 	rsble	r3, r3, #32
 8006dd6:	fa06 f003 	lslle.w	r0, r6, r3
 8006dda:	4318      	orrgt	r0, r3
 8006ddc:	f7f9 fb92 	bl	8000504 <__aeabi_ui2d>
 8006de0:	2301      	movs	r3, #1
 8006de2:	4606      	mov	r6, r0
 8006de4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006de8:	3d01      	subs	r5, #1
 8006dea:	9310      	str	r3, [sp, #64]	; 0x40
 8006dec:	e771      	b.n	8006cd2 <_dtoa_r+0x11a>
 8006dee:	2301      	movs	r3, #1
 8006df0:	e7b6      	b.n	8006d60 <_dtoa_r+0x1a8>
 8006df2:	900e      	str	r0, [sp, #56]	; 0x38
 8006df4:	e7b5      	b.n	8006d62 <_dtoa_r+0x1aa>
 8006df6:	f1ca 0300 	rsb	r3, sl, #0
 8006dfa:	9306      	str	r3, [sp, #24]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	eba8 080a 	sub.w	r8, r8, sl
 8006e02:	930d      	str	r3, [sp, #52]	; 0x34
 8006e04:	e7c2      	b.n	8006d8c <_dtoa_r+0x1d4>
 8006e06:	2300      	movs	r3, #0
 8006e08:	9308      	str	r3, [sp, #32]
 8006e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	dc39      	bgt.n	8006e84 <_dtoa_r+0x2cc>
 8006e10:	f04f 0901 	mov.w	r9, #1
 8006e14:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e18:	464b      	mov	r3, r9
 8006e1a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006e1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e20:	2200      	movs	r2, #0
 8006e22:	6042      	str	r2, [r0, #4]
 8006e24:	2204      	movs	r2, #4
 8006e26:	f102 0614 	add.w	r6, r2, #20
 8006e2a:	429e      	cmp	r6, r3
 8006e2c:	6841      	ldr	r1, [r0, #4]
 8006e2e:	d92f      	bls.n	8006e90 <_dtoa_r+0x2d8>
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 fdc1 	bl	80079b8 <_Balloc>
 8006e36:	9000      	str	r0, [sp, #0]
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d14b      	bne.n	8006ed4 <_dtoa_r+0x31c>
 8006e3c:	4b24      	ldr	r3, [pc, #144]	; (8006ed0 <_dtoa_r+0x318>)
 8006e3e:	4602      	mov	r2, r0
 8006e40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e44:	e6d1      	b.n	8006bea <_dtoa_r+0x32>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e7de      	b.n	8006e08 <_dtoa_r+0x250>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	9308      	str	r3, [sp, #32]
 8006e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e50:	eb0a 0903 	add.w	r9, sl, r3
 8006e54:	f109 0301 	add.w	r3, r9, #1
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	bfb8      	it	lt
 8006e5e:	2301      	movlt	r3, #1
 8006e60:	e7dd      	b.n	8006e1e <_dtoa_r+0x266>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e7f2      	b.n	8006e4c <_dtoa_r+0x294>
 8006e66:	2501      	movs	r5, #1
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9305      	str	r3, [sp, #20]
 8006e6c:	9508      	str	r5, [sp, #32]
 8006e6e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e78:	2312      	movs	r3, #18
 8006e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8006e7c:	e7cf      	b.n	8006e1e <_dtoa_r+0x266>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	9308      	str	r3, [sp, #32]
 8006e82:	e7f4      	b.n	8006e6e <_dtoa_r+0x2b6>
 8006e84:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006e88:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	e7c6      	b.n	8006e1e <_dtoa_r+0x266>
 8006e90:	3101      	adds	r1, #1
 8006e92:	6041      	str	r1, [r0, #4]
 8006e94:	0052      	lsls	r2, r2, #1
 8006e96:	e7c6      	b.n	8006e26 <_dtoa_r+0x26e>
 8006e98:	636f4361 	.word	0x636f4361
 8006e9c:	3fd287a7 	.word	0x3fd287a7
 8006ea0:	8b60c8b3 	.word	0x8b60c8b3
 8006ea4:	3fc68a28 	.word	0x3fc68a28
 8006ea8:	509f79fb 	.word	0x509f79fb
 8006eac:	3fd34413 	.word	0x3fd34413
 8006eb0:	08008c2d 	.word	0x08008c2d
 8006eb4:	08008c44 	.word	0x08008c44
 8006eb8:	7ff00000 	.word	0x7ff00000
 8006ebc:	08008c29 	.word	0x08008c29
 8006ec0:	08008c20 	.word	0x08008c20
 8006ec4:	08008bfd 	.word	0x08008bfd
 8006ec8:	3ff80000 	.word	0x3ff80000
 8006ecc:	08008da0 	.word	0x08008da0
 8006ed0:	08008ca3 	.word	0x08008ca3
 8006ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ed6:	9a00      	ldr	r2, [sp, #0]
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	2b0e      	cmp	r3, #14
 8006ede:	f200 80ad 	bhi.w	800703c <_dtoa_r+0x484>
 8006ee2:	2d00      	cmp	r5, #0
 8006ee4:	f000 80aa 	beq.w	800703c <_dtoa_r+0x484>
 8006ee8:	f1ba 0f00 	cmp.w	sl, #0
 8006eec:	dd36      	ble.n	8006f5c <_dtoa_r+0x3a4>
 8006eee:	4ac3      	ldr	r2, [pc, #780]	; (80071fc <_dtoa_r+0x644>)
 8006ef0:	f00a 030f 	and.w	r3, sl, #15
 8006ef4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ef8:	ed93 7b00 	vldr	d7, [r3]
 8006efc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006f00:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006f04:	eeb0 8a47 	vmov.f32	s16, s14
 8006f08:	eef0 8a67 	vmov.f32	s17, s15
 8006f0c:	d016      	beq.n	8006f3c <_dtoa_r+0x384>
 8006f0e:	4bbc      	ldr	r3, [pc, #752]	; (8007200 <_dtoa_r+0x648>)
 8006f10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f18:	f7f9 fc98 	bl	800084c <__aeabi_ddiv>
 8006f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f20:	f007 070f 	and.w	r7, r7, #15
 8006f24:	2503      	movs	r5, #3
 8006f26:	4eb6      	ldr	r6, [pc, #728]	; (8007200 <_dtoa_r+0x648>)
 8006f28:	b957      	cbnz	r7, 8006f40 <_dtoa_r+0x388>
 8006f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f2e:	ec53 2b18 	vmov	r2, r3, d8
 8006f32:	f7f9 fc8b 	bl	800084c <__aeabi_ddiv>
 8006f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f3a:	e029      	b.n	8006f90 <_dtoa_r+0x3d8>
 8006f3c:	2502      	movs	r5, #2
 8006f3e:	e7f2      	b.n	8006f26 <_dtoa_r+0x36e>
 8006f40:	07f9      	lsls	r1, r7, #31
 8006f42:	d508      	bpl.n	8006f56 <_dtoa_r+0x39e>
 8006f44:	ec51 0b18 	vmov	r0, r1, d8
 8006f48:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f4c:	f7f9 fb54 	bl	80005f8 <__aeabi_dmul>
 8006f50:	ec41 0b18 	vmov	d8, r0, r1
 8006f54:	3501      	adds	r5, #1
 8006f56:	107f      	asrs	r7, r7, #1
 8006f58:	3608      	adds	r6, #8
 8006f5a:	e7e5      	b.n	8006f28 <_dtoa_r+0x370>
 8006f5c:	f000 80a6 	beq.w	80070ac <_dtoa_r+0x4f4>
 8006f60:	f1ca 0600 	rsb	r6, sl, #0
 8006f64:	4ba5      	ldr	r3, [pc, #660]	; (80071fc <_dtoa_r+0x644>)
 8006f66:	4fa6      	ldr	r7, [pc, #664]	; (8007200 <_dtoa_r+0x648>)
 8006f68:	f006 020f 	and.w	r2, r6, #15
 8006f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f78:	f7f9 fb3e 	bl	80005f8 <__aeabi_dmul>
 8006f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f80:	1136      	asrs	r6, r6, #4
 8006f82:	2300      	movs	r3, #0
 8006f84:	2502      	movs	r5, #2
 8006f86:	2e00      	cmp	r6, #0
 8006f88:	f040 8085 	bne.w	8007096 <_dtoa_r+0x4de>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1d2      	bne.n	8006f36 <_dtoa_r+0x37e>
 8006f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 808c 	beq.w	80070b0 <_dtoa_r+0x4f8>
 8006f98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f9c:	4b99      	ldr	r3, [pc, #612]	; (8007204 <_dtoa_r+0x64c>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	f7f9 fd9a 	bl	8000adc <__aeabi_dcmplt>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	f000 8081 	beq.w	80070b0 <_dtoa_r+0x4f8>
 8006fae:	9b01      	ldr	r3, [sp, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d07d      	beq.n	80070b0 <_dtoa_r+0x4f8>
 8006fb4:	f1b9 0f00 	cmp.w	r9, #0
 8006fb8:	dd3c      	ble.n	8007034 <_dtoa_r+0x47c>
 8006fba:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006fbe:	9307      	str	r3, [sp, #28]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4b91      	ldr	r3, [pc, #580]	; (8007208 <_dtoa_r+0x650>)
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	f7f9 fb16 	bl	80005f8 <__aeabi_dmul>
 8006fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fd0:	3501      	adds	r5, #1
 8006fd2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006fd6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f7f9 faa2 	bl	8000524 <__aeabi_i2d>
 8006fe0:	4632      	mov	r2, r6
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	f7f9 fb08 	bl	80005f8 <__aeabi_dmul>
 8006fe8:	4b88      	ldr	r3, [pc, #544]	; (800720c <_dtoa_r+0x654>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	f7f9 f94e 	bl	800028c <__adddf3>
 8006ff0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ff8:	9303      	str	r3, [sp, #12]
 8006ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d15c      	bne.n	80070ba <_dtoa_r+0x502>
 8007000:	4b83      	ldr	r3, [pc, #524]	; (8007210 <_dtoa_r+0x658>)
 8007002:	2200      	movs	r2, #0
 8007004:	4630      	mov	r0, r6
 8007006:	4639      	mov	r1, r7
 8007008:	f7f9 f93e 	bl	8000288 <__aeabi_dsub>
 800700c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007010:	4606      	mov	r6, r0
 8007012:	460f      	mov	r7, r1
 8007014:	f7f9 fd80 	bl	8000b18 <__aeabi_dcmpgt>
 8007018:	2800      	cmp	r0, #0
 800701a:	f040 8296 	bne.w	800754a <_dtoa_r+0x992>
 800701e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007022:	4630      	mov	r0, r6
 8007024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007028:	4639      	mov	r1, r7
 800702a:	f7f9 fd57 	bl	8000adc <__aeabi_dcmplt>
 800702e:	2800      	cmp	r0, #0
 8007030:	f040 8288 	bne.w	8007544 <_dtoa_r+0x98c>
 8007034:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007038:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800703c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800703e:	2b00      	cmp	r3, #0
 8007040:	f2c0 8158 	blt.w	80072f4 <_dtoa_r+0x73c>
 8007044:	f1ba 0f0e 	cmp.w	sl, #14
 8007048:	f300 8154 	bgt.w	80072f4 <_dtoa_r+0x73c>
 800704c:	4b6b      	ldr	r3, [pc, #428]	; (80071fc <_dtoa_r+0x644>)
 800704e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007052:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	f280 80e3 	bge.w	8007224 <_dtoa_r+0x66c>
 800705e:	9b01      	ldr	r3, [sp, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	f300 80df 	bgt.w	8007224 <_dtoa_r+0x66c>
 8007066:	f040 826d 	bne.w	8007544 <_dtoa_r+0x98c>
 800706a:	4b69      	ldr	r3, [pc, #420]	; (8007210 <_dtoa_r+0x658>)
 800706c:	2200      	movs	r2, #0
 800706e:	4640      	mov	r0, r8
 8007070:	4649      	mov	r1, r9
 8007072:	f7f9 fac1 	bl	80005f8 <__aeabi_dmul>
 8007076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800707a:	f7f9 fd43 	bl	8000b04 <__aeabi_dcmpge>
 800707e:	9e01      	ldr	r6, [sp, #4]
 8007080:	4637      	mov	r7, r6
 8007082:	2800      	cmp	r0, #0
 8007084:	f040 8243 	bne.w	800750e <_dtoa_r+0x956>
 8007088:	9d00      	ldr	r5, [sp, #0]
 800708a:	2331      	movs	r3, #49	; 0x31
 800708c:	f805 3b01 	strb.w	r3, [r5], #1
 8007090:	f10a 0a01 	add.w	sl, sl, #1
 8007094:	e23f      	b.n	8007516 <_dtoa_r+0x95e>
 8007096:	07f2      	lsls	r2, r6, #31
 8007098:	d505      	bpl.n	80070a6 <_dtoa_r+0x4ee>
 800709a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800709e:	f7f9 faab 	bl	80005f8 <__aeabi_dmul>
 80070a2:	3501      	adds	r5, #1
 80070a4:	2301      	movs	r3, #1
 80070a6:	1076      	asrs	r6, r6, #1
 80070a8:	3708      	adds	r7, #8
 80070aa:	e76c      	b.n	8006f86 <_dtoa_r+0x3ce>
 80070ac:	2502      	movs	r5, #2
 80070ae:	e76f      	b.n	8006f90 <_dtoa_r+0x3d8>
 80070b0:	9b01      	ldr	r3, [sp, #4]
 80070b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80070b6:	930c      	str	r3, [sp, #48]	; 0x30
 80070b8:	e78d      	b.n	8006fd6 <_dtoa_r+0x41e>
 80070ba:	9900      	ldr	r1, [sp, #0]
 80070bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80070be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070c0:	4b4e      	ldr	r3, [pc, #312]	; (80071fc <_dtoa_r+0x644>)
 80070c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070c6:	4401      	add	r1, r0
 80070c8:	9102      	str	r1, [sp, #8]
 80070ca:	9908      	ldr	r1, [sp, #32]
 80070cc:	eeb0 8a47 	vmov.f32	s16, s14
 80070d0:	eef0 8a67 	vmov.f32	s17, s15
 80070d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070dc:	2900      	cmp	r1, #0
 80070de:	d045      	beq.n	800716c <_dtoa_r+0x5b4>
 80070e0:	494c      	ldr	r1, [pc, #304]	; (8007214 <_dtoa_r+0x65c>)
 80070e2:	2000      	movs	r0, #0
 80070e4:	f7f9 fbb2 	bl	800084c <__aeabi_ddiv>
 80070e8:	ec53 2b18 	vmov	r2, r3, d8
 80070ec:	f7f9 f8cc 	bl	8000288 <__aeabi_dsub>
 80070f0:	9d00      	ldr	r5, [sp, #0]
 80070f2:	ec41 0b18 	vmov	d8, r0, r1
 80070f6:	4639      	mov	r1, r7
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7f9 fd2d 	bl	8000b58 <__aeabi_d2iz>
 80070fe:	900c      	str	r0, [sp, #48]	; 0x30
 8007100:	f7f9 fa10 	bl	8000524 <__aeabi_i2d>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4630      	mov	r0, r6
 800710a:	4639      	mov	r1, r7
 800710c:	f7f9 f8bc 	bl	8000288 <__aeabi_dsub>
 8007110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007112:	3330      	adds	r3, #48	; 0x30
 8007114:	f805 3b01 	strb.w	r3, [r5], #1
 8007118:	ec53 2b18 	vmov	r2, r3, d8
 800711c:	4606      	mov	r6, r0
 800711e:	460f      	mov	r7, r1
 8007120:	f7f9 fcdc 	bl	8000adc <__aeabi_dcmplt>
 8007124:	2800      	cmp	r0, #0
 8007126:	d165      	bne.n	80071f4 <_dtoa_r+0x63c>
 8007128:	4632      	mov	r2, r6
 800712a:	463b      	mov	r3, r7
 800712c:	4935      	ldr	r1, [pc, #212]	; (8007204 <_dtoa_r+0x64c>)
 800712e:	2000      	movs	r0, #0
 8007130:	f7f9 f8aa 	bl	8000288 <__aeabi_dsub>
 8007134:	ec53 2b18 	vmov	r2, r3, d8
 8007138:	f7f9 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800713c:	2800      	cmp	r0, #0
 800713e:	f040 80b9 	bne.w	80072b4 <_dtoa_r+0x6fc>
 8007142:	9b02      	ldr	r3, [sp, #8]
 8007144:	429d      	cmp	r5, r3
 8007146:	f43f af75 	beq.w	8007034 <_dtoa_r+0x47c>
 800714a:	4b2f      	ldr	r3, [pc, #188]	; (8007208 <_dtoa_r+0x650>)
 800714c:	ec51 0b18 	vmov	r0, r1, d8
 8007150:	2200      	movs	r2, #0
 8007152:	f7f9 fa51 	bl	80005f8 <__aeabi_dmul>
 8007156:	4b2c      	ldr	r3, [pc, #176]	; (8007208 <_dtoa_r+0x650>)
 8007158:	ec41 0b18 	vmov	d8, r0, r1
 800715c:	2200      	movs	r2, #0
 800715e:	4630      	mov	r0, r6
 8007160:	4639      	mov	r1, r7
 8007162:	f7f9 fa49 	bl	80005f8 <__aeabi_dmul>
 8007166:	4606      	mov	r6, r0
 8007168:	460f      	mov	r7, r1
 800716a:	e7c4      	b.n	80070f6 <_dtoa_r+0x53e>
 800716c:	ec51 0b17 	vmov	r0, r1, d7
 8007170:	f7f9 fa42 	bl	80005f8 <__aeabi_dmul>
 8007174:	9b02      	ldr	r3, [sp, #8]
 8007176:	9d00      	ldr	r5, [sp, #0]
 8007178:	930c      	str	r3, [sp, #48]	; 0x30
 800717a:	ec41 0b18 	vmov	d8, r0, r1
 800717e:	4639      	mov	r1, r7
 8007180:	4630      	mov	r0, r6
 8007182:	f7f9 fce9 	bl	8000b58 <__aeabi_d2iz>
 8007186:	9011      	str	r0, [sp, #68]	; 0x44
 8007188:	f7f9 f9cc 	bl	8000524 <__aeabi_i2d>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	4630      	mov	r0, r6
 8007192:	4639      	mov	r1, r7
 8007194:	f7f9 f878 	bl	8000288 <__aeabi_dsub>
 8007198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800719a:	3330      	adds	r3, #48	; 0x30
 800719c:	f805 3b01 	strb.w	r3, [r5], #1
 80071a0:	9b02      	ldr	r3, [sp, #8]
 80071a2:	429d      	cmp	r5, r3
 80071a4:	4606      	mov	r6, r0
 80071a6:	460f      	mov	r7, r1
 80071a8:	f04f 0200 	mov.w	r2, #0
 80071ac:	d134      	bne.n	8007218 <_dtoa_r+0x660>
 80071ae:	4b19      	ldr	r3, [pc, #100]	; (8007214 <_dtoa_r+0x65c>)
 80071b0:	ec51 0b18 	vmov	r0, r1, d8
 80071b4:	f7f9 f86a 	bl	800028c <__adddf3>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4630      	mov	r0, r6
 80071be:	4639      	mov	r1, r7
 80071c0:	f7f9 fcaa 	bl	8000b18 <__aeabi_dcmpgt>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d175      	bne.n	80072b4 <_dtoa_r+0x6fc>
 80071c8:	ec53 2b18 	vmov	r2, r3, d8
 80071cc:	4911      	ldr	r1, [pc, #68]	; (8007214 <_dtoa_r+0x65c>)
 80071ce:	2000      	movs	r0, #0
 80071d0:	f7f9 f85a 	bl	8000288 <__aeabi_dsub>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4630      	mov	r0, r6
 80071da:	4639      	mov	r1, r7
 80071dc:	f7f9 fc7e 	bl	8000adc <__aeabi_dcmplt>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f43f af27 	beq.w	8007034 <_dtoa_r+0x47c>
 80071e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071e8:	1e6b      	subs	r3, r5, #1
 80071ea:	930c      	str	r3, [sp, #48]	; 0x30
 80071ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071f0:	2b30      	cmp	r3, #48	; 0x30
 80071f2:	d0f8      	beq.n	80071e6 <_dtoa_r+0x62e>
 80071f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80071f8:	e04a      	b.n	8007290 <_dtoa_r+0x6d8>
 80071fa:	bf00      	nop
 80071fc:	08008da0 	.word	0x08008da0
 8007200:	08008d78 	.word	0x08008d78
 8007204:	3ff00000 	.word	0x3ff00000
 8007208:	40240000 	.word	0x40240000
 800720c:	401c0000 	.word	0x401c0000
 8007210:	40140000 	.word	0x40140000
 8007214:	3fe00000 	.word	0x3fe00000
 8007218:	4baf      	ldr	r3, [pc, #700]	; (80074d8 <_dtoa_r+0x920>)
 800721a:	f7f9 f9ed 	bl	80005f8 <__aeabi_dmul>
 800721e:	4606      	mov	r6, r0
 8007220:	460f      	mov	r7, r1
 8007222:	e7ac      	b.n	800717e <_dtoa_r+0x5c6>
 8007224:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007228:	9d00      	ldr	r5, [sp, #0]
 800722a:	4642      	mov	r2, r8
 800722c:	464b      	mov	r3, r9
 800722e:	4630      	mov	r0, r6
 8007230:	4639      	mov	r1, r7
 8007232:	f7f9 fb0b 	bl	800084c <__aeabi_ddiv>
 8007236:	f7f9 fc8f 	bl	8000b58 <__aeabi_d2iz>
 800723a:	9002      	str	r0, [sp, #8]
 800723c:	f7f9 f972 	bl	8000524 <__aeabi_i2d>
 8007240:	4642      	mov	r2, r8
 8007242:	464b      	mov	r3, r9
 8007244:	f7f9 f9d8 	bl	80005f8 <__aeabi_dmul>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4630      	mov	r0, r6
 800724e:	4639      	mov	r1, r7
 8007250:	f7f9 f81a 	bl	8000288 <__aeabi_dsub>
 8007254:	9e02      	ldr	r6, [sp, #8]
 8007256:	9f01      	ldr	r7, [sp, #4]
 8007258:	3630      	adds	r6, #48	; 0x30
 800725a:	f805 6b01 	strb.w	r6, [r5], #1
 800725e:	9e00      	ldr	r6, [sp, #0]
 8007260:	1bae      	subs	r6, r5, r6
 8007262:	42b7      	cmp	r7, r6
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	d137      	bne.n	80072da <_dtoa_r+0x722>
 800726a:	f7f9 f80f 	bl	800028c <__adddf3>
 800726e:	4642      	mov	r2, r8
 8007270:	464b      	mov	r3, r9
 8007272:	4606      	mov	r6, r0
 8007274:	460f      	mov	r7, r1
 8007276:	f7f9 fc4f 	bl	8000b18 <__aeabi_dcmpgt>
 800727a:	b9c8      	cbnz	r0, 80072b0 <_dtoa_r+0x6f8>
 800727c:	4642      	mov	r2, r8
 800727e:	464b      	mov	r3, r9
 8007280:	4630      	mov	r0, r6
 8007282:	4639      	mov	r1, r7
 8007284:	f7f9 fc20 	bl	8000ac8 <__aeabi_dcmpeq>
 8007288:	b110      	cbz	r0, 8007290 <_dtoa_r+0x6d8>
 800728a:	9b02      	ldr	r3, [sp, #8]
 800728c:	07d9      	lsls	r1, r3, #31
 800728e:	d40f      	bmi.n	80072b0 <_dtoa_r+0x6f8>
 8007290:	4620      	mov	r0, r4
 8007292:	4659      	mov	r1, fp
 8007294:	f000 fbd0 	bl	8007a38 <_Bfree>
 8007298:	2300      	movs	r3, #0
 800729a:	702b      	strb	r3, [r5, #0]
 800729c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800729e:	f10a 0001 	add.w	r0, sl, #1
 80072a2:	6018      	str	r0, [r3, #0]
 80072a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f43f acd8 	beq.w	8006c5c <_dtoa_r+0xa4>
 80072ac:	601d      	str	r5, [r3, #0]
 80072ae:	e4d5      	b.n	8006c5c <_dtoa_r+0xa4>
 80072b0:	f8cd a01c 	str.w	sl, [sp, #28]
 80072b4:	462b      	mov	r3, r5
 80072b6:	461d      	mov	r5, r3
 80072b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072bc:	2a39      	cmp	r2, #57	; 0x39
 80072be:	d108      	bne.n	80072d2 <_dtoa_r+0x71a>
 80072c0:	9a00      	ldr	r2, [sp, #0]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d1f7      	bne.n	80072b6 <_dtoa_r+0x6fe>
 80072c6:	9a07      	ldr	r2, [sp, #28]
 80072c8:	9900      	ldr	r1, [sp, #0]
 80072ca:	3201      	adds	r2, #1
 80072cc:	9207      	str	r2, [sp, #28]
 80072ce:	2230      	movs	r2, #48	; 0x30
 80072d0:	700a      	strb	r2, [r1, #0]
 80072d2:	781a      	ldrb	r2, [r3, #0]
 80072d4:	3201      	adds	r2, #1
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	e78c      	b.n	80071f4 <_dtoa_r+0x63c>
 80072da:	4b7f      	ldr	r3, [pc, #508]	; (80074d8 <_dtoa_r+0x920>)
 80072dc:	2200      	movs	r2, #0
 80072de:	f7f9 f98b 	bl	80005f8 <__aeabi_dmul>
 80072e2:	2200      	movs	r2, #0
 80072e4:	2300      	movs	r3, #0
 80072e6:	4606      	mov	r6, r0
 80072e8:	460f      	mov	r7, r1
 80072ea:	f7f9 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d09b      	beq.n	800722a <_dtoa_r+0x672>
 80072f2:	e7cd      	b.n	8007290 <_dtoa_r+0x6d8>
 80072f4:	9a08      	ldr	r2, [sp, #32]
 80072f6:	2a00      	cmp	r2, #0
 80072f8:	f000 80c4 	beq.w	8007484 <_dtoa_r+0x8cc>
 80072fc:	9a05      	ldr	r2, [sp, #20]
 80072fe:	2a01      	cmp	r2, #1
 8007300:	f300 80a8 	bgt.w	8007454 <_dtoa_r+0x89c>
 8007304:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007306:	2a00      	cmp	r2, #0
 8007308:	f000 80a0 	beq.w	800744c <_dtoa_r+0x894>
 800730c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007310:	9e06      	ldr	r6, [sp, #24]
 8007312:	4645      	mov	r5, r8
 8007314:	9a04      	ldr	r2, [sp, #16]
 8007316:	2101      	movs	r1, #1
 8007318:	441a      	add	r2, r3
 800731a:	4620      	mov	r0, r4
 800731c:	4498      	add	r8, r3
 800731e:	9204      	str	r2, [sp, #16]
 8007320:	f000 fc46 	bl	8007bb0 <__i2b>
 8007324:	4607      	mov	r7, r0
 8007326:	2d00      	cmp	r5, #0
 8007328:	dd0b      	ble.n	8007342 <_dtoa_r+0x78a>
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	dd08      	ble.n	8007342 <_dtoa_r+0x78a>
 8007330:	42ab      	cmp	r3, r5
 8007332:	9a04      	ldr	r2, [sp, #16]
 8007334:	bfa8      	it	ge
 8007336:	462b      	movge	r3, r5
 8007338:	eba8 0803 	sub.w	r8, r8, r3
 800733c:	1aed      	subs	r5, r5, r3
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	9304      	str	r3, [sp, #16]
 8007342:	9b06      	ldr	r3, [sp, #24]
 8007344:	b1fb      	cbz	r3, 8007386 <_dtoa_r+0x7ce>
 8007346:	9b08      	ldr	r3, [sp, #32]
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 809f 	beq.w	800748c <_dtoa_r+0x8d4>
 800734e:	2e00      	cmp	r6, #0
 8007350:	dd11      	ble.n	8007376 <_dtoa_r+0x7be>
 8007352:	4639      	mov	r1, r7
 8007354:	4632      	mov	r2, r6
 8007356:	4620      	mov	r0, r4
 8007358:	f000 fce6 	bl	8007d28 <__pow5mult>
 800735c:	465a      	mov	r2, fp
 800735e:	4601      	mov	r1, r0
 8007360:	4607      	mov	r7, r0
 8007362:	4620      	mov	r0, r4
 8007364:	f000 fc3a 	bl	8007bdc <__multiply>
 8007368:	4659      	mov	r1, fp
 800736a:	9007      	str	r0, [sp, #28]
 800736c:	4620      	mov	r0, r4
 800736e:	f000 fb63 	bl	8007a38 <_Bfree>
 8007372:	9b07      	ldr	r3, [sp, #28]
 8007374:	469b      	mov	fp, r3
 8007376:	9b06      	ldr	r3, [sp, #24]
 8007378:	1b9a      	subs	r2, r3, r6
 800737a:	d004      	beq.n	8007386 <_dtoa_r+0x7ce>
 800737c:	4659      	mov	r1, fp
 800737e:	4620      	mov	r0, r4
 8007380:	f000 fcd2 	bl	8007d28 <__pow5mult>
 8007384:	4683      	mov	fp, r0
 8007386:	2101      	movs	r1, #1
 8007388:	4620      	mov	r0, r4
 800738a:	f000 fc11 	bl	8007bb0 <__i2b>
 800738e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007390:	2b00      	cmp	r3, #0
 8007392:	4606      	mov	r6, r0
 8007394:	dd7c      	ble.n	8007490 <_dtoa_r+0x8d8>
 8007396:	461a      	mov	r2, r3
 8007398:	4601      	mov	r1, r0
 800739a:	4620      	mov	r0, r4
 800739c:	f000 fcc4 	bl	8007d28 <__pow5mult>
 80073a0:	9b05      	ldr	r3, [sp, #20]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	4606      	mov	r6, r0
 80073a6:	dd76      	ble.n	8007496 <_dtoa_r+0x8de>
 80073a8:	2300      	movs	r3, #0
 80073aa:	9306      	str	r3, [sp, #24]
 80073ac:	6933      	ldr	r3, [r6, #16]
 80073ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80073b2:	6918      	ldr	r0, [r3, #16]
 80073b4:	f000 fbac 	bl	8007b10 <__hi0bits>
 80073b8:	f1c0 0020 	rsb	r0, r0, #32
 80073bc:	9b04      	ldr	r3, [sp, #16]
 80073be:	4418      	add	r0, r3
 80073c0:	f010 001f 	ands.w	r0, r0, #31
 80073c4:	f000 8086 	beq.w	80074d4 <_dtoa_r+0x91c>
 80073c8:	f1c0 0320 	rsb	r3, r0, #32
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	dd7f      	ble.n	80074d0 <_dtoa_r+0x918>
 80073d0:	f1c0 001c 	rsb	r0, r0, #28
 80073d4:	9b04      	ldr	r3, [sp, #16]
 80073d6:	4403      	add	r3, r0
 80073d8:	4480      	add	r8, r0
 80073da:	4405      	add	r5, r0
 80073dc:	9304      	str	r3, [sp, #16]
 80073de:	f1b8 0f00 	cmp.w	r8, #0
 80073e2:	dd05      	ble.n	80073f0 <_dtoa_r+0x838>
 80073e4:	4659      	mov	r1, fp
 80073e6:	4642      	mov	r2, r8
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 fcf7 	bl	8007ddc <__lshift>
 80073ee:	4683      	mov	fp, r0
 80073f0:	9b04      	ldr	r3, [sp, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	dd05      	ble.n	8007402 <_dtoa_r+0x84a>
 80073f6:	4631      	mov	r1, r6
 80073f8:	461a      	mov	r2, r3
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 fcee 	bl	8007ddc <__lshift>
 8007400:	4606      	mov	r6, r0
 8007402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007404:	2b00      	cmp	r3, #0
 8007406:	d069      	beq.n	80074dc <_dtoa_r+0x924>
 8007408:	4631      	mov	r1, r6
 800740a:	4658      	mov	r0, fp
 800740c:	f000 fd52 	bl	8007eb4 <__mcmp>
 8007410:	2800      	cmp	r0, #0
 8007412:	da63      	bge.n	80074dc <_dtoa_r+0x924>
 8007414:	2300      	movs	r3, #0
 8007416:	4659      	mov	r1, fp
 8007418:	220a      	movs	r2, #10
 800741a:	4620      	mov	r0, r4
 800741c:	f000 fb2e 	bl	8007a7c <__multadd>
 8007420:	9b08      	ldr	r3, [sp, #32]
 8007422:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007426:	4683      	mov	fp, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 818f 	beq.w	800774c <_dtoa_r+0xb94>
 800742e:	4639      	mov	r1, r7
 8007430:	2300      	movs	r3, #0
 8007432:	220a      	movs	r2, #10
 8007434:	4620      	mov	r0, r4
 8007436:	f000 fb21 	bl	8007a7c <__multadd>
 800743a:	f1b9 0f00 	cmp.w	r9, #0
 800743e:	4607      	mov	r7, r0
 8007440:	f300 808e 	bgt.w	8007560 <_dtoa_r+0x9a8>
 8007444:	9b05      	ldr	r3, [sp, #20]
 8007446:	2b02      	cmp	r3, #2
 8007448:	dc50      	bgt.n	80074ec <_dtoa_r+0x934>
 800744a:	e089      	b.n	8007560 <_dtoa_r+0x9a8>
 800744c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800744e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007452:	e75d      	b.n	8007310 <_dtoa_r+0x758>
 8007454:	9b01      	ldr	r3, [sp, #4]
 8007456:	1e5e      	subs	r6, r3, #1
 8007458:	9b06      	ldr	r3, [sp, #24]
 800745a:	42b3      	cmp	r3, r6
 800745c:	bfbf      	itttt	lt
 800745e:	9b06      	ldrlt	r3, [sp, #24]
 8007460:	9606      	strlt	r6, [sp, #24]
 8007462:	1af2      	sublt	r2, r6, r3
 8007464:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007466:	bfb6      	itet	lt
 8007468:	189b      	addlt	r3, r3, r2
 800746a:	1b9e      	subge	r6, r3, r6
 800746c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	bfb8      	it	lt
 8007472:	2600      	movlt	r6, #0
 8007474:	2b00      	cmp	r3, #0
 8007476:	bfb5      	itete	lt
 8007478:	eba8 0503 	sublt.w	r5, r8, r3
 800747c:	9b01      	ldrge	r3, [sp, #4]
 800747e:	2300      	movlt	r3, #0
 8007480:	4645      	movge	r5, r8
 8007482:	e747      	b.n	8007314 <_dtoa_r+0x75c>
 8007484:	9e06      	ldr	r6, [sp, #24]
 8007486:	9f08      	ldr	r7, [sp, #32]
 8007488:	4645      	mov	r5, r8
 800748a:	e74c      	b.n	8007326 <_dtoa_r+0x76e>
 800748c:	9a06      	ldr	r2, [sp, #24]
 800748e:	e775      	b.n	800737c <_dtoa_r+0x7c4>
 8007490:	9b05      	ldr	r3, [sp, #20]
 8007492:	2b01      	cmp	r3, #1
 8007494:	dc18      	bgt.n	80074c8 <_dtoa_r+0x910>
 8007496:	9b02      	ldr	r3, [sp, #8]
 8007498:	b9b3      	cbnz	r3, 80074c8 <_dtoa_r+0x910>
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074a0:	b9a3      	cbnz	r3, 80074cc <_dtoa_r+0x914>
 80074a2:	9b03      	ldr	r3, [sp, #12]
 80074a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074a8:	0d1b      	lsrs	r3, r3, #20
 80074aa:	051b      	lsls	r3, r3, #20
 80074ac:	b12b      	cbz	r3, 80074ba <_dtoa_r+0x902>
 80074ae:	9b04      	ldr	r3, [sp, #16]
 80074b0:	3301      	adds	r3, #1
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	f108 0801 	add.w	r8, r8, #1
 80074b8:	2301      	movs	r3, #1
 80074ba:	9306      	str	r3, [sp, #24]
 80074bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f47f af74 	bne.w	80073ac <_dtoa_r+0x7f4>
 80074c4:	2001      	movs	r0, #1
 80074c6:	e779      	b.n	80073bc <_dtoa_r+0x804>
 80074c8:	2300      	movs	r3, #0
 80074ca:	e7f6      	b.n	80074ba <_dtoa_r+0x902>
 80074cc:	9b02      	ldr	r3, [sp, #8]
 80074ce:	e7f4      	b.n	80074ba <_dtoa_r+0x902>
 80074d0:	d085      	beq.n	80073de <_dtoa_r+0x826>
 80074d2:	4618      	mov	r0, r3
 80074d4:	301c      	adds	r0, #28
 80074d6:	e77d      	b.n	80073d4 <_dtoa_r+0x81c>
 80074d8:	40240000 	.word	0x40240000
 80074dc:	9b01      	ldr	r3, [sp, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	dc38      	bgt.n	8007554 <_dtoa_r+0x99c>
 80074e2:	9b05      	ldr	r3, [sp, #20]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	dd35      	ble.n	8007554 <_dtoa_r+0x99c>
 80074e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80074ec:	f1b9 0f00 	cmp.w	r9, #0
 80074f0:	d10d      	bne.n	800750e <_dtoa_r+0x956>
 80074f2:	4631      	mov	r1, r6
 80074f4:	464b      	mov	r3, r9
 80074f6:	2205      	movs	r2, #5
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 fabf 	bl	8007a7c <__multadd>
 80074fe:	4601      	mov	r1, r0
 8007500:	4606      	mov	r6, r0
 8007502:	4658      	mov	r0, fp
 8007504:	f000 fcd6 	bl	8007eb4 <__mcmp>
 8007508:	2800      	cmp	r0, #0
 800750a:	f73f adbd 	bgt.w	8007088 <_dtoa_r+0x4d0>
 800750e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007510:	9d00      	ldr	r5, [sp, #0]
 8007512:	ea6f 0a03 	mvn.w	sl, r3
 8007516:	f04f 0800 	mov.w	r8, #0
 800751a:	4631      	mov	r1, r6
 800751c:	4620      	mov	r0, r4
 800751e:	f000 fa8b 	bl	8007a38 <_Bfree>
 8007522:	2f00      	cmp	r7, #0
 8007524:	f43f aeb4 	beq.w	8007290 <_dtoa_r+0x6d8>
 8007528:	f1b8 0f00 	cmp.w	r8, #0
 800752c:	d005      	beq.n	800753a <_dtoa_r+0x982>
 800752e:	45b8      	cmp	r8, r7
 8007530:	d003      	beq.n	800753a <_dtoa_r+0x982>
 8007532:	4641      	mov	r1, r8
 8007534:	4620      	mov	r0, r4
 8007536:	f000 fa7f 	bl	8007a38 <_Bfree>
 800753a:	4639      	mov	r1, r7
 800753c:	4620      	mov	r0, r4
 800753e:	f000 fa7b 	bl	8007a38 <_Bfree>
 8007542:	e6a5      	b.n	8007290 <_dtoa_r+0x6d8>
 8007544:	2600      	movs	r6, #0
 8007546:	4637      	mov	r7, r6
 8007548:	e7e1      	b.n	800750e <_dtoa_r+0x956>
 800754a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800754c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007550:	4637      	mov	r7, r6
 8007552:	e599      	b.n	8007088 <_dtoa_r+0x4d0>
 8007554:	9b08      	ldr	r3, [sp, #32]
 8007556:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 80fd 	beq.w	800775a <_dtoa_r+0xba2>
 8007560:	2d00      	cmp	r5, #0
 8007562:	dd05      	ble.n	8007570 <_dtoa_r+0x9b8>
 8007564:	4639      	mov	r1, r7
 8007566:	462a      	mov	r2, r5
 8007568:	4620      	mov	r0, r4
 800756a:	f000 fc37 	bl	8007ddc <__lshift>
 800756e:	4607      	mov	r7, r0
 8007570:	9b06      	ldr	r3, [sp, #24]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d05c      	beq.n	8007630 <_dtoa_r+0xa78>
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	4620      	mov	r0, r4
 800757a:	f000 fa1d 	bl	80079b8 <_Balloc>
 800757e:	4605      	mov	r5, r0
 8007580:	b928      	cbnz	r0, 800758e <_dtoa_r+0x9d6>
 8007582:	4b80      	ldr	r3, [pc, #512]	; (8007784 <_dtoa_r+0xbcc>)
 8007584:	4602      	mov	r2, r0
 8007586:	f240 21ea 	movw	r1, #746	; 0x2ea
 800758a:	f7ff bb2e 	b.w	8006bea <_dtoa_r+0x32>
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	3202      	adds	r2, #2
 8007592:	0092      	lsls	r2, r2, #2
 8007594:	f107 010c 	add.w	r1, r7, #12
 8007598:	300c      	adds	r0, #12
 800759a:	f000 f9ff 	bl	800799c <memcpy>
 800759e:	2201      	movs	r2, #1
 80075a0:	4629      	mov	r1, r5
 80075a2:	4620      	mov	r0, r4
 80075a4:	f000 fc1a 	bl	8007ddc <__lshift>
 80075a8:	9b00      	ldr	r3, [sp, #0]
 80075aa:	3301      	adds	r3, #1
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	9b00      	ldr	r3, [sp, #0]
 80075b0:	444b      	add	r3, r9
 80075b2:	9307      	str	r3, [sp, #28]
 80075b4:	9b02      	ldr	r3, [sp, #8]
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	46b8      	mov	r8, r7
 80075bc:	9306      	str	r3, [sp, #24]
 80075be:	4607      	mov	r7, r0
 80075c0:	9b01      	ldr	r3, [sp, #4]
 80075c2:	4631      	mov	r1, r6
 80075c4:	3b01      	subs	r3, #1
 80075c6:	4658      	mov	r0, fp
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	f7ff fa69 	bl	8006aa0 <quorem>
 80075ce:	4603      	mov	r3, r0
 80075d0:	3330      	adds	r3, #48	; 0x30
 80075d2:	9004      	str	r0, [sp, #16]
 80075d4:	4641      	mov	r1, r8
 80075d6:	4658      	mov	r0, fp
 80075d8:	9308      	str	r3, [sp, #32]
 80075da:	f000 fc6b 	bl	8007eb4 <__mcmp>
 80075de:	463a      	mov	r2, r7
 80075e0:	4681      	mov	r9, r0
 80075e2:	4631      	mov	r1, r6
 80075e4:	4620      	mov	r0, r4
 80075e6:	f000 fc81 	bl	8007eec <__mdiff>
 80075ea:	68c2      	ldr	r2, [r0, #12]
 80075ec:	9b08      	ldr	r3, [sp, #32]
 80075ee:	4605      	mov	r5, r0
 80075f0:	bb02      	cbnz	r2, 8007634 <_dtoa_r+0xa7c>
 80075f2:	4601      	mov	r1, r0
 80075f4:	4658      	mov	r0, fp
 80075f6:	f000 fc5d 	bl	8007eb4 <__mcmp>
 80075fa:	9b08      	ldr	r3, [sp, #32]
 80075fc:	4602      	mov	r2, r0
 80075fe:	4629      	mov	r1, r5
 8007600:	4620      	mov	r0, r4
 8007602:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007606:	f000 fa17 	bl	8007a38 <_Bfree>
 800760a:	9b05      	ldr	r3, [sp, #20]
 800760c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800760e:	9d01      	ldr	r5, [sp, #4]
 8007610:	ea43 0102 	orr.w	r1, r3, r2
 8007614:	9b06      	ldr	r3, [sp, #24]
 8007616:	430b      	orrs	r3, r1
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	d10d      	bne.n	8007638 <_dtoa_r+0xa80>
 800761c:	2b39      	cmp	r3, #57	; 0x39
 800761e:	d029      	beq.n	8007674 <_dtoa_r+0xabc>
 8007620:	f1b9 0f00 	cmp.w	r9, #0
 8007624:	dd01      	ble.n	800762a <_dtoa_r+0xa72>
 8007626:	9b04      	ldr	r3, [sp, #16]
 8007628:	3331      	adds	r3, #49	; 0x31
 800762a:	9a02      	ldr	r2, [sp, #8]
 800762c:	7013      	strb	r3, [r2, #0]
 800762e:	e774      	b.n	800751a <_dtoa_r+0x962>
 8007630:	4638      	mov	r0, r7
 8007632:	e7b9      	b.n	80075a8 <_dtoa_r+0x9f0>
 8007634:	2201      	movs	r2, #1
 8007636:	e7e2      	b.n	80075fe <_dtoa_r+0xa46>
 8007638:	f1b9 0f00 	cmp.w	r9, #0
 800763c:	db06      	blt.n	800764c <_dtoa_r+0xa94>
 800763e:	9905      	ldr	r1, [sp, #20]
 8007640:	ea41 0909 	orr.w	r9, r1, r9
 8007644:	9906      	ldr	r1, [sp, #24]
 8007646:	ea59 0101 	orrs.w	r1, r9, r1
 800764a:	d120      	bne.n	800768e <_dtoa_r+0xad6>
 800764c:	2a00      	cmp	r2, #0
 800764e:	ddec      	ble.n	800762a <_dtoa_r+0xa72>
 8007650:	4659      	mov	r1, fp
 8007652:	2201      	movs	r2, #1
 8007654:	4620      	mov	r0, r4
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	f000 fbc0 	bl	8007ddc <__lshift>
 800765c:	4631      	mov	r1, r6
 800765e:	4683      	mov	fp, r0
 8007660:	f000 fc28 	bl	8007eb4 <__mcmp>
 8007664:	2800      	cmp	r0, #0
 8007666:	9b01      	ldr	r3, [sp, #4]
 8007668:	dc02      	bgt.n	8007670 <_dtoa_r+0xab8>
 800766a:	d1de      	bne.n	800762a <_dtoa_r+0xa72>
 800766c:	07da      	lsls	r2, r3, #31
 800766e:	d5dc      	bpl.n	800762a <_dtoa_r+0xa72>
 8007670:	2b39      	cmp	r3, #57	; 0x39
 8007672:	d1d8      	bne.n	8007626 <_dtoa_r+0xa6e>
 8007674:	9a02      	ldr	r2, [sp, #8]
 8007676:	2339      	movs	r3, #57	; 0x39
 8007678:	7013      	strb	r3, [r2, #0]
 800767a:	462b      	mov	r3, r5
 800767c:	461d      	mov	r5, r3
 800767e:	3b01      	subs	r3, #1
 8007680:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007684:	2a39      	cmp	r2, #57	; 0x39
 8007686:	d050      	beq.n	800772a <_dtoa_r+0xb72>
 8007688:	3201      	adds	r2, #1
 800768a:	701a      	strb	r2, [r3, #0]
 800768c:	e745      	b.n	800751a <_dtoa_r+0x962>
 800768e:	2a00      	cmp	r2, #0
 8007690:	dd03      	ble.n	800769a <_dtoa_r+0xae2>
 8007692:	2b39      	cmp	r3, #57	; 0x39
 8007694:	d0ee      	beq.n	8007674 <_dtoa_r+0xabc>
 8007696:	3301      	adds	r3, #1
 8007698:	e7c7      	b.n	800762a <_dtoa_r+0xa72>
 800769a:	9a01      	ldr	r2, [sp, #4]
 800769c:	9907      	ldr	r1, [sp, #28]
 800769e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80076a2:	428a      	cmp	r2, r1
 80076a4:	d02a      	beq.n	80076fc <_dtoa_r+0xb44>
 80076a6:	4659      	mov	r1, fp
 80076a8:	2300      	movs	r3, #0
 80076aa:	220a      	movs	r2, #10
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 f9e5 	bl	8007a7c <__multadd>
 80076b2:	45b8      	cmp	r8, r7
 80076b4:	4683      	mov	fp, r0
 80076b6:	f04f 0300 	mov.w	r3, #0
 80076ba:	f04f 020a 	mov.w	r2, #10
 80076be:	4641      	mov	r1, r8
 80076c0:	4620      	mov	r0, r4
 80076c2:	d107      	bne.n	80076d4 <_dtoa_r+0xb1c>
 80076c4:	f000 f9da 	bl	8007a7c <__multadd>
 80076c8:	4680      	mov	r8, r0
 80076ca:	4607      	mov	r7, r0
 80076cc:	9b01      	ldr	r3, [sp, #4]
 80076ce:	3301      	adds	r3, #1
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	e775      	b.n	80075c0 <_dtoa_r+0xa08>
 80076d4:	f000 f9d2 	bl	8007a7c <__multadd>
 80076d8:	4639      	mov	r1, r7
 80076da:	4680      	mov	r8, r0
 80076dc:	2300      	movs	r3, #0
 80076de:	220a      	movs	r2, #10
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 f9cb 	bl	8007a7c <__multadd>
 80076e6:	4607      	mov	r7, r0
 80076e8:	e7f0      	b.n	80076cc <_dtoa_r+0xb14>
 80076ea:	f1b9 0f00 	cmp.w	r9, #0
 80076ee:	9a00      	ldr	r2, [sp, #0]
 80076f0:	bfcc      	ite	gt
 80076f2:	464d      	movgt	r5, r9
 80076f4:	2501      	movle	r5, #1
 80076f6:	4415      	add	r5, r2
 80076f8:	f04f 0800 	mov.w	r8, #0
 80076fc:	4659      	mov	r1, fp
 80076fe:	2201      	movs	r2, #1
 8007700:	4620      	mov	r0, r4
 8007702:	9301      	str	r3, [sp, #4]
 8007704:	f000 fb6a 	bl	8007ddc <__lshift>
 8007708:	4631      	mov	r1, r6
 800770a:	4683      	mov	fp, r0
 800770c:	f000 fbd2 	bl	8007eb4 <__mcmp>
 8007710:	2800      	cmp	r0, #0
 8007712:	dcb2      	bgt.n	800767a <_dtoa_r+0xac2>
 8007714:	d102      	bne.n	800771c <_dtoa_r+0xb64>
 8007716:	9b01      	ldr	r3, [sp, #4]
 8007718:	07db      	lsls	r3, r3, #31
 800771a:	d4ae      	bmi.n	800767a <_dtoa_r+0xac2>
 800771c:	462b      	mov	r3, r5
 800771e:	461d      	mov	r5, r3
 8007720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007724:	2a30      	cmp	r2, #48	; 0x30
 8007726:	d0fa      	beq.n	800771e <_dtoa_r+0xb66>
 8007728:	e6f7      	b.n	800751a <_dtoa_r+0x962>
 800772a:	9a00      	ldr	r2, [sp, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d1a5      	bne.n	800767c <_dtoa_r+0xac4>
 8007730:	f10a 0a01 	add.w	sl, sl, #1
 8007734:	2331      	movs	r3, #49	; 0x31
 8007736:	e779      	b.n	800762c <_dtoa_r+0xa74>
 8007738:	4b13      	ldr	r3, [pc, #76]	; (8007788 <_dtoa_r+0xbd0>)
 800773a:	f7ff baaf 	b.w	8006c9c <_dtoa_r+0xe4>
 800773e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007740:	2b00      	cmp	r3, #0
 8007742:	f47f aa86 	bne.w	8006c52 <_dtoa_r+0x9a>
 8007746:	4b11      	ldr	r3, [pc, #68]	; (800778c <_dtoa_r+0xbd4>)
 8007748:	f7ff baa8 	b.w	8006c9c <_dtoa_r+0xe4>
 800774c:	f1b9 0f00 	cmp.w	r9, #0
 8007750:	dc03      	bgt.n	800775a <_dtoa_r+0xba2>
 8007752:	9b05      	ldr	r3, [sp, #20]
 8007754:	2b02      	cmp	r3, #2
 8007756:	f73f aec9 	bgt.w	80074ec <_dtoa_r+0x934>
 800775a:	9d00      	ldr	r5, [sp, #0]
 800775c:	4631      	mov	r1, r6
 800775e:	4658      	mov	r0, fp
 8007760:	f7ff f99e 	bl	8006aa0 <quorem>
 8007764:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007768:	f805 3b01 	strb.w	r3, [r5], #1
 800776c:	9a00      	ldr	r2, [sp, #0]
 800776e:	1aaa      	subs	r2, r5, r2
 8007770:	4591      	cmp	r9, r2
 8007772:	ddba      	ble.n	80076ea <_dtoa_r+0xb32>
 8007774:	4659      	mov	r1, fp
 8007776:	2300      	movs	r3, #0
 8007778:	220a      	movs	r2, #10
 800777a:	4620      	mov	r0, r4
 800777c:	f000 f97e 	bl	8007a7c <__multadd>
 8007780:	4683      	mov	fp, r0
 8007782:	e7eb      	b.n	800775c <_dtoa_r+0xba4>
 8007784:	08008ca3 	.word	0x08008ca3
 8007788:	08008bfc 	.word	0x08008bfc
 800778c:	08008c20 	.word	0x08008c20

08007790 <std>:
 8007790:	2300      	movs	r3, #0
 8007792:	b510      	push	{r4, lr}
 8007794:	4604      	mov	r4, r0
 8007796:	e9c0 3300 	strd	r3, r3, [r0]
 800779a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800779e:	6083      	str	r3, [r0, #8]
 80077a0:	8181      	strh	r1, [r0, #12]
 80077a2:	6643      	str	r3, [r0, #100]	; 0x64
 80077a4:	81c2      	strh	r2, [r0, #14]
 80077a6:	6183      	str	r3, [r0, #24]
 80077a8:	4619      	mov	r1, r3
 80077aa:	2208      	movs	r2, #8
 80077ac:	305c      	adds	r0, #92	; 0x5c
 80077ae:	f7fe fced 	bl	800618c <memset>
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <std+0x38>)
 80077b4:	6263      	str	r3, [r4, #36]	; 0x24
 80077b6:	4b05      	ldr	r3, [pc, #20]	; (80077cc <std+0x3c>)
 80077b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80077ba:	4b05      	ldr	r3, [pc, #20]	; (80077d0 <std+0x40>)
 80077bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077be:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <std+0x44>)
 80077c0:	6224      	str	r4, [r4, #32]
 80077c2:	6323      	str	r3, [r4, #48]	; 0x30
 80077c4:	bd10      	pop	{r4, pc}
 80077c6:	bf00      	nop
 80077c8:	080084fd 	.word	0x080084fd
 80077cc:	0800851f 	.word	0x0800851f
 80077d0:	08008557 	.word	0x08008557
 80077d4:	0800857b 	.word	0x0800857b

080077d8 <_cleanup_r>:
 80077d8:	4901      	ldr	r1, [pc, #4]	; (80077e0 <_cleanup_r+0x8>)
 80077da:	f000 b8af 	b.w	800793c <_fwalk_reent>
 80077de:	bf00      	nop
 80077e0:	08008891 	.word	0x08008891

080077e4 <__sfmoreglue>:
 80077e4:	b570      	push	{r4, r5, r6, lr}
 80077e6:	1e4a      	subs	r2, r1, #1
 80077e8:	2568      	movs	r5, #104	; 0x68
 80077ea:	4355      	muls	r5, r2
 80077ec:	460e      	mov	r6, r1
 80077ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077f2:	f000 fcbf 	bl	8008174 <_malloc_r>
 80077f6:	4604      	mov	r4, r0
 80077f8:	b140      	cbz	r0, 800780c <__sfmoreglue+0x28>
 80077fa:	2100      	movs	r1, #0
 80077fc:	e9c0 1600 	strd	r1, r6, [r0]
 8007800:	300c      	adds	r0, #12
 8007802:	60a0      	str	r0, [r4, #8]
 8007804:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007808:	f7fe fcc0 	bl	800618c <memset>
 800780c:	4620      	mov	r0, r4
 800780e:	bd70      	pop	{r4, r5, r6, pc}

08007810 <__sfp_lock_acquire>:
 8007810:	4801      	ldr	r0, [pc, #4]	; (8007818 <__sfp_lock_acquire+0x8>)
 8007812:	f000 b8b8 	b.w	8007986 <__retarget_lock_acquire_recursive>
 8007816:	bf00      	nop
 8007818:	20000390 	.word	0x20000390

0800781c <__sfp_lock_release>:
 800781c:	4801      	ldr	r0, [pc, #4]	; (8007824 <__sfp_lock_release+0x8>)
 800781e:	f000 b8b3 	b.w	8007988 <__retarget_lock_release_recursive>
 8007822:	bf00      	nop
 8007824:	20000390 	.word	0x20000390

08007828 <__sinit_lock_acquire>:
 8007828:	4801      	ldr	r0, [pc, #4]	; (8007830 <__sinit_lock_acquire+0x8>)
 800782a:	f000 b8ac 	b.w	8007986 <__retarget_lock_acquire_recursive>
 800782e:	bf00      	nop
 8007830:	2000038b 	.word	0x2000038b

08007834 <__sinit_lock_release>:
 8007834:	4801      	ldr	r0, [pc, #4]	; (800783c <__sinit_lock_release+0x8>)
 8007836:	f000 b8a7 	b.w	8007988 <__retarget_lock_release_recursive>
 800783a:	bf00      	nop
 800783c:	2000038b 	.word	0x2000038b

08007840 <__sinit>:
 8007840:	b510      	push	{r4, lr}
 8007842:	4604      	mov	r4, r0
 8007844:	f7ff fff0 	bl	8007828 <__sinit_lock_acquire>
 8007848:	69a3      	ldr	r3, [r4, #24]
 800784a:	b11b      	cbz	r3, 8007854 <__sinit+0x14>
 800784c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007850:	f7ff bff0 	b.w	8007834 <__sinit_lock_release>
 8007854:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007858:	6523      	str	r3, [r4, #80]	; 0x50
 800785a:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <__sinit+0x68>)
 800785c:	4a13      	ldr	r2, [pc, #76]	; (80078ac <__sinit+0x6c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	62a2      	str	r2, [r4, #40]	; 0x28
 8007862:	42a3      	cmp	r3, r4
 8007864:	bf04      	itt	eq
 8007866:	2301      	moveq	r3, #1
 8007868:	61a3      	streq	r3, [r4, #24]
 800786a:	4620      	mov	r0, r4
 800786c:	f000 f820 	bl	80078b0 <__sfp>
 8007870:	6060      	str	r0, [r4, #4]
 8007872:	4620      	mov	r0, r4
 8007874:	f000 f81c 	bl	80078b0 <__sfp>
 8007878:	60a0      	str	r0, [r4, #8]
 800787a:	4620      	mov	r0, r4
 800787c:	f000 f818 	bl	80078b0 <__sfp>
 8007880:	2200      	movs	r2, #0
 8007882:	60e0      	str	r0, [r4, #12]
 8007884:	2104      	movs	r1, #4
 8007886:	6860      	ldr	r0, [r4, #4]
 8007888:	f7ff ff82 	bl	8007790 <std>
 800788c:	68a0      	ldr	r0, [r4, #8]
 800788e:	2201      	movs	r2, #1
 8007890:	2109      	movs	r1, #9
 8007892:	f7ff ff7d 	bl	8007790 <std>
 8007896:	68e0      	ldr	r0, [r4, #12]
 8007898:	2202      	movs	r2, #2
 800789a:	2112      	movs	r1, #18
 800789c:	f7ff ff78 	bl	8007790 <std>
 80078a0:	2301      	movs	r3, #1
 80078a2:	61a3      	str	r3, [r4, #24]
 80078a4:	e7d2      	b.n	800784c <__sinit+0xc>
 80078a6:	bf00      	nop
 80078a8:	08008be8 	.word	0x08008be8
 80078ac:	080077d9 	.word	0x080077d9

080078b0 <__sfp>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	4607      	mov	r7, r0
 80078b4:	f7ff ffac 	bl	8007810 <__sfp_lock_acquire>
 80078b8:	4b1e      	ldr	r3, [pc, #120]	; (8007934 <__sfp+0x84>)
 80078ba:	681e      	ldr	r6, [r3, #0]
 80078bc:	69b3      	ldr	r3, [r6, #24]
 80078be:	b913      	cbnz	r3, 80078c6 <__sfp+0x16>
 80078c0:	4630      	mov	r0, r6
 80078c2:	f7ff ffbd 	bl	8007840 <__sinit>
 80078c6:	3648      	adds	r6, #72	; 0x48
 80078c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	d503      	bpl.n	80078d8 <__sfp+0x28>
 80078d0:	6833      	ldr	r3, [r6, #0]
 80078d2:	b30b      	cbz	r3, 8007918 <__sfp+0x68>
 80078d4:	6836      	ldr	r6, [r6, #0]
 80078d6:	e7f7      	b.n	80078c8 <__sfp+0x18>
 80078d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078dc:	b9d5      	cbnz	r5, 8007914 <__sfp+0x64>
 80078de:	4b16      	ldr	r3, [pc, #88]	; (8007938 <__sfp+0x88>)
 80078e0:	60e3      	str	r3, [r4, #12]
 80078e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078e6:	6665      	str	r5, [r4, #100]	; 0x64
 80078e8:	f000 f84c 	bl	8007984 <__retarget_lock_init_recursive>
 80078ec:	f7ff ff96 	bl	800781c <__sfp_lock_release>
 80078f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078f8:	6025      	str	r5, [r4, #0]
 80078fa:	61a5      	str	r5, [r4, #24]
 80078fc:	2208      	movs	r2, #8
 80078fe:	4629      	mov	r1, r5
 8007900:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007904:	f7fe fc42 	bl	800618c <memset>
 8007908:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800790c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007910:	4620      	mov	r0, r4
 8007912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007914:	3468      	adds	r4, #104	; 0x68
 8007916:	e7d9      	b.n	80078cc <__sfp+0x1c>
 8007918:	2104      	movs	r1, #4
 800791a:	4638      	mov	r0, r7
 800791c:	f7ff ff62 	bl	80077e4 <__sfmoreglue>
 8007920:	4604      	mov	r4, r0
 8007922:	6030      	str	r0, [r6, #0]
 8007924:	2800      	cmp	r0, #0
 8007926:	d1d5      	bne.n	80078d4 <__sfp+0x24>
 8007928:	f7ff ff78 	bl	800781c <__sfp_lock_release>
 800792c:	230c      	movs	r3, #12
 800792e:	603b      	str	r3, [r7, #0]
 8007930:	e7ee      	b.n	8007910 <__sfp+0x60>
 8007932:	bf00      	nop
 8007934:	08008be8 	.word	0x08008be8
 8007938:	ffff0001 	.word	0xffff0001

0800793c <_fwalk_reent>:
 800793c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007940:	4606      	mov	r6, r0
 8007942:	4688      	mov	r8, r1
 8007944:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007948:	2700      	movs	r7, #0
 800794a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800794e:	f1b9 0901 	subs.w	r9, r9, #1
 8007952:	d505      	bpl.n	8007960 <_fwalk_reent+0x24>
 8007954:	6824      	ldr	r4, [r4, #0]
 8007956:	2c00      	cmp	r4, #0
 8007958:	d1f7      	bne.n	800794a <_fwalk_reent+0xe>
 800795a:	4638      	mov	r0, r7
 800795c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007960:	89ab      	ldrh	r3, [r5, #12]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d907      	bls.n	8007976 <_fwalk_reent+0x3a>
 8007966:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800796a:	3301      	adds	r3, #1
 800796c:	d003      	beq.n	8007976 <_fwalk_reent+0x3a>
 800796e:	4629      	mov	r1, r5
 8007970:	4630      	mov	r0, r6
 8007972:	47c0      	blx	r8
 8007974:	4307      	orrs	r7, r0
 8007976:	3568      	adds	r5, #104	; 0x68
 8007978:	e7e9      	b.n	800794e <_fwalk_reent+0x12>
	...

0800797c <_localeconv_r>:
 800797c:	4800      	ldr	r0, [pc, #0]	; (8007980 <_localeconv_r+0x4>)
 800797e:	4770      	bx	lr
 8007980:	20000160 	.word	0x20000160

08007984 <__retarget_lock_init_recursive>:
 8007984:	4770      	bx	lr

08007986 <__retarget_lock_acquire_recursive>:
 8007986:	4770      	bx	lr

08007988 <__retarget_lock_release_recursive>:
 8007988:	4770      	bx	lr
	...

0800798c <malloc>:
 800798c:	4b02      	ldr	r3, [pc, #8]	; (8007998 <malloc+0xc>)
 800798e:	4601      	mov	r1, r0
 8007990:	6818      	ldr	r0, [r3, #0]
 8007992:	f000 bbef 	b.w	8008174 <_malloc_r>
 8007996:	bf00      	nop
 8007998:	2000000c 	.word	0x2000000c

0800799c <memcpy>:
 800799c:	440a      	add	r2, r1
 800799e:	4291      	cmp	r1, r2
 80079a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80079a4:	d100      	bne.n	80079a8 <memcpy+0xc>
 80079a6:	4770      	bx	lr
 80079a8:	b510      	push	{r4, lr}
 80079aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079b2:	4291      	cmp	r1, r2
 80079b4:	d1f9      	bne.n	80079aa <memcpy+0xe>
 80079b6:	bd10      	pop	{r4, pc}

080079b8 <_Balloc>:
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079bc:	4604      	mov	r4, r0
 80079be:	460d      	mov	r5, r1
 80079c0:	b976      	cbnz	r6, 80079e0 <_Balloc+0x28>
 80079c2:	2010      	movs	r0, #16
 80079c4:	f7ff ffe2 	bl	800798c <malloc>
 80079c8:	4602      	mov	r2, r0
 80079ca:	6260      	str	r0, [r4, #36]	; 0x24
 80079cc:	b920      	cbnz	r0, 80079d8 <_Balloc+0x20>
 80079ce:	4b18      	ldr	r3, [pc, #96]	; (8007a30 <_Balloc+0x78>)
 80079d0:	4818      	ldr	r0, [pc, #96]	; (8007a34 <_Balloc+0x7c>)
 80079d2:	2166      	movs	r1, #102	; 0x66
 80079d4:	f000 fea8 	bl	8008728 <__assert_func>
 80079d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079dc:	6006      	str	r6, [r0, #0]
 80079de:	60c6      	str	r6, [r0, #12]
 80079e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079e2:	68f3      	ldr	r3, [r6, #12]
 80079e4:	b183      	cbz	r3, 8007a08 <_Balloc+0x50>
 80079e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079ee:	b9b8      	cbnz	r0, 8007a20 <_Balloc+0x68>
 80079f0:	2101      	movs	r1, #1
 80079f2:	fa01 f605 	lsl.w	r6, r1, r5
 80079f6:	1d72      	adds	r2, r6, #5
 80079f8:	0092      	lsls	r2, r2, #2
 80079fa:	4620      	mov	r0, r4
 80079fc:	f000 fb5a 	bl	80080b4 <_calloc_r>
 8007a00:	b160      	cbz	r0, 8007a1c <_Balloc+0x64>
 8007a02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a06:	e00e      	b.n	8007a26 <_Balloc+0x6e>
 8007a08:	2221      	movs	r2, #33	; 0x21
 8007a0a:	2104      	movs	r1, #4
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f000 fb51 	bl	80080b4 <_calloc_r>
 8007a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a14:	60f0      	str	r0, [r6, #12]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e4      	bne.n	80079e6 <_Balloc+0x2e>
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	bd70      	pop	{r4, r5, r6, pc}
 8007a20:	6802      	ldr	r2, [r0, #0]
 8007a22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a26:	2300      	movs	r3, #0
 8007a28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a2c:	e7f7      	b.n	8007a1e <_Balloc+0x66>
 8007a2e:	bf00      	nop
 8007a30:	08008c2d 	.word	0x08008c2d
 8007a34:	08008d14 	.word	0x08008d14

08007a38 <_Bfree>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a3c:	4605      	mov	r5, r0
 8007a3e:	460c      	mov	r4, r1
 8007a40:	b976      	cbnz	r6, 8007a60 <_Bfree+0x28>
 8007a42:	2010      	movs	r0, #16
 8007a44:	f7ff ffa2 	bl	800798c <malloc>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	6268      	str	r0, [r5, #36]	; 0x24
 8007a4c:	b920      	cbnz	r0, 8007a58 <_Bfree+0x20>
 8007a4e:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <_Bfree+0x3c>)
 8007a50:	4809      	ldr	r0, [pc, #36]	; (8007a78 <_Bfree+0x40>)
 8007a52:	218a      	movs	r1, #138	; 0x8a
 8007a54:	f000 fe68 	bl	8008728 <__assert_func>
 8007a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a5c:	6006      	str	r6, [r0, #0]
 8007a5e:	60c6      	str	r6, [r0, #12]
 8007a60:	b13c      	cbz	r4, 8007a72 <_Bfree+0x3a>
 8007a62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a64:	6862      	ldr	r2, [r4, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a6c:	6021      	str	r1, [r4, #0]
 8007a6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	08008c2d 	.word	0x08008c2d
 8007a78:	08008d14 	.word	0x08008d14

08007a7c <__multadd>:
 8007a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a80:	690e      	ldr	r6, [r1, #16]
 8007a82:	4607      	mov	r7, r0
 8007a84:	4698      	mov	r8, r3
 8007a86:	460c      	mov	r4, r1
 8007a88:	f101 0014 	add.w	r0, r1, #20
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	6805      	ldr	r5, [r0, #0]
 8007a90:	b2a9      	uxth	r1, r5
 8007a92:	fb02 8101 	mla	r1, r2, r1, r8
 8007a96:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007a9a:	0c2d      	lsrs	r5, r5, #16
 8007a9c:	fb02 c505 	mla	r5, r2, r5, ip
 8007aa0:	b289      	uxth	r1, r1
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007aa8:	429e      	cmp	r6, r3
 8007aaa:	f840 1b04 	str.w	r1, [r0], #4
 8007aae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007ab2:	dcec      	bgt.n	8007a8e <__multadd+0x12>
 8007ab4:	f1b8 0f00 	cmp.w	r8, #0
 8007ab8:	d022      	beq.n	8007b00 <__multadd+0x84>
 8007aba:	68a3      	ldr	r3, [r4, #8]
 8007abc:	42b3      	cmp	r3, r6
 8007abe:	dc19      	bgt.n	8007af4 <__multadd+0x78>
 8007ac0:	6861      	ldr	r1, [r4, #4]
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	3101      	adds	r1, #1
 8007ac6:	f7ff ff77 	bl	80079b8 <_Balloc>
 8007aca:	4605      	mov	r5, r0
 8007acc:	b928      	cbnz	r0, 8007ada <__multadd+0x5e>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	4b0d      	ldr	r3, [pc, #52]	; (8007b08 <__multadd+0x8c>)
 8007ad2:	480e      	ldr	r0, [pc, #56]	; (8007b0c <__multadd+0x90>)
 8007ad4:	21b5      	movs	r1, #181	; 0xb5
 8007ad6:	f000 fe27 	bl	8008728 <__assert_func>
 8007ada:	6922      	ldr	r2, [r4, #16]
 8007adc:	3202      	adds	r2, #2
 8007ade:	f104 010c 	add.w	r1, r4, #12
 8007ae2:	0092      	lsls	r2, r2, #2
 8007ae4:	300c      	adds	r0, #12
 8007ae6:	f7ff ff59 	bl	800799c <memcpy>
 8007aea:	4621      	mov	r1, r4
 8007aec:	4638      	mov	r0, r7
 8007aee:	f7ff ffa3 	bl	8007a38 <_Bfree>
 8007af2:	462c      	mov	r4, r5
 8007af4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007af8:	3601      	adds	r6, #1
 8007afa:	f8c3 8014 	str.w	r8, [r3, #20]
 8007afe:	6126      	str	r6, [r4, #16]
 8007b00:	4620      	mov	r0, r4
 8007b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b06:	bf00      	nop
 8007b08:	08008ca3 	.word	0x08008ca3
 8007b0c:	08008d14 	.word	0x08008d14

08007b10 <__hi0bits>:
 8007b10:	0c03      	lsrs	r3, r0, #16
 8007b12:	041b      	lsls	r3, r3, #16
 8007b14:	b9d3      	cbnz	r3, 8007b4c <__hi0bits+0x3c>
 8007b16:	0400      	lsls	r0, r0, #16
 8007b18:	2310      	movs	r3, #16
 8007b1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b1e:	bf04      	itt	eq
 8007b20:	0200      	lsleq	r0, r0, #8
 8007b22:	3308      	addeq	r3, #8
 8007b24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b28:	bf04      	itt	eq
 8007b2a:	0100      	lsleq	r0, r0, #4
 8007b2c:	3304      	addeq	r3, #4
 8007b2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b32:	bf04      	itt	eq
 8007b34:	0080      	lsleq	r0, r0, #2
 8007b36:	3302      	addeq	r3, #2
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	db05      	blt.n	8007b48 <__hi0bits+0x38>
 8007b3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b40:	f103 0301 	add.w	r3, r3, #1
 8007b44:	bf08      	it	eq
 8007b46:	2320      	moveq	r3, #32
 8007b48:	4618      	mov	r0, r3
 8007b4a:	4770      	bx	lr
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	e7e4      	b.n	8007b1a <__hi0bits+0xa>

08007b50 <__lo0bits>:
 8007b50:	6803      	ldr	r3, [r0, #0]
 8007b52:	f013 0207 	ands.w	r2, r3, #7
 8007b56:	4601      	mov	r1, r0
 8007b58:	d00b      	beq.n	8007b72 <__lo0bits+0x22>
 8007b5a:	07da      	lsls	r2, r3, #31
 8007b5c:	d424      	bmi.n	8007ba8 <__lo0bits+0x58>
 8007b5e:	0798      	lsls	r0, r3, #30
 8007b60:	bf49      	itett	mi
 8007b62:	085b      	lsrmi	r3, r3, #1
 8007b64:	089b      	lsrpl	r3, r3, #2
 8007b66:	2001      	movmi	r0, #1
 8007b68:	600b      	strmi	r3, [r1, #0]
 8007b6a:	bf5c      	itt	pl
 8007b6c:	600b      	strpl	r3, [r1, #0]
 8007b6e:	2002      	movpl	r0, #2
 8007b70:	4770      	bx	lr
 8007b72:	b298      	uxth	r0, r3
 8007b74:	b9b0      	cbnz	r0, 8007ba4 <__lo0bits+0x54>
 8007b76:	0c1b      	lsrs	r3, r3, #16
 8007b78:	2010      	movs	r0, #16
 8007b7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b7e:	bf04      	itt	eq
 8007b80:	0a1b      	lsreq	r3, r3, #8
 8007b82:	3008      	addeq	r0, #8
 8007b84:	071a      	lsls	r2, r3, #28
 8007b86:	bf04      	itt	eq
 8007b88:	091b      	lsreq	r3, r3, #4
 8007b8a:	3004      	addeq	r0, #4
 8007b8c:	079a      	lsls	r2, r3, #30
 8007b8e:	bf04      	itt	eq
 8007b90:	089b      	lsreq	r3, r3, #2
 8007b92:	3002      	addeq	r0, #2
 8007b94:	07da      	lsls	r2, r3, #31
 8007b96:	d403      	bmi.n	8007ba0 <__lo0bits+0x50>
 8007b98:	085b      	lsrs	r3, r3, #1
 8007b9a:	f100 0001 	add.w	r0, r0, #1
 8007b9e:	d005      	beq.n	8007bac <__lo0bits+0x5c>
 8007ba0:	600b      	str	r3, [r1, #0]
 8007ba2:	4770      	bx	lr
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	e7e8      	b.n	8007b7a <__lo0bits+0x2a>
 8007ba8:	2000      	movs	r0, #0
 8007baa:	4770      	bx	lr
 8007bac:	2020      	movs	r0, #32
 8007bae:	4770      	bx	lr

08007bb0 <__i2b>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	f7ff feff 	bl	80079b8 <_Balloc>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	b928      	cbnz	r0, 8007bca <__i2b+0x1a>
 8007bbe:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <__i2b+0x24>)
 8007bc0:	4805      	ldr	r0, [pc, #20]	; (8007bd8 <__i2b+0x28>)
 8007bc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007bc6:	f000 fdaf 	bl	8008728 <__assert_func>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	6144      	str	r4, [r0, #20]
 8007bce:	6103      	str	r3, [r0, #16]
 8007bd0:	bd10      	pop	{r4, pc}
 8007bd2:	bf00      	nop
 8007bd4:	08008ca3 	.word	0x08008ca3
 8007bd8:	08008d14 	.word	0x08008d14

08007bdc <__multiply>:
 8007bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be0:	4614      	mov	r4, r2
 8007be2:	690a      	ldr	r2, [r1, #16]
 8007be4:	6923      	ldr	r3, [r4, #16]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	bfb8      	it	lt
 8007bea:	460b      	movlt	r3, r1
 8007bec:	460d      	mov	r5, r1
 8007bee:	bfbc      	itt	lt
 8007bf0:	4625      	movlt	r5, r4
 8007bf2:	461c      	movlt	r4, r3
 8007bf4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007bf8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007bfc:	68ab      	ldr	r3, [r5, #8]
 8007bfe:	6869      	ldr	r1, [r5, #4]
 8007c00:	eb0a 0709 	add.w	r7, sl, r9
 8007c04:	42bb      	cmp	r3, r7
 8007c06:	b085      	sub	sp, #20
 8007c08:	bfb8      	it	lt
 8007c0a:	3101      	addlt	r1, #1
 8007c0c:	f7ff fed4 	bl	80079b8 <_Balloc>
 8007c10:	b930      	cbnz	r0, 8007c20 <__multiply+0x44>
 8007c12:	4602      	mov	r2, r0
 8007c14:	4b42      	ldr	r3, [pc, #264]	; (8007d20 <__multiply+0x144>)
 8007c16:	4843      	ldr	r0, [pc, #268]	; (8007d24 <__multiply+0x148>)
 8007c18:	f240 115d 	movw	r1, #349	; 0x15d
 8007c1c:	f000 fd84 	bl	8008728 <__assert_func>
 8007c20:	f100 0614 	add.w	r6, r0, #20
 8007c24:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007c28:	4633      	mov	r3, r6
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	4543      	cmp	r3, r8
 8007c2e:	d31e      	bcc.n	8007c6e <__multiply+0x92>
 8007c30:	f105 0c14 	add.w	ip, r5, #20
 8007c34:	f104 0314 	add.w	r3, r4, #20
 8007c38:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007c3c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007c40:	9202      	str	r2, [sp, #8]
 8007c42:	ebac 0205 	sub.w	r2, ip, r5
 8007c46:	3a15      	subs	r2, #21
 8007c48:	f022 0203 	bic.w	r2, r2, #3
 8007c4c:	3204      	adds	r2, #4
 8007c4e:	f105 0115 	add.w	r1, r5, #21
 8007c52:	458c      	cmp	ip, r1
 8007c54:	bf38      	it	cc
 8007c56:	2204      	movcc	r2, #4
 8007c58:	9201      	str	r2, [sp, #4]
 8007c5a:	9a02      	ldr	r2, [sp, #8]
 8007c5c:	9303      	str	r3, [sp, #12]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d808      	bhi.n	8007c74 <__multiply+0x98>
 8007c62:	2f00      	cmp	r7, #0
 8007c64:	dc55      	bgt.n	8007d12 <__multiply+0x136>
 8007c66:	6107      	str	r7, [r0, #16]
 8007c68:	b005      	add	sp, #20
 8007c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6e:	f843 2b04 	str.w	r2, [r3], #4
 8007c72:	e7db      	b.n	8007c2c <__multiply+0x50>
 8007c74:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c78:	f1ba 0f00 	cmp.w	sl, #0
 8007c7c:	d020      	beq.n	8007cc0 <__multiply+0xe4>
 8007c7e:	f105 0e14 	add.w	lr, r5, #20
 8007c82:	46b1      	mov	r9, r6
 8007c84:	2200      	movs	r2, #0
 8007c86:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007c8a:	f8d9 b000 	ldr.w	fp, [r9]
 8007c8e:	b2a1      	uxth	r1, r4
 8007c90:	fa1f fb8b 	uxth.w	fp, fp
 8007c94:	fb0a b101 	mla	r1, sl, r1, fp
 8007c98:	4411      	add	r1, r2
 8007c9a:	f8d9 2000 	ldr.w	r2, [r9]
 8007c9e:	0c24      	lsrs	r4, r4, #16
 8007ca0:	0c12      	lsrs	r2, r2, #16
 8007ca2:	fb0a 2404 	mla	r4, sl, r4, r2
 8007ca6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007caa:	b289      	uxth	r1, r1
 8007cac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007cb0:	45f4      	cmp	ip, lr
 8007cb2:	f849 1b04 	str.w	r1, [r9], #4
 8007cb6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007cba:	d8e4      	bhi.n	8007c86 <__multiply+0xaa>
 8007cbc:	9901      	ldr	r1, [sp, #4]
 8007cbe:	5072      	str	r2, [r6, r1]
 8007cc0:	9a03      	ldr	r2, [sp, #12]
 8007cc2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	f1b9 0f00 	cmp.w	r9, #0
 8007ccc:	d01f      	beq.n	8007d0e <__multiply+0x132>
 8007cce:	6834      	ldr	r4, [r6, #0]
 8007cd0:	f105 0114 	add.w	r1, r5, #20
 8007cd4:	46b6      	mov	lr, r6
 8007cd6:	f04f 0a00 	mov.w	sl, #0
 8007cda:	880a      	ldrh	r2, [r1, #0]
 8007cdc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007ce0:	fb09 b202 	mla	r2, r9, r2, fp
 8007ce4:	4492      	add	sl, r2
 8007ce6:	b2a4      	uxth	r4, r4
 8007ce8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007cec:	f84e 4b04 	str.w	r4, [lr], #4
 8007cf0:	f851 4b04 	ldr.w	r4, [r1], #4
 8007cf4:	f8be 2000 	ldrh.w	r2, [lr]
 8007cf8:	0c24      	lsrs	r4, r4, #16
 8007cfa:	fb09 2404 	mla	r4, r9, r4, r2
 8007cfe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007d02:	458c      	cmp	ip, r1
 8007d04:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d08:	d8e7      	bhi.n	8007cda <__multiply+0xfe>
 8007d0a:	9a01      	ldr	r2, [sp, #4]
 8007d0c:	50b4      	str	r4, [r6, r2]
 8007d0e:	3604      	adds	r6, #4
 8007d10:	e7a3      	b.n	8007c5a <__multiply+0x7e>
 8007d12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1a5      	bne.n	8007c66 <__multiply+0x8a>
 8007d1a:	3f01      	subs	r7, #1
 8007d1c:	e7a1      	b.n	8007c62 <__multiply+0x86>
 8007d1e:	bf00      	nop
 8007d20:	08008ca3 	.word	0x08008ca3
 8007d24:	08008d14 	.word	0x08008d14

08007d28 <__pow5mult>:
 8007d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d2c:	4615      	mov	r5, r2
 8007d2e:	f012 0203 	ands.w	r2, r2, #3
 8007d32:	4606      	mov	r6, r0
 8007d34:	460f      	mov	r7, r1
 8007d36:	d007      	beq.n	8007d48 <__pow5mult+0x20>
 8007d38:	4c25      	ldr	r4, [pc, #148]	; (8007dd0 <__pow5mult+0xa8>)
 8007d3a:	3a01      	subs	r2, #1
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d42:	f7ff fe9b 	bl	8007a7c <__multadd>
 8007d46:	4607      	mov	r7, r0
 8007d48:	10ad      	asrs	r5, r5, #2
 8007d4a:	d03d      	beq.n	8007dc8 <__pow5mult+0xa0>
 8007d4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d4e:	b97c      	cbnz	r4, 8007d70 <__pow5mult+0x48>
 8007d50:	2010      	movs	r0, #16
 8007d52:	f7ff fe1b 	bl	800798c <malloc>
 8007d56:	4602      	mov	r2, r0
 8007d58:	6270      	str	r0, [r6, #36]	; 0x24
 8007d5a:	b928      	cbnz	r0, 8007d68 <__pow5mult+0x40>
 8007d5c:	4b1d      	ldr	r3, [pc, #116]	; (8007dd4 <__pow5mult+0xac>)
 8007d5e:	481e      	ldr	r0, [pc, #120]	; (8007dd8 <__pow5mult+0xb0>)
 8007d60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d64:	f000 fce0 	bl	8008728 <__assert_func>
 8007d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d6c:	6004      	str	r4, [r0, #0]
 8007d6e:	60c4      	str	r4, [r0, #12]
 8007d70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d78:	b94c      	cbnz	r4, 8007d8e <__pow5mult+0x66>
 8007d7a:	f240 2171 	movw	r1, #625	; 0x271
 8007d7e:	4630      	mov	r0, r6
 8007d80:	f7ff ff16 	bl	8007bb0 <__i2b>
 8007d84:	2300      	movs	r3, #0
 8007d86:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	6003      	str	r3, [r0, #0]
 8007d8e:	f04f 0900 	mov.w	r9, #0
 8007d92:	07eb      	lsls	r3, r5, #31
 8007d94:	d50a      	bpl.n	8007dac <__pow5mult+0x84>
 8007d96:	4639      	mov	r1, r7
 8007d98:	4622      	mov	r2, r4
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f7ff ff1e 	bl	8007bdc <__multiply>
 8007da0:	4639      	mov	r1, r7
 8007da2:	4680      	mov	r8, r0
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff fe47 	bl	8007a38 <_Bfree>
 8007daa:	4647      	mov	r7, r8
 8007dac:	106d      	asrs	r5, r5, #1
 8007dae:	d00b      	beq.n	8007dc8 <__pow5mult+0xa0>
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	b938      	cbnz	r0, 8007dc4 <__pow5mult+0x9c>
 8007db4:	4622      	mov	r2, r4
 8007db6:	4621      	mov	r1, r4
 8007db8:	4630      	mov	r0, r6
 8007dba:	f7ff ff0f 	bl	8007bdc <__multiply>
 8007dbe:	6020      	str	r0, [r4, #0]
 8007dc0:	f8c0 9000 	str.w	r9, [r0]
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	e7e4      	b.n	8007d92 <__pow5mult+0x6a>
 8007dc8:	4638      	mov	r0, r7
 8007dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dce:	bf00      	nop
 8007dd0:	08008e68 	.word	0x08008e68
 8007dd4:	08008c2d 	.word	0x08008c2d
 8007dd8:	08008d14 	.word	0x08008d14

08007ddc <__lshift>:
 8007ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de0:	460c      	mov	r4, r1
 8007de2:	6849      	ldr	r1, [r1, #4]
 8007de4:	6923      	ldr	r3, [r4, #16]
 8007de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dea:	68a3      	ldr	r3, [r4, #8]
 8007dec:	4607      	mov	r7, r0
 8007dee:	4691      	mov	r9, r2
 8007df0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007df4:	f108 0601 	add.w	r6, r8, #1
 8007df8:	42b3      	cmp	r3, r6
 8007dfa:	db0b      	blt.n	8007e14 <__lshift+0x38>
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f7ff fddb 	bl	80079b8 <_Balloc>
 8007e02:	4605      	mov	r5, r0
 8007e04:	b948      	cbnz	r0, 8007e1a <__lshift+0x3e>
 8007e06:	4602      	mov	r2, r0
 8007e08:	4b28      	ldr	r3, [pc, #160]	; (8007eac <__lshift+0xd0>)
 8007e0a:	4829      	ldr	r0, [pc, #164]	; (8007eb0 <__lshift+0xd4>)
 8007e0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e10:	f000 fc8a 	bl	8008728 <__assert_func>
 8007e14:	3101      	adds	r1, #1
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	e7ee      	b.n	8007df8 <__lshift+0x1c>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f100 0114 	add.w	r1, r0, #20
 8007e20:	f100 0210 	add.w	r2, r0, #16
 8007e24:	4618      	mov	r0, r3
 8007e26:	4553      	cmp	r3, sl
 8007e28:	db33      	blt.n	8007e92 <__lshift+0xb6>
 8007e2a:	6920      	ldr	r0, [r4, #16]
 8007e2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e30:	f104 0314 	add.w	r3, r4, #20
 8007e34:	f019 091f 	ands.w	r9, r9, #31
 8007e38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e40:	d02b      	beq.n	8007e9a <__lshift+0xbe>
 8007e42:	f1c9 0e20 	rsb	lr, r9, #32
 8007e46:	468a      	mov	sl, r1
 8007e48:	2200      	movs	r2, #0
 8007e4a:	6818      	ldr	r0, [r3, #0]
 8007e4c:	fa00 f009 	lsl.w	r0, r0, r9
 8007e50:	4302      	orrs	r2, r0
 8007e52:	f84a 2b04 	str.w	r2, [sl], #4
 8007e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e5a:	459c      	cmp	ip, r3
 8007e5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e60:	d8f3      	bhi.n	8007e4a <__lshift+0x6e>
 8007e62:	ebac 0304 	sub.w	r3, ip, r4
 8007e66:	3b15      	subs	r3, #21
 8007e68:	f023 0303 	bic.w	r3, r3, #3
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	f104 0015 	add.w	r0, r4, #21
 8007e72:	4584      	cmp	ip, r0
 8007e74:	bf38      	it	cc
 8007e76:	2304      	movcc	r3, #4
 8007e78:	50ca      	str	r2, [r1, r3]
 8007e7a:	b10a      	cbz	r2, 8007e80 <__lshift+0xa4>
 8007e7c:	f108 0602 	add.w	r6, r8, #2
 8007e80:	3e01      	subs	r6, #1
 8007e82:	4638      	mov	r0, r7
 8007e84:	612e      	str	r6, [r5, #16]
 8007e86:	4621      	mov	r1, r4
 8007e88:	f7ff fdd6 	bl	8007a38 <_Bfree>
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e92:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e96:	3301      	adds	r3, #1
 8007e98:	e7c5      	b.n	8007e26 <__lshift+0x4a>
 8007e9a:	3904      	subs	r1, #4
 8007e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ea4:	459c      	cmp	ip, r3
 8007ea6:	d8f9      	bhi.n	8007e9c <__lshift+0xc0>
 8007ea8:	e7ea      	b.n	8007e80 <__lshift+0xa4>
 8007eaa:	bf00      	nop
 8007eac:	08008ca3 	.word	0x08008ca3
 8007eb0:	08008d14 	.word	0x08008d14

08007eb4 <__mcmp>:
 8007eb4:	b530      	push	{r4, r5, lr}
 8007eb6:	6902      	ldr	r2, [r0, #16]
 8007eb8:	690c      	ldr	r4, [r1, #16]
 8007eba:	1b12      	subs	r2, r2, r4
 8007ebc:	d10e      	bne.n	8007edc <__mcmp+0x28>
 8007ebe:	f100 0314 	add.w	r3, r0, #20
 8007ec2:	3114      	adds	r1, #20
 8007ec4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ec8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ecc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ed0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ed4:	42a5      	cmp	r5, r4
 8007ed6:	d003      	beq.n	8007ee0 <__mcmp+0x2c>
 8007ed8:	d305      	bcc.n	8007ee6 <__mcmp+0x32>
 8007eda:	2201      	movs	r2, #1
 8007edc:	4610      	mov	r0, r2
 8007ede:	bd30      	pop	{r4, r5, pc}
 8007ee0:	4283      	cmp	r3, r0
 8007ee2:	d3f3      	bcc.n	8007ecc <__mcmp+0x18>
 8007ee4:	e7fa      	b.n	8007edc <__mcmp+0x28>
 8007ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eea:	e7f7      	b.n	8007edc <__mcmp+0x28>

08007eec <__mdiff>:
 8007eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	4617      	mov	r7, r2
 8007efa:	f7ff ffdb 	bl	8007eb4 <__mcmp>
 8007efe:	1e05      	subs	r5, r0, #0
 8007f00:	d110      	bne.n	8007f24 <__mdiff+0x38>
 8007f02:	4629      	mov	r1, r5
 8007f04:	4630      	mov	r0, r6
 8007f06:	f7ff fd57 	bl	80079b8 <_Balloc>
 8007f0a:	b930      	cbnz	r0, 8007f1a <__mdiff+0x2e>
 8007f0c:	4b39      	ldr	r3, [pc, #228]	; (8007ff4 <__mdiff+0x108>)
 8007f0e:	4602      	mov	r2, r0
 8007f10:	f240 2132 	movw	r1, #562	; 0x232
 8007f14:	4838      	ldr	r0, [pc, #224]	; (8007ff8 <__mdiff+0x10c>)
 8007f16:	f000 fc07 	bl	8008728 <__assert_func>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f24:	bfa4      	itt	ge
 8007f26:	463b      	movge	r3, r7
 8007f28:	4627      	movge	r7, r4
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	6879      	ldr	r1, [r7, #4]
 8007f2e:	bfa6      	itte	ge
 8007f30:	461c      	movge	r4, r3
 8007f32:	2500      	movge	r5, #0
 8007f34:	2501      	movlt	r5, #1
 8007f36:	f7ff fd3f 	bl	80079b8 <_Balloc>
 8007f3a:	b920      	cbnz	r0, 8007f46 <__mdiff+0x5a>
 8007f3c:	4b2d      	ldr	r3, [pc, #180]	; (8007ff4 <__mdiff+0x108>)
 8007f3e:	4602      	mov	r2, r0
 8007f40:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f44:	e7e6      	b.n	8007f14 <__mdiff+0x28>
 8007f46:	693e      	ldr	r6, [r7, #16]
 8007f48:	60c5      	str	r5, [r0, #12]
 8007f4a:	6925      	ldr	r5, [r4, #16]
 8007f4c:	f107 0114 	add.w	r1, r7, #20
 8007f50:	f104 0914 	add.w	r9, r4, #20
 8007f54:	f100 0e14 	add.w	lr, r0, #20
 8007f58:	f107 0210 	add.w	r2, r7, #16
 8007f5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007f60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007f64:	46f2      	mov	sl, lr
 8007f66:	2700      	movs	r7, #0
 8007f68:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f70:	fa1f f883 	uxth.w	r8, r3
 8007f74:	fa17 f78b 	uxtah	r7, r7, fp
 8007f78:	0c1b      	lsrs	r3, r3, #16
 8007f7a:	eba7 0808 	sub.w	r8, r7, r8
 8007f7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f86:	fa1f f888 	uxth.w	r8, r8
 8007f8a:	141f      	asrs	r7, r3, #16
 8007f8c:	454d      	cmp	r5, r9
 8007f8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f92:	f84a 3b04 	str.w	r3, [sl], #4
 8007f96:	d8e7      	bhi.n	8007f68 <__mdiff+0x7c>
 8007f98:	1b2b      	subs	r3, r5, r4
 8007f9a:	3b15      	subs	r3, #21
 8007f9c:	f023 0303 	bic.w	r3, r3, #3
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	3415      	adds	r4, #21
 8007fa4:	42a5      	cmp	r5, r4
 8007fa6:	bf38      	it	cc
 8007fa8:	2304      	movcc	r3, #4
 8007faa:	4419      	add	r1, r3
 8007fac:	4473      	add	r3, lr
 8007fae:	469e      	mov	lr, r3
 8007fb0:	460d      	mov	r5, r1
 8007fb2:	4565      	cmp	r5, ip
 8007fb4:	d30e      	bcc.n	8007fd4 <__mdiff+0xe8>
 8007fb6:	f10c 0203 	add.w	r2, ip, #3
 8007fba:	1a52      	subs	r2, r2, r1
 8007fbc:	f022 0203 	bic.w	r2, r2, #3
 8007fc0:	3903      	subs	r1, #3
 8007fc2:	458c      	cmp	ip, r1
 8007fc4:	bf38      	it	cc
 8007fc6:	2200      	movcc	r2, #0
 8007fc8:	441a      	add	r2, r3
 8007fca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007fce:	b17b      	cbz	r3, 8007ff0 <__mdiff+0x104>
 8007fd0:	6106      	str	r6, [r0, #16]
 8007fd2:	e7a5      	b.n	8007f20 <__mdiff+0x34>
 8007fd4:	f855 8b04 	ldr.w	r8, [r5], #4
 8007fd8:	fa17 f488 	uxtah	r4, r7, r8
 8007fdc:	1422      	asrs	r2, r4, #16
 8007fde:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007fe2:	b2a4      	uxth	r4, r4
 8007fe4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007fe8:	f84e 4b04 	str.w	r4, [lr], #4
 8007fec:	1417      	asrs	r7, r2, #16
 8007fee:	e7e0      	b.n	8007fb2 <__mdiff+0xc6>
 8007ff0:	3e01      	subs	r6, #1
 8007ff2:	e7ea      	b.n	8007fca <__mdiff+0xde>
 8007ff4:	08008ca3 	.word	0x08008ca3
 8007ff8:	08008d14 	.word	0x08008d14

08007ffc <__d2b>:
 8007ffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008000:	4689      	mov	r9, r1
 8008002:	2101      	movs	r1, #1
 8008004:	ec57 6b10 	vmov	r6, r7, d0
 8008008:	4690      	mov	r8, r2
 800800a:	f7ff fcd5 	bl	80079b8 <_Balloc>
 800800e:	4604      	mov	r4, r0
 8008010:	b930      	cbnz	r0, 8008020 <__d2b+0x24>
 8008012:	4602      	mov	r2, r0
 8008014:	4b25      	ldr	r3, [pc, #148]	; (80080ac <__d2b+0xb0>)
 8008016:	4826      	ldr	r0, [pc, #152]	; (80080b0 <__d2b+0xb4>)
 8008018:	f240 310a 	movw	r1, #778	; 0x30a
 800801c:	f000 fb84 	bl	8008728 <__assert_func>
 8008020:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008024:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008028:	bb35      	cbnz	r5, 8008078 <__d2b+0x7c>
 800802a:	2e00      	cmp	r6, #0
 800802c:	9301      	str	r3, [sp, #4]
 800802e:	d028      	beq.n	8008082 <__d2b+0x86>
 8008030:	4668      	mov	r0, sp
 8008032:	9600      	str	r6, [sp, #0]
 8008034:	f7ff fd8c 	bl	8007b50 <__lo0bits>
 8008038:	9900      	ldr	r1, [sp, #0]
 800803a:	b300      	cbz	r0, 800807e <__d2b+0x82>
 800803c:	9a01      	ldr	r2, [sp, #4]
 800803e:	f1c0 0320 	rsb	r3, r0, #32
 8008042:	fa02 f303 	lsl.w	r3, r2, r3
 8008046:	430b      	orrs	r3, r1
 8008048:	40c2      	lsrs	r2, r0
 800804a:	6163      	str	r3, [r4, #20]
 800804c:	9201      	str	r2, [sp, #4]
 800804e:	9b01      	ldr	r3, [sp, #4]
 8008050:	61a3      	str	r3, [r4, #24]
 8008052:	2b00      	cmp	r3, #0
 8008054:	bf14      	ite	ne
 8008056:	2202      	movne	r2, #2
 8008058:	2201      	moveq	r2, #1
 800805a:	6122      	str	r2, [r4, #16]
 800805c:	b1d5      	cbz	r5, 8008094 <__d2b+0x98>
 800805e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008062:	4405      	add	r5, r0
 8008064:	f8c9 5000 	str.w	r5, [r9]
 8008068:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800806c:	f8c8 0000 	str.w	r0, [r8]
 8008070:	4620      	mov	r0, r4
 8008072:	b003      	add	sp, #12
 8008074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800807c:	e7d5      	b.n	800802a <__d2b+0x2e>
 800807e:	6161      	str	r1, [r4, #20]
 8008080:	e7e5      	b.n	800804e <__d2b+0x52>
 8008082:	a801      	add	r0, sp, #4
 8008084:	f7ff fd64 	bl	8007b50 <__lo0bits>
 8008088:	9b01      	ldr	r3, [sp, #4]
 800808a:	6163      	str	r3, [r4, #20]
 800808c:	2201      	movs	r2, #1
 800808e:	6122      	str	r2, [r4, #16]
 8008090:	3020      	adds	r0, #32
 8008092:	e7e3      	b.n	800805c <__d2b+0x60>
 8008094:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008098:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800809c:	f8c9 0000 	str.w	r0, [r9]
 80080a0:	6918      	ldr	r0, [r3, #16]
 80080a2:	f7ff fd35 	bl	8007b10 <__hi0bits>
 80080a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080aa:	e7df      	b.n	800806c <__d2b+0x70>
 80080ac:	08008ca3 	.word	0x08008ca3
 80080b0:	08008d14 	.word	0x08008d14

080080b4 <_calloc_r>:
 80080b4:	b513      	push	{r0, r1, r4, lr}
 80080b6:	434a      	muls	r2, r1
 80080b8:	4611      	mov	r1, r2
 80080ba:	9201      	str	r2, [sp, #4]
 80080bc:	f000 f85a 	bl	8008174 <_malloc_r>
 80080c0:	4604      	mov	r4, r0
 80080c2:	b118      	cbz	r0, 80080cc <_calloc_r+0x18>
 80080c4:	9a01      	ldr	r2, [sp, #4]
 80080c6:	2100      	movs	r1, #0
 80080c8:	f7fe f860 	bl	800618c <memset>
 80080cc:	4620      	mov	r0, r4
 80080ce:	b002      	add	sp, #8
 80080d0:	bd10      	pop	{r4, pc}
	...

080080d4 <_free_r>:
 80080d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080d6:	2900      	cmp	r1, #0
 80080d8:	d048      	beq.n	800816c <_free_r+0x98>
 80080da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080de:	9001      	str	r0, [sp, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f1a1 0404 	sub.w	r4, r1, #4
 80080e6:	bfb8      	it	lt
 80080e8:	18e4      	addlt	r4, r4, r3
 80080ea:	f000 fca7 	bl	8008a3c <__malloc_lock>
 80080ee:	4a20      	ldr	r2, [pc, #128]	; (8008170 <_free_r+0x9c>)
 80080f0:	9801      	ldr	r0, [sp, #4]
 80080f2:	6813      	ldr	r3, [r2, #0]
 80080f4:	4615      	mov	r5, r2
 80080f6:	b933      	cbnz	r3, 8008106 <_free_r+0x32>
 80080f8:	6063      	str	r3, [r4, #4]
 80080fa:	6014      	str	r4, [r2, #0]
 80080fc:	b003      	add	sp, #12
 80080fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008102:	f000 bca1 	b.w	8008a48 <__malloc_unlock>
 8008106:	42a3      	cmp	r3, r4
 8008108:	d90b      	bls.n	8008122 <_free_r+0x4e>
 800810a:	6821      	ldr	r1, [r4, #0]
 800810c:	1862      	adds	r2, r4, r1
 800810e:	4293      	cmp	r3, r2
 8008110:	bf04      	itt	eq
 8008112:	681a      	ldreq	r2, [r3, #0]
 8008114:	685b      	ldreq	r3, [r3, #4]
 8008116:	6063      	str	r3, [r4, #4]
 8008118:	bf04      	itt	eq
 800811a:	1852      	addeq	r2, r2, r1
 800811c:	6022      	streq	r2, [r4, #0]
 800811e:	602c      	str	r4, [r5, #0]
 8008120:	e7ec      	b.n	80080fc <_free_r+0x28>
 8008122:	461a      	mov	r2, r3
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	b10b      	cbz	r3, 800812c <_free_r+0x58>
 8008128:	42a3      	cmp	r3, r4
 800812a:	d9fa      	bls.n	8008122 <_free_r+0x4e>
 800812c:	6811      	ldr	r1, [r2, #0]
 800812e:	1855      	adds	r5, r2, r1
 8008130:	42a5      	cmp	r5, r4
 8008132:	d10b      	bne.n	800814c <_free_r+0x78>
 8008134:	6824      	ldr	r4, [r4, #0]
 8008136:	4421      	add	r1, r4
 8008138:	1854      	adds	r4, r2, r1
 800813a:	42a3      	cmp	r3, r4
 800813c:	6011      	str	r1, [r2, #0]
 800813e:	d1dd      	bne.n	80080fc <_free_r+0x28>
 8008140:	681c      	ldr	r4, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	6053      	str	r3, [r2, #4]
 8008146:	4421      	add	r1, r4
 8008148:	6011      	str	r1, [r2, #0]
 800814a:	e7d7      	b.n	80080fc <_free_r+0x28>
 800814c:	d902      	bls.n	8008154 <_free_r+0x80>
 800814e:	230c      	movs	r3, #12
 8008150:	6003      	str	r3, [r0, #0]
 8008152:	e7d3      	b.n	80080fc <_free_r+0x28>
 8008154:	6825      	ldr	r5, [r4, #0]
 8008156:	1961      	adds	r1, r4, r5
 8008158:	428b      	cmp	r3, r1
 800815a:	bf04      	itt	eq
 800815c:	6819      	ldreq	r1, [r3, #0]
 800815e:	685b      	ldreq	r3, [r3, #4]
 8008160:	6063      	str	r3, [r4, #4]
 8008162:	bf04      	itt	eq
 8008164:	1949      	addeq	r1, r1, r5
 8008166:	6021      	streq	r1, [r4, #0]
 8008168:	6054      	str	r4, [r2, #4]
 800816a:	e7c7      	b.n	80080fc <_free_r+0x28>
 800816c:	b003      	add	sp, #12
 800816e:	bd30      	pop	{r4, r5, pc}
 8008170:	200001fc 	.word	0x200001fc

08008174 <_malloc_r>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	1ccd      	adds	r5, r1, #3
 8008178:	f025 0503 	bic.w	r5, r5, #3
 800817c:	3508      	adds	r5, #8
 800817e:	2d0c      	cmp	r5, #12
 8008180:	bf38      	it	cc
 8008182:	250c      	movcc	r5, #12
 8008184:	2d00      	cmp	r5, #0
 8008186:	4606      	mov	r6, r0
 8008188:	db01      	blt.n	800818e <_malloc_r+0x1a>
 800818a:	42a9      	cmp	r1, r5
 800818c:	d903      	bls.n	8008196 <_malloc_r+0x22>
 800818e:	230c      	movs	r3, #12
 8008190:	6033      	str	r3, [r6, #0]
 8008192:	2000      	movs	r0, #0
 8008194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008196:	f000 fc51 	bl	8008a3c <__malloc_lock>
 800819a:	4921      	ldr	r1, [pc, #132]	; (8008220 <_malloc_r+0xac>)
 800819c:	680a      	ldr	r2, [r1, #0]
 800819e:	4614      	mov	r4, r2
 80081a0:	b99c      	cbnz	r4, 80081ca <_malloc_r+0x56>
 80081a2:	4f20      	ldr	r7, [pc, #128]	; (8008224 <_malloc_r+0xb0>)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	b923      	cbnz	r3, 80081b2 <_malloc_r+0x3e>
 80081a8:	4621      	mov	r1, r4
 80081aa:	4630      	mov	r0, r6
 80081ac:	f000 f996 	bl	80084dc <_sbrk_r>
 80081b0:	6038      	str	r0, [r7, #0]
 80081b2:	4629      	mov	r1, r5
 80081b4:	4630      	mov	r0, r6
 80081b6:	f000 f991 	bl	80084dc <_sbrk_r>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	d123      	bne.n	8008206 <_malloc_r+0x92>
 80081be:	230c      	movs	r3, #12
 80081c0:	6033      	str	r3, [r6, #0]
 80081c2:	4630      	mov	r0, r6
 80081c4:	f000 fc40 	bl	8008a48 <__malloc_unlock>
 80081c8:	e7e3      	b.n	8008192 <_malloc_r+0x1e>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	1b5b      	subs	r3, r3, r5
 80081ce:	d417      	bmi.n	8008200 <_malloc_r+0x8c>
 80081d0:	2b0b      	cmp	r3, #11
 80081d2:	d903      	bls.n	80081dc <_malloc_r+0x68>
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	441c      	add	r4, r3
 80081d8:	6025      	str	r5, [r4, #0]
 80081da:	e004      	b.n	80081e6 <_malloc_r+0x72>
 80081dc:	6863      	ldr	r3, [r4, #4]
 80081de:	42a2      	cmp	r2, r4
 80081e0:	bf0c      	ite	eq
 80081e2:	600b      	streq	r3, [r1, #0]
 80081e4:	6053      	strne	r3, [r2, #4]
 80081e6:	4630      	mov	r0, r6
 80081e8:	f000 fc2e 	bl	8008a48 <__malloc_unlock>
 80081ec:	f104 000b 	add.w	r0, r4, #11
 80081f0:	1d23      	adds	r3, r4, #4
 80081f2:	f020 0007 	bic.w	r0, r0, #7
 80081f6:	1ac2      	subs	r2, r0, r3
 80081f8:	d0cc      	beq.n	8008194 <_malloc_r+0x20>
 80081fa:	1a1b      	subs	r3, r3, r0
 80081fc:	50a3      	str	r3, [r4, r2]
 80081fe:	e7c9      	b.n	8008194 <_malloc_r+0x20>
 8008200:	4622      	mov	r2, r4
 8008202:	6864      	ldr	r4, [r4, #4]
 8008204:	e7cc      	b.n	80081a0 <_malloc_r+0x2c>
 8008206:	1cc4      	adds	r4, r0, #3
 8008208:	f024 0403 	bic.w	r4, r4, #3
 800820c:	42a0      	cmp	r0, r4
 800820e:	d0e3      	beq.n	80081d8 <_malloc_r+0x64>
 8008210:	1a21      	subs	r1, r4, r0
 8008212:	4630      	mov	r0, r6
 8008214:	f000 f962 	bl	80084dc <_sbrk_r>
 8008218:	3001      	adds	r0, #1
 800821a:	d1dd      	bne.n	80081d8 <_malloc_r+0x64>
 800821c:	e7cf      	b.n	80081be <_malloc_r+0x4a>
 800821e:	bf00      	nop
 8008220:	200001fc 	.word	0x200001fc
 8008224:	20000200 	.word	0x20000200

08008228 <__sfputc_r>:
 8008228:	6893      	ldr	r3, [r2, #8]
 800822a:	3b01      	subs	r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	b410      	push	{r4}
 8008230:	6093      	str	r3, [r2, #8]
 8008232:	da08      	bge.n	8008246 <__sfputc_r+0x1e>
 8008234:	6994      	ldr	r4, [r2, #24]
 8008236:	42a3      	cmp	r3, r4
 8008238:	db01      	blt.n	800823e <__sfputc_r+0x16>
 800823a:	290a      	cmp	r1, #10
 800823c:	d103      	bne.n	8008246 <__sfputc_r+0x1e>
 800823e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008242:	f000 b99f 	b.w	8008584 <__swbuf_r>
 8008246:	6813      	ldr	r3, [r2, #0]
 8008248:	1c58      	adds	r0, r3, #1
 800824a:	6010      	str	r0, [r2, #0]
 800824c:	7019      	strb	r1, [r3, #0]
 800824e:	4608      	mov	r0, r1
 8008250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008254:	4770      	bx	lr

08008256 <__sfputs_r>:
 8008256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008258:	4606      	mov	r6, r0
 800825a:	460f      	mov	r7, r1
 800825c:	4614      	mov	r4, r2
 800825e:	18d5      	adds	r5, r2, r3
 8008260:	42ac      	cmp	r4, r5
 8008262:	d101      	bne.n	8008268 <__sfputs_r+0x12>
 8008264:	2000      	movs	r0, #0
 8008266:	e007      	b.n	8008278 <__sfputs_r+0x22>
 8008268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800826c:	463a      	mov	r2, r7
 800826e:	4630      	mov	r0, r6
 8008270:	f7ff ffda 	bl	8008228 <__sfputc_r>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	d1f3      	bne.n	8008260 <__sfputs_r+0xa>
 8008278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800827c <_vfiprintf_r>:
 800827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008280:	460d      	mov	r5, r1
 8008282:	b09d      	sub	sp, #116	; 0x74
 8008284:	4614      	mov	r4, r2
 8008286:	4698      	mov	r8, r3
 8008288:	4606      	mov	r6, r0
 800828a:	b118      	cbz	r0, 8008294 <_vfiprintf_r+0x18>
 800828c:	6983      	ldr	r3, [r0, #24]
 800828e:	b90b      	cbnz	r3, 8008294 <_vfiprintf_r+0x18>
 8008290:	f7ff fad6 	bl	8007840 <__sinit>
 8008294:	4b89      	ldr	r3, [pc, #548]	; (80084bc <_vfiprintf_r+0x240>)
 8008296:	429d      	cmp	r5, r3
 8008298:	d11b      	bne.n	80082d2 <_vfiprintf_r+0x56>
 800829a:	6875      	ldr	r5, [r6, #4]
 800829c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800829e:	07d9      	lsls	r1, r3, #31
 80082a0:	d405      	bmi.n	80082ae <_vfiprintf_r+0x32>
 80082a2:	89ab      	ldrh	r3, [r5, #12]
 80082a4:	059a      	lsls	r2, r3, #22
 80082a6:	d402      	bmi.n	80082ae <_vfiprintf_r+0x32>
 80082a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082aa:	f7ff fb6c 	bl	8007986 <__retarget_lock_acquire_recursive>
 80082ae:	89ab      	ldrh	r3, [r5, #12]
 80082b0:	071b      	lsls	r3, r3, #28
 80082b2:	d501      	bpl.n	80082b8 <_vfiprintf_r+0x3c>
 80082b4:	692b      	ldr	r3, [r5, #16]
 80082b6:	b9eb      	cbnz	r3, 80082f4 <_vfiprintf_r+0x78>
 80082b8:	4629      	mov	r1, r5
 80082ba:	4630      	mov	r0, r6
 80082bc:	f000 f9c6 	bl	800864c <__swsetup_r>
 80082c0:	b1c0      	cbz	r0, 80082f4 <_vfiprintf_r+0x78>
 80082c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082c4:	07dc      	lsls	r4, r3, #31
 80082c6:	d50e      	bpl.n	80082e6 <_vfiprintf_r+0x6a>
 80082c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082cc:	b01d      	add	sp, #116	; 0x74
 80082ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d2:	4b7b      	ldr	r3, [pc, #492]	; (80084c0 <_vfiprintf_r+0x244>)
 80082d4:	429d      	cmp	r5, r3
 80082d6:	d101      	bne.n	80082dc <_vfiprintf_r+0x60>
 80082d8:	68b5      	ldr	r5, [r6, #8]
 80082da:	e7df      	b.n	800829c <_vfiprintf_r+0x20>
 80082dc:	4b79      	ldr	r3, [pc, #484]	; (80084c4 <_vfiprintf_r+0x248>)
 80082de:	429d      	cmp	r5, r3
 80082e0:	bf08      	it	eq
 80082e2:	68f5      	ldreq	r5, [r6, #12]
 80082e4:	e7da      	b.n	800829c <_vfiprintf_r+0x20>
 80082e6:	89ab      	ldrh	r3, [r5, #12]
 80082e8:	0598      	lsls	r0, r3, #22
 80082ea:	d4ed      	bmi.n	80082c8 <_vfiprintf_r+0x4c>
 80082ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ee:	f7ff fb4b 	bl	8007988 <__retarget_lock_release_recursive>
 80082f2:	e7e9      	b.n	80082c8 <_vfiprintf_r+0x4c>
 80082f4:	2300      	movs	r3, #0
 80082f6:	9309      	str	r3, [sp, #36]	; 0x24
 80082f8:	2320      	movs	r3, #32
 80082fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008302:	2330      	movs	r3, #48	; 0x30
 8008304:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80084c8 <_vfiprintf_r+0x24c>
 8008308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800830c:	f04f 0901 	mov.w	r9, #1
 8008310:	4623      	mov	r3, r4
 8008312:	469a      	mov	sl, r3
 8008314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008318:	b10a      	cbz	r2, 800831e <_vfiprintf_r+0xa2>
 800831a:	2a25      	cmp	r2, #37	; 0x25
 800831c:	d1f9      	bne.n	8008312 <_vfiprintf_r+0x96>
 800831e:	ebba 0b04 	subs.w	fp, sl, r4
 8008322:	d00b      	beq.n	800833c <_vfiprintf_r+0xc0>
 8008324:	465b      	mov	r3, fp
 8008326:	4622      	mov	r2, r4
 8008328:	4629      	mov	r1, r5
 800832a:	4630      	mov	r0, r6
 800832c:	f7ff ff93 	bl	8008256 <__sfputs_r>
 8008330:	3001      	adds	r0, #1
 8008332:	f000 80aa 	beq.w	800848a <_vfiprintf_r+0x20e>
 8008336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008338:	445a      	add	r2, fp
 800833a:	9209      	str	r2, [sp, #36]	; 0x24
 800833c:	f89a 3000 	ldrb.w	r3, [sl]
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 80a2 	beq.w	800848a <_vfiprintf_r+0x20e>
 8008346:	2300      	movs	r3, #0
 8008348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800834c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008350:	f10a 0a01 	add.w	sl, sl, #1
 8008354:	9304      	str	r3, [sp, #16]
 8008356:	9307      	str	r3, [sp, #28]
 8008358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800835c:	931a      	str	r3, [sp, #104]	; 0x68
 800835e:	4654      	mov	r4, sl
 8008360:	2205      	movs	r2, #5
 8008362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008366:	4858      	ldr	r0, [pc, #352]	; (80084c8 <_vfiprintf_r+0x24c>)
 8008368:	f7f7 ff3a 	bl	80001e0 <memchr>
 800836c:	9a04      	ldr	r2, [sp, #16]
 800836e:	b9d8      	cbnz	r0, 80083a8 <_vfiprintf_r+0x12c>
 8008370:	06d1      	lsls	r1, r2, #27
 8008372:	bf44      	itt	mi
 8008374:	2320      	movmi	r3, #32
 8008376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800837a:	0713      	lsls	r3, r2, #28
 800837c:	bf44      	itt	mi
 800837e:	232b      	movmi	r3, #43	; 0x2b
 8008380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008384:	f89a 3000 	ldrb.w	r3, [sl]
 8008388:	2b2a      	cmp	r3, #42	; 0x2a
 800838a:	d015      	beq.n	80083b8 <_vfiprintf_r+0x13c>
 800838c:	9a07      	ldr	r2, [sp, #28]
 800838e:	4654      	mov	r4, sl
 8008390:	2000      	movs	r0, #0
 8008392:	f04f 0c0a 	mov.w	ip, #10
 8008396:	4621      	mov	r1, r4
 8008398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800839c:	3b30      	subs	r3, #48	; 0x30
 800839e:	2b09      	cmp	r3, #9
 80083a0:	d94e      	bls.n	8008440 <_vfiprintf_r+0x1c4>
 80083a2:	b1b0      	cbz	r0, 80083d2 <_vfiprintf_r+0x156>
 80083a4:	9207      	str	r2, [sp, #28]
 80083a6:	e014      	b.n	80083d2 <_vfiprintf_r+0x156>
 80083a8:	eba0 0308 	sub.w	r3, r0, r8
 80083ac:	fa09 f303 	lsl.w	r3, r9, r3
 80083b0:	4313      	orrs	r3, r2
 80083b2:	9304      	str	r3, [sp, #16]
 80083b4:	46a2      	mov	sl, r4
 80083b6:	e7d2      	b.n	800835e <_vfiprintf_r+0xe2>
 80083b8:	9b03      	ldr	r3, [sp, #12]
 80083ba:	1d19      	adds	r1, r3, #4
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	9103      	str	r1, [sp, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	bfbb      	ittet	lt
 80083c4:	425b      	neglt	r3, r3
 80083c6:	f042 0202 	orrlt.w	r2, r2, #2
 80083ca:	9307      	strge	r3, [sp, #28]
 80083cc:	9307      	strlt	r3, [sp, #28]
 80083ce:	bfb8      	it	lt
 80083d0:	9204      	strlt	r2, [sp, #16]
 80083d2:	7823      	ldrb	r3, [r4, #0]
 80083d4:	2b2e      	cmp	r3, #46	; 0x2e
 80083d6:	d10c      	bne.n	80083f2 <_vfiprintf_r+0x176>
 80083d8:	7863      	ldrb	r3, [r4, #1]
 80083da:	2b2a      	cmp	r3, #42	; 0x2a
 80083dc:	d135      	bne.n	800844a <_vfiprintf_r+0x1ce>
 80083de:	9b03      	ldr	r3, [sp, #12]
 80083e0:	1d1a      	adds	r2, r3, #4
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	9203      	str	r2, [sp, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	bfb8      	it	lt
 80083ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80083ee:	3402      	adds	r4, #2
 80083f0:	9305      	str	r3, [sp, #20]
 80083f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80084d8 <_vfiprintf_r+0x25c>
 80083f6:	7821      	ldrb	r1, [r4, #0]
 80083f8:	2203      	movs	r2, #3
 80083fa:	4650      	mov	r0, sl
 80083fc:	f7f7 fef0 	bl	80001e0 <memchr>
 8008400:	b140      	cbz	r0, 8008414 <_vfiprintf_r+0x198>
 8008402:	2340      	movs	r3, #64	; 0x40
 8008404:	eba0 000a 	sub.w	r0, r0, sl
 8008408:	fa03 f000 	lsl.w	r0, r3, r0
 800840c:	9b04      	ldr	r3, [sp, #16]
 800840e:	4303      	orrs	r3, r0
 8008410:	3401      	adds	r4, #1
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008418:	482c      	ldr	r0, [pc, #176]	; (80084cc <_vfiprintf_r+0x250>)
 800841a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800841e:	2206      	movs	r2, #6
 8008420:	f7f7 fede 	bl	80001e0 <memchr>
 8008424:	2800      	cmp	r0, #0
 8008426:	d03f      	beq.n	80084a8 <_vfiprintf_r+0x22c>
 8008428:	4b29      	ldr	r3, [pc, #164]	; (80084d0 <_vfiprintf_r+0x254>)
 800842a:	bb1b      	cbnz	r3, 8008474 <_vfiprintf_r+0x1f8>
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	3307      	adds	r3, #7
 8008430:	f023 0307 	bic.w	r3, r3, #7
 8008434:	3308      	adds	r3, #8
 8008436:	9303      	str	r3, [sp, #12]
 8008438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843a:	443b      	add	r3, r7
 800843c:	9309      	str	r3, [sp, #36]	; 0x24
 800843e:	e767      	b.n	8008310 <_vfiprintf_r+0x94>
 8008440:	fb0c 3202 	mla	r2, ip, r2, r3
 8008444:	460c      	mov	r4, r1
 8008446:	2001      	movs	r0, #1
 8008448:	e7a5      	b.n	8008396 <_vfiprintf_r+0x11a>
 800844a:	2300      	movs	r3, #0
 800844c:	3401      	adds	r4, #1
 800844e:	9305      	str	r3, [sp, #20]
 8008450:	4619      	mov	r1, r3
 8008452:	f04f 0c0a 	mov.w	ip, #10
 8008456:	4620      	mov	r0, r4
 8008458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800845c:	3a30      	subs	r2, #48	; 0x30
 800845e:	2a09      	cmp	r2, #9
 8008460:	d903      	bls.n	800846a <_vfiprintf_r+0x1ee>
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0c5      	beq.n	80083f2 <_vfiprintf_r+0x176>
 8008466:	9105      	str	r1, [sp, #20]
 8008468:	e7c3      	b.n	80083f2 <_vfiprintf_r+0x176>
 800846a:	fb0c 2101 	mla	r1, ip, r1, r2
 800846e:	4604      	mov	r4, r0
 8008470:	2301      	movs	r3, #1
 8008472:	e7f0      	b.n	8008456 <_vfiprintf_r+0x1da>
 8008474:	ab03      	add	r3, sp, #12
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	462a      	mov	r2, r5
 800847a:	4b16      	ldr	r3, [pc, #88]	; (80084d4 <_vfiprintf_r+0x258>)
 800847c:	a904      	add	r1, sp, #16
 800847e:	4630      	mov	r0, r6
 8008480:	f7fd ff2c 	bl	80062dc <_printf_float>
 8008484:	4607      	mov	r7, r0
 8008486:	1c78      	adds	r0, r7, #1
 8008488:	d1d6      	bne.n	8008438 <_vfiprintf_r+0x1bc>
 800848a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800848c:	07d9      	lsls	r1, r3, #31
 800848e:	d405      	bmi.n	800849c <_vfiprintf_r+0x220>
 8008490:	89ab      	ldrh	r3, [r5, #12]
 8008492:	059a      	lsls	r2, r3, #22
 8008494:	d402      	bmi.n	800849c <_vfiprintf_r+0x220>
 8008496:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008498:	f7ff fa76 	bl	8007988 <__retarget_lock_release_recursive>
 800849c:	89ab      	ldrh	r3, [r5, #12]
 800849e:	065b      	lsls	r3, r3, #25
 80084a0:	f53f af12 	bmi.w	80082c8 <_vfiprintf_r+0x4c>
 80084a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084a6:	e711      	b.n	80082cc <_vfiprintf_r+0x50>
 80084a8:	ab03      	add	r3, sp, #12
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	462a      	mov	r2, r5
 80084ae:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <_vfiprintf_r+0x258>)
 80084b0:	a904      	add	r1, sp, #16
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7fe f9b6 	bl	8006824 <_printf_i>
 80084b8:	e7e4      	b.n	8008484 <_vfiprintf_r+0x208>
 80084ba:	bf00      	nop
 80084bc:	08008cd4 	.word	0x08008cd4
 80084c0:	08008cf4 	.word	0x08008cf4
 80084c4:	08008cb4 	.word	0x08008cb4
 80084c8:	08008e74 	.word	0x08008e74
 80084cc:	08008e7e 	.word	0x08008e7e
 80084d0:	080062dd 	.word	0x080062dd
 80084d4:	08008257 	.word	0x08008257
 80084d8:	08008e7a 	.word	0x08008e7a

080084dc <_sbrk_r>:
 80084dc:	b538      	push	{r3, r4, r5, lr}
 80084de:	4d06      	ldr	r5, [pc, #24]	; (80084f8 <_sbrk_r+0x1c>)
 80084e0:	2300      	movs	r3, #0
 80084e2:	4604      	mov	r4, r0
 80084e4:	4608      	mov	r0, r1
 80084e6:	602b      	str	r3, [r5, #0]
 80084e8:	f7f9 fa18 	bl	800191c <_sbrk>
 80084ec:	1c43      	adds	r3, r0, #1
 80084ee:	d102      	bne.n	80084f6 <_sbrk_r+0x1a>
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	b103      	cbz	r3, 80084f6 <_sbrk_r+0x1a>
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	bd38      	pop	{r3, r4, r5, pc}
 80084f8:	20000394 	.word	0x20000394

080084fc <__sread>:
 80084fc:	b510      	push	{r4, lr}
 80084fe:	460c      	mov	r4, r1
 8008500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008504:	f000 faa6 	bl	8008a54 <_read_r>
 8008508:	2800      	cmp	r0, #0
 800850a:	bfab      	itete	ge
 800850c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800850e:	89a3      	ldrhlt	r3, [r4, #12]
 8008510:	181b      	addge	r3, r3, r0
 8008512:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008516:	bfac      	ite	ge
 8008518:	6563      	strge	r3, [r4, #84]	; 0x54
 800851a:	81a3      	strhlt	r3, [r4, #12]
 800851c:	bd10      	pop	{r4, pc}

0800851e <__swrite>:
 800851e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008522:	461f      	mov	r7, r3
 8008524:	898b      	ldrh	r3, [r1, #12]
 8008526:	05db      	lsls	r3, r3, #23
 8008528:	4605      	mov	r5, r0
 800852a:	460c      	mov	r4, r1
 800852c:	4616      	mov	r6, r2
 800852e:	d505      	bpl.n	800853c <__swrite+0x1e>
 8008530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008534:	2302      	movs	r3, #2
 8008536:	2200      	movs	r2, #0
 8008538:	f000 f9f8 	bl	800892c <_lseek_r>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	4632      	mov	r2, r6
 800854a:	463b      	mov	r3, r7
 800854c:	4628      	mov	r0, r5
 800854e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008552:	f000 b869 	b.w	8008628 <_write_r>

08008556 <__sseek>:
 8008556:	b510      	push	{r4, lr}
 8008558:	460c      	mov	r4, r1
 800855a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800855e:	f000 f9e5 	bl	800892c <_lseek_r>
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	bf15      	itete	ne
 8008568:	6560      	strne	r0, [r4, #84]	; 0x54
 800856a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800856e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008572:	81a3      	strheq	r3, [r4, #12]
 8008574:	bf18      	it	ne
 8008576:	81a3      	strhne	r3, [r4, #12]
 8008578:	bd10      	pop	{r4, pc}

0800857a <__sclose>:
 800857a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800857e:	f000 b8f1 	b.w	8008764 <_close_r>
	...

08008584 <__swbuf_r>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	460e      	mov	r6, r1
 8008588:	4614      	mov	r4, r2
 800858a:	4605      	mov	r5, r0
 800858c:	b118      	cbz	r0, 8008596 <__swbuf_r+0x12>
 800858e:	6983      	ldr	r3, [r0, #24]
 8008590:	b90b      	cbnz	r3, 8008596 <__swbuf_r+0x12>
 8008592:	f7ff f955 	bl	8007840 <__sinit>
 8008596:	4b21      	ldr	r3, [pc, #132]	; (800861c <__swbuf_r+0x98>)
 8008598:	429c      	cmp	r4, r3
 800859a:	d12b      	bne.n	80085f4 <__swbuf_r+0x70>
 800859c:	686c      	ldr	r4, [r5, #4]
 800859e:	69a3      	ldr	r3, [r4, #24]
 80085a0:	60a3      	str	r3, [r4, #8]
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	071a      	lsls	r2, r3, #28
 80085a6:	d52f      	bpl.n	8008608 <__swbuf_r+0x84>
 80085a8:	6923      	ldr	r3, [r4, #16]
 80085aa:	b36b      	cbz	r3, 8008608 <__swbuf_r+0x84>
 80085ac:	6923      	ldr	r3, [r4, #16]
 80085ae:	6820      	ldr	r0, [r4, #0]
 80085b0:	1ac0      	subs	r0, r0, r3
 80085b2:	6963      	ldr	r3, [r4, #20]
 80085b4:	b2f6      	uxtb	r6, r6
 80085b6:	4283      	cmp	r3, r0
 80085b8:	4637      	mov	r7, r6
 80085ba:	dc04      	bgt.n	80085c6 <__swbuf_r+0x42>
 80085bc:	4621      	mov	r1, r4
 80085be:	4628      	mov	r0, r5
 80085c0:	f000 f966 	bl	8008890 <_fflush_r>
 80085c4:	bb30      	cbnz	r0, 8008614 <__swbuf_r+0x90>
 80085c6:	68a3      	ldr	r3, [r4, #8]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	60a3      	str	r3, [r4, #8]
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	6022      	str	r2, [r4, #0]
 80085d2:	701e      	strb	r6, [r3, #0]
 80085d4:	6963      	ldr	r3, [r4, #20]
 80085d6:	3001      	adds	r0, #1
 80085d8:	4283      	cmp	r3, r0
 80085da:	d004      	beq.n	80085e6 <__swbuf_r+0x62>
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	07db      	lsls	r3, r3, #31
 80085e0:	d506      	bpl.n	80085f0 <__swbuf_r+0x6c>
 80085e2:	2e0a      	cmp	r6, #10
 80085e4:	d104      	bne.n	80085f0 <__swbuf_r+0x6c>
 80085e6:	4621      	mov	r1, r4
 80085e8:	4628      	mov	r0, r5
 80085ea:	f000 f951 	bl	8008890 <_fflush_r>
 80085ee:	b988      	cbnz	r0, 8008614 <__swbuf_r+0x90>
 80085f0:	4638      	mov	r0, r7
 80085f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f4:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <__swbuf_r+0x9c>)
 80085f6:	429c      	cmp	r4, r3
 80085f8:	d101      	bne.n	80085fe <__swbuf_r+0x7a>
 80085fa:	68ac      	ldr	r4, [r5, #8]
 80085fc:	e7cf      	b.n	800859e <__swbuf_r+0x1a>
 80085fe:	4b09      	ldr	r3, [pc, #36]	; (8008624 <__swbuf_r+0xa0>)
 8008600:	429c      	cmp	r4, r3
 8008602:	bf08      	it	eq
 8008604:	68ec      	ldreq	r4, [r5, #12]
 8008606:	e7ca      	b.n	800859e <__swbuf_r+0x1a>
 8008608:	4621      	mov	r1, r4
 800860a:	4628      	mov	r0, r5
 800860c:	f000 f81e 	bl	800864c <__swsetup_r>
 8008610:	2800      	cmp	r0, #0
 8008612:	d0cb      	beq.n	80085ac <__swbuf_r+0x28>
 8008614:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008618:	e7ea      	b.n	80085f0 <__swbuf_r+0x6c>
 800861a:	bf00      	nop
 800861c:	08008cd4 	.word	0x08008cd4
 8008620:	08008cf4 	.word	0x08008cf4
 8008624:	08008cb4 	.word	0x08008cb4

08008628 <_write_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4d07      	ldr	r5, [pc, #28]	; (8008648 <_write_r+0x20>)
 800862c:	4604      	mov	r4, r0
 800862e:	4608      	mov	r0, r1
 8008630:	4611      	mov	r1, r2
 8008632:	2200      	movs	r2, #0
 8008634:	602a      	str	r2, [r5, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	f7f9 f91f 	bl	800187a <_write>
 800863c:	1c43      	adds	r3, r0, #1
 800863e:	d102      	bne.n	8008646 <_write_r+0x1e>
 8008640:	682b      	ldr	r3, [r5, #0]
 8008642:	b103      	cbz	r3, 8008646 <_write_r+0x1e>
 8008644:	6023      	str	r3, [r4, #0]
 8008646:	bd38      	pop	{r3, r4, r5, pc}
 8008648:	20000394 	.word	0x20000394

0800864c <__swsetup_r>:
 800864c:	4b32      	ldr	r3, [pc, #200]	; (8008718 <__swsetup_r+0xcc>)
 800864e:	b570      	push	{r4, r5, r6, lr}
 8008650:	681d      	ldr	r5, [r3, #0]
 8008652:	4606      	mov	r6, r0
 8008654:	460c      	mov	r4, r1
 8008656:	b125      	cbz	r5, 8008662 <__swsetup_r+0x16>
 8008658:	69ab      	ldr	r3, [r5, #24]
 800865a:	b913      	cbnz	r3, 8008662 <__swsetup_r+0x16>
 800865c:	4628      	mov	r0, r5
 800865e:	f7ff f8ef 	bl	8007840 <__sinit>
 8008662:	4b2e      	ldr	r3, [pc, #184]	; (800871c <__swsetup_r+0xd0>)
 8008664:	429c      	cmp	r4, r3
 8008666:	d10f      	bne.n	8008688 <__swsetup_r+0x3c>
 8008668:	686c      	ldr	r4, [r5, #4]
 800866a:	89a3      	ldrh	r3, [r4, #12]
 800866c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008670:	0719      	lsls	r1, r3, #28
 8008672:	d42c      	bmi.n	80086ce <__swsetup_r+0x82>
 8008674:	06dd      	lsls	r5, r3, #27
 8008676:	d411      	bmi.n	800869c <__swsetup_r+0x50>
 8008678:	2309      	movs	r3, #9
 800867a:	6033      	str	r3, [r6, #0]
 800867c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008680:	81a3      	strh	r3, [r4, #12]
 8008682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008686:	e03e      	b.n	8008706 <__swsetup_r+0xba>
 8008688:	4b25      	ldr	r3, [pc, #148]	; (8008720 <__swsetup_r+0xd4>)
 800868a:	429c      	cmp	r4, r3
 800868c:	d101      	bne.n	8008692 <__swsetup_r+0x46>
 800868e:	68ac      	ldr	r4, [r5, #8]
 8008690:	e7eb      	b.n	800866a <__swsetup_r+0x1e>
 8008692:	4b24      	ldr	r3, [pc, #144]	; (8008724 <__swsetup_r+0xd8>)
 8008694:	429c      	cmp	r4, r3
 8008696:	bf08      	it	eq
 8008698:	68ec      	ldreq	r4, [r5, #12]
 800869a:	e7e6      	b.n	800866a <__swsetup_r+0x1e>
 800869c:	0758      	lsls	r0, r3, #29
 800869e:	d512      	bpl.n	80086c6 <__swsetup_r+0x7a>
 80086a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086a2:	b141      	cbz	r1, 80086b6 <__swsetup_r+0x6a>
 80086a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086a8:	4299      	cmp	r1, r3
 80086aa:	d002      	beq.n	80086b2 <__swsetup_r+0x66>
 80086ac:	4630      	mov	r0, r6
 80086ae:	f7ff fd11 	bl	80080d4 <_free_r>
 80086b2:	2300      	movs	r3, #0
 80086b4:	6363      	str	r3, [r4, #52]	; 0x34
 80086b6:	89a3      	ldrh	r3, [r4, #12]
 80086b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086bc:	81a3      	strh	r3, [r4, #12]
 80086be:	2300      	movs	r3, #0
 80086c0:	6063      	str	r3, [r4, #4]
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	f043 0308 	orr.w	r3, r3, #8
 80086cc:	81a3      	strh	r3, [r4, #12]
 80086ce:	6923      	ldr	r3, [r4, #16]
 80086d0:	b94b      	cbnz	r3, 80086e6 <__swsetup_r+0x9a>
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086dc:	d003      	beq.n	80086e6 <__swsetup_r+0x9a>
 80086de:	4621      	mov	r1, r4
 80086e0:	4630      	mov	r0, r6
 80086e2:	f000 f959 	bl	8008998 <__smakebuf_r>
 80086e6:	89a0      	ldrh	r0, [r4, #12]
 80086e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086ec:	f010 0301 	ands.w	r3, r0, #1
 80086f0:	d00a      	beq.n	8008708 <__swsetup_r+0xbc>
 80086f2:	2300      	movs	r3, #0
 80086f4:	60a3      	str	r3, [r4, #8]
 80086f6:	6963      	ldr	r3, [r4, #20]
 80086f8:	425b      	negs	r3, r3
 80086fa:	61a3      	str	r3, [r4, #24]
 80086fc:	6923      	ldr	r3, [r4, #16]
 80086fe:	b943      	cbnz	r3, 8008712 <__swsetup_r+0xc6>
 8008700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008704:	d1ba      	bne.n	800867c <__swsetup_r+0x30>
 8008706:	bd70      	pop	{r4, r5, r6, pc}
 8008708:	0781      	lsls	r1, r0, #30
 800870a:	bf58      	it	pl
 800870c:	6963      	ldrpl	r3, [r4, #20]
 800870e:	60a3      	str	r3, [r4, #8]
 8008710:	e7f4      	b.n	80086fc <__swsetup_r+0xb0>
 8008712:	2000      	movs	r0, #0
 8008714:	e7f7      	b.n	8008706 <__swsetup_r+0xba>
 8008716:	bf00      	nop
 8008718:	2000000c 	.word	0x2000000c
 800871c:	08008cd4 	.word	0x08008cd4
 8008720:	08008cf4 	.word	0x08008cf4
 8008724:	08008cb4 	.word	0x08008cb4

08008728 <__assert_func>:
 8008728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800872a:	4614      	mov	r4, r2
 800872c:	461a      	mov	r2, r3
 800872e:	4b09      	ldr	r3, [pc, #36]	; (8008754 <__assert_func+0x2c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4605      	mov	r5, r0
 8008734:	68d8      	ldr	r0, [r3, #12]
 8008736:	b14c      	cbz	r4, 800874c <__assert_func+0x24>
 8008738:	4b07      	ldr	r3, [pc, #28]	; (8008758 <__assert_func+0x30>)
 800873a:	9100      	str	r1, [sp, #0]
 800873c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008740:	4906      	ldr	r1, [pc, #24]	; (800875c <__assert_func+0x34>)
 8008742:	462b      	mov	r3, r5
 8008744:	f000 f8e0 	bl	8008908 <fiprintf>
 8008748:	f000 f9a3 	bl	8008a92 <abort>
 800874c:	4b04      	ldr	r3, [pc, #16]	; (8008760 <__assert_func+0x38>)
 800874e:	461c      	mov	r4, r3
 8008750:	e7f3      	b.n	800873a <__assert_func+0x12>
 8008752:	bf00      	nop
 8008754:	2000000c 	.word	0x2000000c
 8008758:	08008e85 	.word	0x08008e85
 800875c:	08008e92 	.word	0x08008e92
 8008760:	08008ec0 	.word	0x08008ec0

08008764 <_close_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	4d06      	ldr	r5, [pc, #24]	; (8008780 <_close_r+0x1c>)
 8008768:	2300      	movs	r3, #0
 800876a:	4604      	mov	r4, r0
 800876c:	4608      	mov	r0, r1
 800876e:	602b      	str	r3, [r5, #0]
 8008770:	f7f9 f89f 	bl	80018b2 <_close>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	d102      	bne.n	800877e <_close_r+0x1a>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	b103      	cbz	r3, 800877e <_close_r+0x1a>
 800877c:	6023      	str	r3, [r4, #0]
 800877e:	bd38      	pop	{r3, r4, r5, pc}
 8008780:	20000394 	.word	0x20000394

08008784 <__sflush_r>:
 8008784:	898a      	ldrh	r2, [r1, #12]
 8008786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800878a:	4605      	mov	r5, r0
 800878c:	0710      	lsls	r0, r2, #28
 800878e:	460c      	mov	r4, r1
 8008790:	d458      	bmi.n	8008844 <__sflush_r+0xc0>
 8008792:	684b      	ldr	r3, [r1, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	dc05      	bgt.n	80087a4 <__sflush_r+0x20>
 8008798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800879a:	2b00      	cmp	r3, #0
 800879c:	dc02      	bgt.n	80087a4 <__sflush_r+0x20>
 800879e:	2000      	movs	r0, #0
 80087a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087a6:	2e00      	cmp	r6, #0
 80087a8:	d0f9      	beq.n	800879e <__sflush_r+0x1a>
 80087aa:	2300      	movs	r3, #0
 80087ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087b0:	682f      	ldr	r7, [r5, #0]
 80087b2:	602b      	str	r3, [r5, #0]
 80087b4:	d032      	beq.n	800881c <__sflush_r+0x98>
 80087b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087b8:	89a3      	ldrh	r3, [r4, #12]
 80087ba:	075a      	lsls	r2, r3, #29
 80087bc:	d505      	bpl.n	80087ca <__sflush_r+0x46>
 80087be:	6863      	ldr	r3, [r4, #4]
 80087c0:	1ac0      	subs	r0, r0, r3
 80087c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087c4:	b10b      	cbz	r3, 80087ca <__sflush_r+0x46>
 80087c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087c8:	1ac0      	subs	r0, r0, r3
 80087ca:	2300      	movs	r3, #0
 80087cc:	4602      	mov	r2, r0
 80087ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087d0:	6a21      	ldr	r1, [r4, #32]
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b0      	blx	r6
 80087d6:	1c43      	adds	r3, r0, #1
 80087d8:	89a3      	ldrh	r3, [r4, #12]
 80087da:	d106      	bne.n	80087ea <__sflush_r+0x66>
 80087dc:	6829      	ldr	r1, [r5, #0]
 80087de:	291d      	cmp	r1, #29
 80087e0:	d82c      	bhi.n	800883c <__sflush_r+0xb8>
 80087e2:	4a2a      	ldr	r2, [pc, #168]	; (800888c <__sflush_r+0x108>)
 80087e4:	40ca      	lsrs	r2, r1
 80087e6:	07d6      	lsls	r6, r2, #31
 80087e8:	d528      	bpl.n	800883c <__sflush_r+0xb8>
 80087ea:	2200      	movs	r2, #0
 80087ec:	6062      	str	r2, [r4, #4]
 80087ee:	04d9      	lsls	r1, r3, #19
 80087f0:	6922      	ldr	r2, [r4, #16]
 80087f2:	6022      	str	r2, [r4, #0]
 80087f4:	d504      	bpl.n	8008800 <__sflush_r+0x7c>
 80087f6:	1c42      	adds	r2, r0, #1
 80087f8:	d101      	bne.n	80087fe <__sflush_r+0x7a>
 80087fa:	682b      	ldr	r3, [r5, #0]
 80087fc:	b903      	cbnz	r3, 8008800 <__sflush_r+0x7c>
 80087fe:	6560      	str	r0, [r4, #84]	; 0x54
 8008800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008802:	602f      	str	r7, [r5, #0]
 8008804:	2900      	cmp	r1, #0
 8008806:	d0ca      	beq.n	800879e <__sflush_r+0x1a>
 8008808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800880c:	4299      	cmp	r1, r3
 800880e:	d002      	beq.n	8008816 <__sflush_r+0x92>
 8008810:	4628      	mov	r0, r5
 8008812:	f7ff fc5f 	bl	80080d4 <_free_r>
 8008816:	2000      	movs	r0, #0
 8008818:	6360      	str	r0, [r4, #52]	; 0x34
 800881a:	e7c1      	b.n	80087a0 <__sflush_r+0x1c>
 800881c:	6a21      	ldr	r1, [r4, #32]
 800881e:	2301      	movs	r3, #1
 8008820:	4628      	mov	r0, r5
 8008822:	47b0      	blx	r6
 8008824:	1c41      	adds	r1, r0, #1
 8008826:	d1c7      	bne.n	80087b8 <__sflush_r+0x34>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0c4      	beq.n	80087b8 <__sflush_r+0x34>
 800882e:	2b1d      	cmp	r3, #29
 8008830:	d001      	beq.n	8008836 <__sflush_r+0xb2>
 8008832:	2b16      	cmp	r3, #22
 8008834:	d101      	bne.n	800883a <__sflush_r+0xb6>
 8008836:	602f      	str	r7, [r5, #0]
 8008838:	e7b1      	b.n	800879e <__sflush_r+0x1a>
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	e7ad      	b.n	80087a0 <__sflush_r+0x1c>
 8008844:	690f      	ldr	r7, [r1, #16]
 8008846:	2f00      	cmp	r7, #0
 8008848:	d0a9      	beq.n	800879e <__sflush_r+0x1a>
 800884a:	0793      	lsls	r3, r2, #30
 800884c:	680e      	ldr	r6, [r1, #0]
 800884e:	bf08      	it	eq
 8008850:	694b      	ldreq	r3, [r1, #20]
 8008852:	600f      	str	r7, [r1, #0]
 8008854:	bf18      	it	ne
 8008856:	2300      	movne	r3, #0
 8008858:	eba6 0807 	sub.w	r8, r6, r7
 800885c:	608b      	str	r3, [r1, #8]
 800885e:	f1b8 0f00 	cmp.w	r8, #0
 8008862:	dd9c      	ble.n	800879e <__sflush_r+0x1a>
 8008864:	6a21      	ldr	r1, [r4, #32]
 8008866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008868:	4643      	mov	r3, r8
 800886a:	463a      	mov	r2, r7
 800886c:	4628      	mov	r0, r5
 800886e:	47b0      	blx	r6
 8008870:	2800      	cmp	r0, #0
 8008872:	dc06      	bgt.n	8008882 <__sflush_r+0xfe>
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800887a:	81a3      	strh	r3, [r4, #12]
 800887c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008880:	e78e      	b.n	80087a0 <__sflush_r+0x1c>
 8008882:	4407      	add	r7, r0
 8008884:	eba8 0800 	sub.w	r8, r8, r0
 8008888:	e7e9      	b.n	800885e <__sflush_r+0xda>
 800888a:	bf00      	nop
 800888c:	20400001 	.word	0x20400001

08008890 <_fflush_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	690b      	ldr	r3, [r1, #16]
 8008894:	4605      	mov	r5, r0
 8008896:	460c      	mov	r4, r1
 8008898:	b913      	cbnz	r3, 80088a0 <_fflush_r+0x10>
 800889a:	2500      	movs	r5, #0
 800889c:	4628      	mov	r0, r5
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	b118      	cbz	r0, 80088aa <_fflush_r+0x1a>
 80088a2:	6983      	ldr	r3, [r0, #24]
 80088a4:	b90b      	cbnz	r3, 80088aa <_fflush_r+0x1a>
 80088a6:	f7fe ffcb 	bl	8007840 <__sinit>
 80088aa:	4b14      	ldr	r3, [pc, #80]	; (80088fc <_fflush_r+0x6c>)
 80088ac:	429c      	cmp	r4, r3
 80088ae:	d11b      	bne.n	80088e8 <_fflush_r+0x58>
 80088b0:	686c      	ldr	r4, [r5, #4]
 80088b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0ef      	beq.n	800889a <_fflush_r+0xa>
 80088ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088bc:	07d0      	lsls	r0, r2, #31
 80088be:	d404      	bmi.n	80088ca <_fflush_r+0x3a>
 80088c0:	0599      	lsls	r1, r3, #22
 80088c2:	d402      	bmi.n	80088ca <_fflush_r+0x3a>
 80088c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088c6:	f7ff f85e 	bl	8007986 <__retarget_lock_acquire_recursive>
 80088ca:	4628      	mov	r0, r5
 80088cc:	4621      	mov	r1, r4
 80088ce:	f7ff ff59 	bl	8008784 <__sflush_r>
 80088d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088d4:	07da      	lsls	r2, r3, #31
 80088d6:	4605      	mov	r5, r0
 80088d8:	d4e0      	bmi.n	800889c <_fflush_r+0xc>
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	059b      	lsls	r3, r3, #22
 80088de:	d4dd      	bmi.n	800889c <_fflush_r+0xc>
 80088e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088e2:	f7ff f851 	bl	8007988 <__retarget_lock_release_recursive>
 80088e6:	e7d9      	b.n	800889c <_fflush_r+0xc>
 80088e8:	4b05      	ldr	r3, [pc, #20]	; (8008900 <_fflush_r+0x70>)
 80088ea:	429c      	cmp	r4, r3
 80088ec:	d101      	bne.n	80088f2 <_fflush_r+0x62>
 80088ee:	68ac      	ldr	r4, [r5, #8]
 80088f0:	e7df      	b.n	80088b2 <_fflush_r+0x22>
 80088f2:	4b04      	ldr	r3, [pc, #16]	; (8008904 <_fflush_r+0x74>)
 80088f4:	429c      	cmp	r4, r3
 80088f6:	bf08      	it	eq
 80088f8:	68ec      	ldreq	r4, [r5, #12]
 80088fa:	e7da      	b.n	80088b2 <_fflush_r+0x22>
 80088fc:	08008cd4 	.word	0x08008cd4
 8008900:	08008cf4 	.word	0x08008cf4
 8008904:	08008cb4 	.word	0x08008cb4

08008908 <fiprintf>:
 8008908:	b40e      	push	{r1, r2, r3}
 800890a:	b503      	push	{r0, r1, lr}
 800890c:	4601      	mov	r1, r0
 800890e:	ab03      	add	r3, sp, #12
 8008910:	4805      	ldr	r0, [pc, #20]	; (8008928 <fiprintf+0x20>)
 8008912:	f853 2b04 	ldr.w	r2, [r3], #4
 8008916:	6800      	ldr	r0, [r0, #0]
 8008918:	9301      	str	r3, [sp, #4]
 800891a:	f7ff fcaf 	bl	800827c <_vfiprintf_r>
 800891e:	b002      	add	sp, #8
 8008920:	f85d eb04 	ldr.w	lr, [sp], #4
 8008924:	b003      	add	sp, #12
 8008926:	4770      	bx	lr
 8008928:	2000000c 	.word	0x2000000c

0800892c <_lseek_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4d07      	ldr	r5, [pc, #28]	; (800894c <_lseek_r+0x20>)
 8008930:	4604      	mov	r4, r0
 8008932:	4608      	mov	r0, r1
 8008934:	4611      	mov	r1, r2
 8008936:	2200      	movs	r2, #0
 8008938:	602a      	str	r2, [r5, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	f7f8 ffe0 	bl	8001900 <_lseek>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d102      	bne.n	800894a <_lseek_r+0x1e>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	b103      	cbz	r3, 800894a <_lseek_r+0x1e>
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	20000394 	.word	0x20000394

08008950 <__swhatbuf_r>:
 8008950:	b570      	push	{r4, r5, r6, lr}
 8008952:	460e      	mov	r6, r1
 8008954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008958:	2900      	cmp	r1, #0
 800895a:	b096      	sub	sp, #88	; 0x58
 800895c:	4614      	mov	r4, r2
 800895e:	461d      	mov	r5, r3
 8008960:	da07      	bge.n	8008972 <__swhatbuf_r+0x22>
 8008962:	2300      	movs	r3, #0
 8008964:	602b      	str	r3, [r5, #0]
 8008966:	89b3      	ldrh	r3, [r6, #12]
 8008968:	061a      	lsls	r2, r3, #24
 800896a:	d410      	bmi.n	800898e <__swhatbuf_r+0x3e>
 800896c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008970:	e00e      	b.n	8008990 <__swhatbuf_r+0x40>
 8008972:	466a      	mov	r2, sp
 8008974:	f000 f894 	bl	8008aa0 <_fstat_r>
 8008978:	2800      	cmp	r0, #0
 800897a:	dbf2      	blt.n	8008962 <__swhatbuf_r+0x12>
 800897c:	9a01      	ldr	r2, [sp, #4]
 800897e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008982:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008986:	425a      	negs	r2, r3
 8008988:	415a      	adcs	r2, r3
 800898a:	602a      	str	r2, [r5, #0]
 800898c:	e7ee      	b.n	800896c <__swhatbuf_r+0x1c>
 800898e:	2340      	movs	r3, #64	; 0x40
 8008990:	2000      	movs	r0, #0
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	b016      	add	sp, #88	; 0x58
 8008996:	bd70      	pop	{r4, r5, r6, pc}

08008998 <__smakebuf_r>:
 8008998:	898b      	ldrh	r3, [r1, #12]
 800899a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800899c:	079d      	lsls	r5, r3, #30
 800899e:	4606      	mov	r6, r0
 80089a0:	460c      	mov	r4, r1
 80089a2:	d507      	bpl.n	80089b4 <__smakebuf_r+0x1c>
 80089a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	6123      	str	r3, [r4, #16]
 80089ac:	2301      	movs	r3, #1
 80089ae:	6163      	str	r3, [r4, #20]
 80089b0:	b002      	add	sp, #8
 80089b2:	bd70      	pop	{r4, r5, r6, pc}
 80089b4:	ab01      	add	r3, sp, #4
 80089b6:	466a      	mov	r2, sp
 80089b8:	f7ff ffca 	bl	8008950 <__swhatbuf_r>
 80089bc:	9900      	ldr	r1, [sp, #0]
 80089be:	4605      	mov	r5, r0
 80089c0:	4630      	mov	r0, r6
 80089c2:	f7ff fbd7 	bl	8008174 <_malloc_r>
 80089c6:	b948      	cbnz	r0, 80089dc <__smakebuf_r+0x44>
 80089c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089cc:	059a      	lsls	r2, r3, #22
 80089ce:	d4ef      	bmi.n	80089b0 <__smakebuf_r+0x18>
 80089d0:	f023 0303 	bic.w	r3, r3, #3
 80089d4:	f043 0302 	orr.w	r3, r3, #2
 80089d8:	81a3      	strh	r3, [r4, #12]
 80089da:	e7e3      	b.n	80089a4 <__smakebuf_r+0xc>
 80089dc:	4b0d      	ldr	r3, [pc, #52]	; (8008a14 <__smakebuf_r+0x7c>)
 80089de:	62b3      	str	r3, [r6, #40]	; 0x28
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	6020      	str	r0, [r4, #0]
 80089e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e8:	81a3      	strh	r3, [r4, #12]
 80089ea:	9b00      	ldr	r3, [sp, #0]
 80089ec:	6163      	str	r3, [r4, #20]
 80089ee:	9b01      	ldr	r3, [sp, #4]
 80089f0:	6120      	str	r0, [r4, #16]
 80089f2:	b15b      	cbz	r3, 8008a0c <__smakebuf_r+0x74>
 80089f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089f8:	4630      	mov	r0, r6
 80089fa:	f000 f863 	bl	8008ac4 <_isatty_r>
 80089fe:	b128      	cbz	r0, 8008a0c <__smakebuf_r+0x74>
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	f023 0303 	bic.w	r3, r3, #3
 8008a06:	f043 0301 	orr.w	r3, r3, #1
 8008a0a:	81a3      	strh	r3, [r4, #12]
 8008a0c:	89a0      	ldrh	r0, [r4, #12]
 8008a0e:	4305      	orrs	r5, r0
 8008a10:	81a5      	strh	r5, [r4, #12]
 8008a12:	e7cd      	b.n	80089b0 <__smakebuf_r+0x18>
 8008a14:	080077d9 	.word	0x080077d9

08008a18 <__ascii_mbtowc>:
 8008a18:	b082      	sub	sp, #8
 8008a1a:	b901      	cbnz	r1, 8008a1e <__ascii_mbtowc+0x6>
 8008a1c:	a901      	add	r1, sp, #4
 8008a1e:	b142      	cbz	r2, 8008a32 <__ascii_mbtowc+0x1a>
 8008a20:	b14b      	cbz	r3, 8008a36 <__ascii_mbtowc+0x1e>
 8008a22:	7813      	ldrb	r3, [r2, #0]
 8008a24:	600b      	str	r3, [r1, #0]
 8008a26:	7812      	ldrb	r2, [r2, #0]
 8008a28:	1e10      	subs	r0, r2, #0
 8008a2a:	bf18      	it	ne
 8008a2c:	2001      	movne	r0, #1
 8008a2e:	b002      	add	sp, #8
 8008a30:	4770      	bx	lr
 8008a32:	4610      	mov	r0, r2
 8008a34:	e7fb      	b.n	8008a2e <__ascii_mbtowc+0x16>
 8008a36:	f06f 0001 	mvn.w	r0, #1
 8008a3a:	e7f8      	b.n	8008a2e <__ascii_mbtowc+0x16>

08008a3c <__malloc_lock>:
 8008a3c:	4801      	ldr	r0, [pc, #4]	; (8008a44 <__malloc_lock+0x8>)
 8008a3e:	f7fe bfa2 	b.w	8007986 <__retarget_lock_acquire_recursive>
 8008a42:	bf00      	nop
 8008a44:	2000038c 	.word	0x2000038c

08008a48 <__malloc_unlock>:
 8008a48:	4801      	ldr	r0, [pc, #4]	; (8008a50 <__malloc_unlock+0x8>)
 8008a4a:	f7fe bf9d 	b.w	8007988 <__retarget_lock_release_recursive>
 8008a4e:	bf00      	nop
 8008a50:	2000038c 	.word	0x2000038c

08008a54 <_read_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4d07      	ldr	r5, [pc, #28]	; (8008a74 <_read_r+0x20>)
 8008a58:	4604      	mov	r4, r0
 8008a5a:	4608      	mov	r0, r1
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	2200      	movs	r2, #0
 8008a60:	602a      	str	r2, [r5, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	f7f8 feec 	bl	8001840 <_read>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_read_r+0x1e>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_read_r+0x1e>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	20000394 	.word	0x20000394

08008a78 <__ascii_wctomb>:
 8008a78:	b149      	cbz	r1, 8008a8e <__ascii_wctomb+0x16>
 8008a7a:	2aff      	cmp	r2, #255	; 0xff
 8008a7c:	bf85      	ittet	hi
 8008a7e:	238a      	movhi	r3, #138	; 0x8a
 8008a80:	6003      	strhi	r3, [r0, #0]
 8008a82:	700a      	strbls	r2, [r1, #0]
 8008a84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008a88:	bf98      	it	ls
 8008a8a:	2001      	movls	r0, #1
 8008a8c:	4770      	bx	lr
 8008a8e:	4608      	mov	r0, r1
 8008a90:	4770      	bx	lr

08008a92 <abort>:
 8008a92:	b508      	push	{r3, lr}
 8008a94:	2006      	movs	r0, #6
 8008a96:	f000 f84d 	bl	8008b34 <raise>
 8008a9a:	2001      	movs	r0, #1
 8008a9c:	f7f8 fec6 	bl	800182c <_exit>

08008aa0 <_fstat_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d07      	ldr	r5, [pc, #28]	; (8008ac0 <_fstat_r+0x20>)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	4611      	mov	r1, r2
 8008aac:	602b      	str	r3, [r5, #0]
 8008aae:	f7f8 ff0c 	bl	80018ca <_fstat>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	d102      	bne.n	8008abc <_fstat_r+0x1c>
 8008ab6:	682b      	ldr	r3, [r5, #0]
 8008ab8:	b103      	cbz	r3, 8008abc <_fstat_r+0x1c>
 8008aba:	6023      	str	r3, [r4, #0]
 8008abc:	bd38      	pop	{r3, r4, r5, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000394 	.word	0x20000394

08008ac4 <_isatty_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4d06      	ldr	r5, [pc, #24]	; (8008ae0 <_isatty_r+0x1c>)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4604      	mov	r4, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	f7f8 ff0b 	bl	80018ea <_isatty>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_isatty_r+0x1a>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_isatty_r+0x1a>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	20000394 	.word	0x20000394

08008ae4 <_raise_r>:
 8008ae4:	291f      	cmp	r1, #31
 8008ae6:	b538      	push	{r3, r4, r5, lr}
 8008ae8:	4604      	mov	r4, r0
 8008aea:	460d      	mov	r5, r1
 8008aec:	d904      	bls.n	8008af8 <_raise_r+0x14>
 8008aee:	2316      	movs	r3, #22
 8008af0:	6003      	str	r3, [r0, #0]
 8008af2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008afa:	b112      	cbz	r2, 8008b02 <_raise_r+0x1e>
 8008afc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b00:	b94b      	cbnz	r3, 8008b16 <_raise_r+0x32>
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 f830 	bl	8008b68 <_getpid_r>
 8008b08:	462a      	mov	r2, r5
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b12:	f000 b817 	b.w	8008b44 <_kill_r>
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d00a      	beq.n	8008b30 <_raise_r+0x4c>
 8008b1a:	1c59      	adds	r1, r3, #1
 8008b1c:	d103      	bne.n	8008b26 <_raise_r+0x42>
 8008b1e:	2316      	movs	r3, #22
 8008b20:	6003      	str	r3, [r0, #0]
 8008b22:	2001      	movs	r0, #1
 8008b24:	e7e7      	b.n	8008af6 <_raise_r+0x12>
 8008b26:	2400      	movs	r4, #0
 8008b28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	4798      	blx	r3
 8008b30:	2000      	movs	r0, #0
 8008b32:	e7e0      	b.n	8008af6 <_raise_r+0x12>

08008b34 <raise>:
 8008b34:	4b02      	ldr	r3, [pc, #8]	; (8008b40 <raise+0xc>)
 8008b36:	4601      	mov	r1, r0
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	f7ff bfd3 	b.w	8008ae4 <_raise_r>
 8008b3e:	bf00      	nop
 8008b40:	2000000c 	.word	0x2000000c

08008b44 <_kill_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4d07      	ldr	r5, [pc, #28]	; (8008b64 <_kill_r+0x20>)
 8008b48:	2300      	movs	r3, #0
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	4611      	mov	r1, r2
 8008b50:	602b      	str	r3, [r5, #0]
 8008b52:	f7f8 fe5b 	bl	800180c <_kill>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	d102      	bne.n	8008b60 <_kill_r+0x1c>
 8008b5a:	682b      	ldr	r3, [r5, #0]
 8008b5c:	b103      	cbz	r3, 8008b60 <_kill_r+0x1c>
 8008b5e:	6023      	str	r3, [r4, #0]
 8008b60:	bd38      	pop	{r3, r4, r5, pc}
 8008b62:	bf00      	nop
 8008b64:	20000394 	.word	0x20000394

08008b68 <_getpid_r>:
 8008b68:	f7f8 be48 	b.w	80017fc <_getpid>

08008b6c <_init>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr

08008b78 <_fini>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	bf00      	nop
 8008b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7e:	bc08      	pop	{r3}
 8008b80:	469e      	mov	lr, r3
 8008b82:	4770      	bx	lr
