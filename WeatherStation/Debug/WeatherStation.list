
WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f40  08003f40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f40  08003f40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f40  08003f40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f40  08003f40  00013f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f44  08003f44  00013f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08003f54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003f54  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001508c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d7  00000000  00000000  000350c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  000377a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00038a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279e1  00000000  00000000  00039c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152bf  00000000  00000000  00061639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdb18  00000000  00000000  000768f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00174410  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050c4  00000000  00000000  00174464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ee0 	.word	0x08003ee0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ee0 	.word	0x08003ee0

080001c8 <DHT22_Start>:

void Set_Pin_Input(void);
void Set_Pin_Output(void);

// https://controllerstech.com/temperature-measurement-using-dht22-in-stm32/
void DHT22_Start(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	Set_Pin_Output(); // set the pin as output
 80001cc:	f000 f8ac 	bl	8000328 <Set_Pin_Output>
	HAL_GPIO_WritePin(TEMP_HUM_SENSOR_PIN_GPIO_Port, TEMP_HUM_SENSOR_PIN_Pin, 0);   // pull the pin low
 80001d0:	2200      	movs	r2, #0
 80001d2:	2101      	movs	r1, #1
 80001d4:	4809      	ldr	r0, [pc, #36]	; (80001fc <DHT22_Start+0x34>)
 80001d6:	f001 ff1f 	bl	8002018 <HAL_GPIO_WritePin>
	HAL_Delay(1200);   // wait for > 1ms
 80001da:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80001de:	f000 fcab 	bl	8000b38 <HAL_Delay>

	HAL_GPIO_WritePin(TEMP_HUM_SENSOR_PIN_GPIO_Port, TEMP_HUM_SENSOR_PIN_Pin, 1);   // pull the pin high
 80001e2:	2201      	movs	r2, #1
 80001e4:	2101      	movs	r1, #1
 80001e6:	4805      	ldr	r0, [pc, #20]	; (80001fc <DHT22_Start+0x34>)
 80001e8:	f001 ff16 	bl	8002018 <HAL_GPIO_WritePin>
	HAL_Delay(20);   // wait for 30us
 80001ec:	2014      	movs	r0, #20
 80001ee:	f000 fca3 	bl	8000b38 <HAL_Delay>

	Set_Pin_Input();   // set as input
 80001f2:	f000 f87d 	bl	80002f0 <Set_Pin_Input>
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	48000400 	.word	0x48000400

08000200 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
	Set_Pin_Input();   // set as input
 8000206:	f000 f873 	bl	80002f0 <Set_Pin_Input>
	uint8_t Response = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(40);  // wait for 40us
 800020e:	2028      	movs	r0, #40	; 0x28
 8000210:	f000 fc92 	bl	8000b38 <HAL_Delay>
	if (!(HAL_GPIO_ReadPin(TEMP_HUM_SENSOR_PIN_GPIO_Port, TEMP_HUM_SENSOR_PIN_Pin))) // if the pin is low
 8000214:	2101      	movs	r1, #1
 8000216:	4811      	ldr	r0, [pc, #68]	; (800025c <DHT22_Check_Response+0x5c>)
 8000218:	f001 fee6 	bl	8001fe8 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d10e      	bne.n	8000240 <DHT22_Check_Response+0x40>
	{
		HAL_Delay(80);   // wait for 80us
 8000222:	2050      	movs	r0, #80	; 0x50
 8000224:	f000 fc88 	bl	8000b38 <HAL_Delay>
		if ((HAL_GPIO_ReadPin(TEMP_HUM_SENSOR_PIN_GPIO_Port, TEMP_HUM_SENSOR_PIN_Pin))) Response = 1;  // if the pin is high, response is ok
 8000228:	2101      	movs	r1, #1
 800022a:	480c      	ldr	r0, [pc, #48]	; (800025c <DHT22_Check_Response+0x5c>)
 800022c:	f001 fedc 	bl	8001fe8 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <DHT22_Check_Response+0x3c>
 8000236:	2301      	movs	r3, #1
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	e001      	b.n	8000240 <DHT22_Check_Response+0x40>
		else Response = -1;
 800023c:	23ff      	movs	r3, #255	; 0xff
 800023e:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin(TEMP_HUM_SENSOR_PIN_GPIO_Port, TEMP_HUM_SENSOR_PIN_Pin)));   // wait for the pin to go low
 8000240:	bf00      	nop
 8000242:	2101      	movs	r1, #1
 8000244:	4805      	ldr	r0, [pc, #20]	; (800025c <DHT22_Check_Response+0x5c>)
 8000246:	f001 fecf 	bl	8001fe8 <HAL_GPIO_ReadPin>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d1f8      	bne.n	8000242 <DHT22_Check_Response+0x42>
	return Response;
 8000250:	79fb      	ldrb	r3, [r7, #7]
}
 8000252:	4618      	mov	r0, r3
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	48000400 	.word	0x48000400

08000260 <DHT22_Read>:

uint8_t DHT22_Read(void){
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000266:	2300      	movs	r3, #0
 8000268:	71bb      	strb	r3, [r7, #6]
 800026a:	e037      	b.n	80002dc <DHT22_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin(TEMP_HUM_SENSOR_PIN_GPIO_Port, TEMP_HUM_SENSOR_PIN_Pin)));   // wait for the pin to go high
 800026c:	bf00      	nop
 800026e:	2101      	movs	r1, #1
 8000270:	481e      	ldr	r0, [pc, #120]	; (80002ec <DHT22_Read+0x8c>)
 8000272:	f001 feb9 	bl	8001fe8 <HAL_GPIO_ReadPin>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d0f8      	beq.n	800026e <DHT22_Read+0xe>
		HAL_Delay(40);   // wait for 40 us
 800027c:	2028      	movs	r0, #40	; 0x28
 800027e:	f000 fc5b 	bl	8000b38 <HAL_Delay>

		if (!(HAL_GPIO_ReadPin(TEMP_HUM_SENSOR_PIN_GPIO_Port, TEMP_HUM_SENSOR_PIN_Pin)))   // if the pin is low
 8000282:	2101      	movs	r1, #1
 8000284:	4819      	ldr	r0, [pc, #100]	; (80002ec <DHT22_Read+0x8c>)
 8000286:	f001 feaf 	bl	8001fe8 <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d10e      	bne.n	80002ae <DHT22_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000290:	79bb      	ldrb	r3, [r7, #6]
 8000292:	f1c3 0307 	rsb	r3, r3, #7
 8000296:	2201      	movs	r2, #1
 8000298:	fa02 f303 	lsl.w	r3, r2, r3
 800029c:	b25b      	sxtb	r3, r3
 800029e:	43db      	mvns	r3, r3
 80002a0:	b25a      	sxtb	r2, r3
 80002a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a6:	4013      	ands	r3, r2
 80002a8:	b25b      	sxtb	r3, r3
 80002aa:	71fb      	strb	r3, [r7, #7]
 80002ac:	e00b      	b.n	80002c6 <DHT22_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	f1c3 0307 	rsb	r3, r3, #7
 80002b4:	2201      	movs	r2, #1
 80002b6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ba:	b25a      	sxtb	r2, r3
 80002bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c0:	4313      	orrs	r3, r2
 80002c2:	b25b      	sxtb	r3, r3
 80002c4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin(TEMP_HUM_SENSOR_PIN_GPIO_Port, TEMP_HUM_SENSOR_PIN_Pin)));  // wait for the pin to go low
 80002c6:	bf00      	nop
 80002c8:	2101      	movs	r1, #1
 80002ca:	4808      	ldr	r0, [pc, #32]	; (80002ec <DHT22_Read+0x8c>)
 80002cc:	f001 fe8c 	bl	8001fe8 <HAL_GPIO_ReadPin>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d1f8      	bne.n	80002c8 <DHT22_Read+0x68>
	for (j=0;j<8;j++)
 80002d6:	79bb      	ldrb	r3, [r7, #6]
 80002d8:	3301      	adds	r3, #1
 80002da:	71bb      	strb	r3, [r7, #6]
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	2b07      	cmp	r3, #7
 80002e0:	d9c4      	bls.n	800026c <DHT22_Read+0xc>
	}

	return i;
 80002e2:	79fb      	ldrb	r3, [r7, #7]
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	48000400 	.word	0x48000400

080002f0 <Set_Pin_Input>:

void Set_Pin_Input(void){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin : TEMP_HUM_SENSOR_PIN_Pin */
	GPIO_InitStruct.Pin = TEMP_HUM_SENSOR_PIN_Pin;
 8000304:	2301      	movs	r3, #1
 8000306:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000308:	2300      	movs	r3, #0
 800030a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(TEMP_HUM_SENSOR_PIN_GPIO_Port, &GPIO_InitStruct);
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	4619      	mov	r1, r3
 8000314:	4803      	ldr	r0, [pc, #12]	; (8000324 <Set_Pin_Input+0x34>)
 8000316:	f001 fcbd 	bl	8001c94 <HAL_GPIO_Init>
}
 800031a:	bf00      	nop
 800031c:	3718      	adds	r7, #24
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	48000400 	.word	0x48000400

08000328 <Set_Pin_Output>:

void Set_Pin_Output(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin : TEMP_HUM_SENSOR_PIN_Pin */
	GPIO_InitStruct.Pin = TEMP_HUM_SENSOR_PIN_Pin;
 800033c:	2301      	movs	r3, #1
 800033e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000340:	2301      	movs	r3, #1
 8000342:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000348:	2300      	movs	r3, #0
 800034a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(TEMP_HUM_SENSOR_PIN_GPIO_Port, &GPIO_InitStruct);
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	4619      	mov	r1, r3
 8000350:	4803      	ldr	r0, [pc, #12]	; (8000360 <Set_Pin_Output+0x38>)
 8000352:	f001 fc9f 	bl	8001c94 <HAL_GPIO_Init>
}
 8000356:	bf00      	nop
 8000358:	3718      	adds	r7, #24
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	48000400 	.word	0x48000400

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000368:	f000 fbad 	bl	8000ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 f85e 	bl	800042c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f000 f964 	bl	800063c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000374:	f000 f922 	bl	80005bc <MX_I2C1_Init>
  MX_ADC1_Init();
 8000378:	f000 f8aa 	bl	80004d0 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	DHT22_Start();
 800037c:	f7ff ff24 	bl	80001c8 <DHT22_Start>
	Presence = DHT22_Check_Response();
 8000380:	f7ff ff3e 	bl	8000200 <DHT22_Check_Response>
 8000384:	4603      	mov	r3, r0
 8000386:	461a      	mov	r2, r3
 8000388:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <main+0xa0>)
 800038a:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT22_Read();
 800038c:	f7ff ff68 	bl	8000260 <DHT22_Read>
 8000390:	4603      	mov	r3, r0
 8000392:	461a      	mov	r2, r3
 8000394:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <main+0xa4>)
 8000396:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT22_Read();
 8000398:	f7ff ff62 	bl	8000260 <DHT22_Read>
 800039c:	4603      	mov	r3, r0
 800039e:	461a      	mov	r2, r3
 80003a0:	4b1a      	ldr	r3, [pc, #104]	; (800040c <main+0xa8>)
 80003a2:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT22_Read();
 80003a4:	f7ff ff5c 	bl	8000260 <DHT22_Read>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b18      	ldr	r3, [pc, #96]	; (8000410 <main+0xac>)
 80003ae:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT22_Read();
 80003b0:	f7ff ff56 	bl	8000260 <DHT22_Read>
 80003b4:	4603      	mov	r3, r0
 80003b6:	461a      	mov	r2, r3
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <main+0xb0>)
 80003ba:	701a      	strb	r2, [r3, #0]
	Parity = DHT22_Read();
 80003bc:	f7ff ff50 	bl	8000260 <DHT22_Read>
 80003c0:	4603      	mov	r3, r0
 80003c2:	b29a      	uxth	r2, r3
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <main+0xb4>)
 80003c6:	801a      	strh	r2, [r3, #0]

	TEMP = Temp_byte1;
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <main+0xac>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	b29a      	uxth	r2, r3
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <main+0xb8>)
 80003d0:	801a      	strh	r2, [r3, #0]
	RH = Rh_byte1;
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <main+0xa4>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	b29a      	uxth	r2, r3
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <main+0xbc>)
 80003da:	801a      	strh	r2, [r3, #0]

	temperature = (float)TEMP;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <main+0xb8>)
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	ee07 3a90 	vmov	s15, r3
 80003e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003e8:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <main+0xc0>)
 80003ea:	edc3 7a00 	vstr	s15, [r3]
	humidity = (float)RH;
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <main+0xbc>)
 80003f0:	881b      	ldrh	r3, [r3, #0]
 80003f2:	ee07 3a90 	vmov	s15, r3
 80003f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <main+0xc4>)
 80003fc:	edc3 7a00 	vstr	s15, [r3]
	DHT22_Start();
 8000400:	e7bc      	b.n	800037c <main+0x18>
 8000402:	bf00      	nop
 8000404:	20000028 	.word	0x20000028
 8000408:	20000080 	.word	0x20000080
 800040c:	200000ed 	.word	0x200000ed
 8000410:	200000ec 	.word	0x200000ec
 8000414:	200000f0 	.word	0x200000f0
 8000418:	200000ee 	.word	0x200000ee
 800041c:	20000084 	.word	0x20000084
 8000420:	20000082 	.word	0x20000082
 8000424:	2000002c 	.word	0x2000002c
 8000428:	20000030 	.word	0x20000030

0800042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b096      	sub	sp, #88	; 0x58
 8000430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	2244      	movs	r2, #68	; 0x44
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f003 fd48 	bl	8003ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000440:	463b      	mov	r3, r7
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800044e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000452:	f001 ff2d 	bl	80022b0 <HAL_PWREx_ControlVoltageScaling>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800045c:	f000 f95a 	bl	8000714 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000460:	2310      	movs	r3, #16
 8000462:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000464:	2301      	movs	r3, #1
 8000466:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800046c:	2360      	movs	r3, #96	; 0x60
 800046e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000470:	2302      	movs	r3, #2
 8000472:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000474:	2301      	movs	r3, #1
 8000476:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000478:	2301      	movs	r3, #1
 800047a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800047c:	2328      	movs	r3, #40	; 0x28
 800047e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000480:	2307      	movs	r3, #7
 8000482:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000484:	2302      	movs	r3, #2
 8000486:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000488:	2302      	movs	r3, #2
 800048a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	4618      	mov	r0, r3
 8000492:	f001 ff63 	bl	800235c <HAL_RCC_OscConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800049c:	f000 f93a 	bl	8000714 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a0:	230f      	movs	r3, #15
 80004a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a4:	2303      	movs	r3, #3
 80004a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004b4:	463b      	mov	r3, r7
 80004b6:	2104      	movs	r1, #4
 80004b8:	4618      	mov	r0, r3
 80004ba:	f002 fb35 	bl	8002b28 <HAL_RCC_ClockConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80004c4:	f000 f926 	bl	8000714 <Error_Handler>
  }
}
 80004c8:	bf00      	nop
 80004ca:	3758      	adds	r7, #88	; 0x58
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004d6:	f107 031c 	add.w	r3, r7, #28
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
 80004f0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004f2:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <MX_ADC1_Init+0xe0>)
 80004f4:	4a2f      	ldr	r2, [pc, #188]	; (80005b4 <MX_ADC1_Init+0xe4>)
 80004f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f8:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <MX_ADC1_Init+0xe0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fe:	4b2c      	ldr	r3, [pc, #176]	; (80005b0 <MX_ADC1_Init+0xe0>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000504:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <MX_ADC1_Init+0xe0>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800050a:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <MX_ADC1_Init+0xe0>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000510:	4b27      	ldr	r3, [pc, #156]	; (80005b0 <MX_ADC1_Init+0xe0>)
 8000512:	2204      	movs	r2, #4
 8000514:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <MX_ADC1_Init+0xe0>)
 8000518:	2200      	movs	r2, #0
 800051a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800051c:	4b24      	ldr	r3, [pc, #144]	; (80005b0 <MX_ADC1_Init+0xe0>)
 800051e:	2200      	movs	r2, #0
 8000520:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000522:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <MX_ADC1_Init+0xe0>)
 8000524:	2201      	movs	r2, #1
 8000526:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000528:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <MX_ADC1_Init+0xe0>)
 800052a:	2200      	movs	r2, #0
 800052c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000530:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <MX_ADC1_Init+0xe0>)
 8000532:	2200      	movs	r2, #0
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <MX_ADC1_Init+0xe0>)
 8000538:	2200      	movs	r2, #0
 800053a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800053c:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <MX_ADC1_Init+0xe0>)
 800053e:	2200      	movs	r2, #0
 8000540:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000544:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <MX_ADC1_Init+0xe0>)
 8000546:	2200      	movs	r2, #0
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800054a:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <MX_ADC1_Init+0xe0>)
 800054c:	2200      	movs	r2, #0
 800054e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000552:	4817      	ldr	r0, [pc, #92]	; (80005b0 <MX_ADC1_Init+0xe0>)
 8000554:	f000 fca0 	bl	8000e98 <HAL_ADC_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800055e:	f000 f8d9 	bl	8000714 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	4619      	mov	r1, r3
 800056c:	4810      	ldr	r0, [pc, #64]	; (80005b0 <MX_ADC1_Init+0xe0>)
 800056e:	f001 f9ff 	bl	8001970 <HAL_ADCEx_MultiModeConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000578:	f000 f8cc 	bl	8000714 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_ADC1_Init+0xe8>)
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000588:	237f      	movs	r3, #127	; 0x7f
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800058c:	2304      	movs	r3, #4
 800058e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4619      	mov	r1, r3
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_ADC1_Init+0xe0>)
 800059a:	f000 fdd3 	bl	8001144 <HAL_ADC_ConfigChannel>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80005a4:	f000 f8b6 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005a8:	bf00      	nop
 80005aa:	3728      	adds	r7, #40	; 0x28
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000088 	.word	0x20000088
 80005b4:	50040000 	.word	0x50040000
 80005b8:	3ac04000 	.word	0x3ac04000

080005bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_I2C1_Init+0x74>)
 80005c2:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <MX_I2C1_Init+0x78>)
 80005c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <MX_I2C1_Init+0x74>)
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <MX_I2C1_Init+0x7c>)
 80005ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_I2C1_Init+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_I2C1_Init+0x74>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_I2C1_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_I2C1_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2C1_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2C1_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2C1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f6:	480e      	ldr	r0, [pc, #56]	; (8000630 <MX_I2C1_Init+0x74>)
 80005f8:	f001 fd26 	bl	8002048 <HAL_I2C_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000602:	f000 f887 	bl	8000714 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000606:	2100      	movs	r1, #0
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <MX_I2C1_Init+0x74>)
 800060a:	f001 fdac 	bl	8002166 <HAL_I2CEx_ConfigAnalogFilter>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000614:	f000 f87e 	bl	8000714 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000618:	2100      	movs	r1, #0
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_I2C1_Init+0x74>)
 800061c:	f001 fdee 	bl	80021fc <HAL_I2CEx_ConfigDigitalFilter>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000626:	f000 f875 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000034 	.word	0x20000034
 8000634:	40005400 	.word	0x40005400
 8000638:	10909cec 	.word	0x10909cec

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <MX_GPIO_Init+0xa8>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a23      	ldr	r2, [pc, #140]	; (80006e4 <MX_GPIO_Init+0xa8>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_GPIO_Init+0xa8>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_GPIO_Init+0xa8>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	4a1d      	ldr	r2, [pc, #116]	; (80006e4 <MX_GPIO_Init+0xa8>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_GPIO_Init+0xa8>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_GPIO_Init+0xa8>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <MX_GPIO_Init+0xa8>)
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_GPIO_Init+0xa8>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0308 	and.w	r3, r3, #8
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEMP_HUM_SENSOR_PIN_GPIO_Port, TEMP_HUM_SENSOR_PIN_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2101      	movs	r1, #1
 800069e:	4812      	ldr	r0, [pc, #72]	; (80006e8 <MX_GPIO_Init+0xac>)
 80006a0:	f001 fcba 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEMP_HUM_SENSOR_PIN_Pin */
  GPIO_InitStruct.Pin = TEMP_HUM_SENSOR_PIN_Pin;
 80006a4:	2301      	movs	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEMP_HUM_SENSOR_PIN_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	4619      	mov	r1, r3
 80006ba:	480b      	ldr	r0, [pc, #44]	; (80006e8 <MX_GPIO_Init+0xac>)
 80006bc:	f001 faea 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_GPIO_Init+0xb0>)
 80006d6:	f001 fadd 	bl	8001c94 <HAL_GPIO_Init>

}
 80006da:	bf00      	nop
 80006dc:	3720      	adds	r7, #32
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000400 	.word	0x48000400
 80006ec:	48000c00 	.word	0x48000c00

080006f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d101      	bne.n	8000706 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000702:	f000 f9f9 	bl	8000af8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40012c00 	.word	0x40012c00

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	e7fe      	b.n	800071c <Error_Handler+0x8>
	...

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_MspInit+0x44>)
 8000728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <HAL_MspInit+0x44>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6613      	str	r3, [r2, #96]	; 0x60
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_MspInit+0x44>)
 8000734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_MspInit+0x44>)
 8000740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_MspInit+0x44>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6593      	str	r3, [r2, #88]	; 0x58
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_MspInit+0x44>)
 800074c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000

08000768 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b0ac      	sub	sp, #176	; 0xb0
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2288      	movs	r2, #136	; 0x88
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fba1 	bl	8003ed0 <memset>
  if(hadc->Instance==ADC1)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a27      	ldr	r2, [pc, #156]	; (8000830 <HAL_ADC_MspInit+0xc8>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d146      	bne.n	8000826 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000798:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800079c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800079e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80007ae:	2318      	movs	r3, #24
 80007b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80007b2:	2307      	movs	r3, #7
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80007be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 fbcf 	bl	8002f6c <HAL_RCCEx_PeriphCLKConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80007d4:	f7ff ff9e 	bl	8000714 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_ADC_MspInit+0xcc>)
 80007da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007dc:	4a15      	ldr	r2, [pc, #84]	; (8000834 <HAL_ADC_MspInit+0xcc>)
 80007de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <HAL_ADC_MspInit+0xcc>)
 80007e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f0:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_ADC_MspInit+0xcc>)
 80007f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f4:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <HAL_ADC_MspInit+0xcc>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fc:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <HAL_ADC_MspInit+0xcc>)
 80007fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = LIGHT_SENSOR_PIN_Pin;
 8000808:	2320      	movs	r3, #32
 800080a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800080e:	230b      	movs	r3, #11
 8000810:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(LIGHT_SENSOR_PIN_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <HAL_ADC_MspInit+0xd0>)
 8000822:	f001 fa37 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000826:	bf00      	nop
 8000828:	37b0      	adds	r7, #176	; 0xb0
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	50040000 	.word	0x50040000
 8000834:	40021000 	.word	0x40021000
 8000838:	48000800 	.word	0x48000800

0800083c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b0ac      	sub	sp, #176	; 0xb0
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2288      	movs	r2, #136	; 0x88
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f003 fb37 	bl	8003ed0 <memset>
  if(hi2c->Instance==I2C1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a21      	ldr	r2, [pc, #132]	; (80008ec <HAL_I2C_MspInit+0xb0>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d13b      	bne.n	80008e4 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800086c:	2340      	movs	r3, #64	; 0x40
 800086e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000870:	2300      	movs	r3, #0
 8000872:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4618      	mov	r0, r3
 800087a:	f002 fb77 	bl	8002f6c <HAL_RCCEx_PeriphCLKConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000884:	f7ff ff46 	bl	8000714 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <HAL_I2C_MspInit+0xb4>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <HAL_I2C_MspInit+0xb4>)
 800088e:	f043 0302 	orr.w	r3, r3, #2
 8000892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <HAL_I2C_MspInit+0xb4>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000898:	f003 0302 	and.w	r3, r3, #2
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a8:	2312      	movs	r3, #18
 80008aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ba:	2304      	movs	r3, #4
 80008bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008c4:	4619      	mov	r1, r3
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <HAL_I2C_MspInit+0xb8>)
 80008c8:	f001 f9e4 	bl	8001c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_I2C_MspInit+0xb4>)
 80008ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <HAL_I2C_MspInit+0xb4>)
 80008d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008d6:	6593      	str	r3, [r2, #88]	; 0x58
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_I2C_MspInit+0xb4>)
 80008da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008e4:	bf00      	nop
 80008e6:	37b0      	adds	r7, #176	; 0xb0
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40005400 	.word	0x40005400
 80008f0:	40021000 	.word	0x40021000
 80008f4:	48000400 	.word	0x48000400

080008f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	2019      	movs	r0, #25
 800090e:	f001 f997 	bl	8001c40 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000912:	2019      	movs	r0, #25
 8000914:	f001 f9b0 	bl	8001c78 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <HAL_InitTick+0x9c>)
 800091a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <HAL_InitTick+0x9c>)
 800091e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000922:	6613      	str	r3, [r2, #96]	; 0x60
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <HAL_InitTick+0x9c>)
 8000926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000930:	f107 0210 	add.w	r2, r7, #16
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fa84 	bl	8002e48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000940:	f002 fa6c 	bl	8002e1c <HAL_RCC_GetPCLK2Freq>
 8000944:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000948:	4a13      	ldr	r2, [pc, #76]	; (8000998 <HAL_InitTick+0xa0>)
 800094a:	fba2 2303 	umull	r2, r3, r2, r3
 800094e:	0c9b      	lsrs	r3, r3, #18
 8000950:	3b01      	subs	r3, #1
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_InitTick+0xa4>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <HAL_InitTick+0xa8>)
 8000958:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_InitTick+0xa4>)
 800095c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000960:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000962:	4a0e      	ldr	r2, [pc, #56]	; (800099c <HAL_InitTick+0xa4>)
 8000964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000966:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_InitTick+0xa4>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_InitTick+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <HAL_InitTick+0xa4>)
 8000976:	f002 ffb5 	bl	80038e4 <HAL_TIM_Base_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d104      	bne.n	800098a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000980:	4806      	ldr	r0, [pc, #24]	; (800099c <HAL_InitTick+0xa4>)
 8000982:	f003 f811 	bl	80039a8 <HAL_TIM_Base_Start_IT>
 8000986:	4603      	mov	r3, r0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	3730      	adds	r7, #48	; 0x30
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40021000 	.word	0x40021000
 8000998:	431bde83 	.word	0x431bde83
 800099c:	200000f4 	.word	0x200000f4
 80009a0:	40012c00 	.word	0x40012c00

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a02:	f003 f841 	bl	8003a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000f4 	.word	0x200000f4

08000a10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <SystemInit+0x5c>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <SystemInit+0x5c>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <SystemInit+0x60>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <SystemInit+0x60>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <SystemInit+0x60>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <SystemInit+0x60>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <SystemInit+0x60>)
 8000a3c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a40:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <SystemInit+0x60>)
 8000a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a4c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <SystemInit+0x60>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <SystemInit+0x60>)
 8000a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <SystemInit+0x60>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00
 8000a70:	40021000 	.word	0x40021000

08000a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a78:	f7ff ffca 	bl	8000a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a7e:	e003      	b.n	8000a88 <LoopCopyDataInit>

08000a80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a86:	3104      	adds	r1, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a88:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a90:	d3f6      	bcc.n	8000a80 <CopyDataInit>
	ldr	r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a94:	e002      	b.n	8000a9c <LoopFillZerobss>

08000a96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a98:	f842 3b04 	str.w	r3, [r2], #4

08000a9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <LoopForever+0x16>)
	cmp	r2, r3
 8000a9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000aa0:	d3f9      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f003 f9f1 	bl	8003e88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aa6:	f7ff fc5d 	bl	8000364 <main>

08000aaa <LoopForever>:

LoopForever:
    b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ab0:	08003f48 	.word	0x08003f48
	ldr	r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ab8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000abc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ac0:	20000144 	.word	0x20000144

08000ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC1_2_IRQHandler>

08000ac6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f001 f8aa 	bl	8001c2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad6:	200f      	movs	r0, #15
 8000ad8:	f7ff ff0e 	bl	80008f8 <HAL_InitTick>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	71fb      	strb	r3, [r7, #7]
 8000ae6:	e001      	b.n	8000aec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae8:	f7ff fe1a 	bl	8000720 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000140 	.word	0x20000140

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000140 	.word	0x20000140

08000b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff ffee 	bl	8000b20 <HAL_GetTick>
 8000b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b50:	d005      	beq.n	8000b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_Delay+0x44>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b5e:	bf00      	nop
 8000b60:	f7ff ffde 	bl	8000b20 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8f7      	bhi.n	8000b60 <HAL_Delay+0x28>
  {
  }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008

08000b80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	431a      	orrs	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	609a      	str	r2, [r3, #8]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3360      	adds	r3, #96	; 0x60
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <LL_ADC_SetOffset+0x44>)
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	430a      	orrs	r2, r1
 8000c16:	4313      	orrs	r3, r2
 8000c18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c20:	bf00      	nop
 8000c22:	371c      	adds	r7, #28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	03fff000 	.word	0x03fff000

08000c30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3360      	adds	r3, #96	; 0x60
 8000c3e:	461a      	mov	r2, r3
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4413      	add	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3360      	adds	r3, #96	; 0x60
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	431a      	orrs	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c86:	bf00      	nop
 8000c88:	371c      	adds	r7, #28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b087      	sub	sp, #28
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	3330      	adds	r3, #48	; 0x30
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	0a1b      	lsrs	r3, r3, #8
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	f003 030c 	and.w	r3, r3, #12
 8000cae:	4413      	add	r3, r2
 8000cb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	f003 031f 	and.w	r3, r3, #31
 8000cbc:	211f      	movs	r1, #31
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	0e9b      	lsrs	r3, r3, #26
 8000cca:	f003 011f 	and.w	r1, r3, #31
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	f003 031f 	and.w	r3, r3, #31
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000cde:	bf00      	nop
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b087      	sub	sp, #28
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	3314      	adds	r3, #20
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	0e5b      	lsrs	r3, r3, #25
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	4413      	add	r3, r2
 8000d08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	0d1b      	lsrs	r3, r3, #20
 8000d12:	f003 031f 	and.w	r3, r3, #31
 8000d16:	2107      	movs	r1, #7
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	401a      	ands	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	0d1b      	lsrs	r3, r3, #20
 8000d24:	f003 031f 	and.w	r3, r3, #31
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d34:	bf00      	nop
 8000d36:	371c      	adds	r7, #28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0318 	and.w	r3, r3, #24
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d64:	40d9      	lsrs	r1, r3
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	400b      	ands	r3, r1
 8000d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	0007ffff 	.word	0x0007ffff

08000d88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6093      	str	r3, [r2, #8]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dc0:	d101      	bne.n	8000dc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000de4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000de8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e10:	d101      	bne.n	8000e16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d101      	bne.n	8000e3c <LL_ADC_IsEnabled+0x18>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e000      	b.n	8000e3e <LL_ADC_IsEnabled+0x1a>
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d101      	bne.n	8000e62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	2b08      	cmp	r3, #8
 8000e82:	d101      	bne.n	8000e88 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000e84:	2301      	movs	r3, #1
 8000e86:	e000      	b.n	8000e8a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e136      	b.n	8001120 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d109      	bne.n	8000ed4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff fc51 	bl	8000768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff67 	bl	8000dac <LL_ADC_IsDeepPowerDownEnabled>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff4d 	bl	8000d88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff82 	bl	8000dfc <LL_ADC_IsInternalRegulatorEnabled>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d115      	bne.n	8000f2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff66 	bl	8000dd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f08:	4b87      	ldr	r3, [pc, #540]	; (8001128 <HAL_ADC_Init+0x290>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	099b      	lsrs	r3, r3, #6
 8000f0e:	4a87      	ldr	r2, [pc, #540]	; (800112c <HAL_ADC_Init+0x294>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	099b      	lsrs	r3, r3, #6
 8000f16:	3301      	adds	r3, #1
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f1c:	e002      	b.n	8000f24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f9      	bne.n	8000f1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff64 	bl	8000dfc <LL_ADC_IsInternalRegulatorEnabled>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10d      	bne.n	8000f56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f3e:	f043 0210 	orr.w	r2, r3, #16
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f043 0201 	orr.w	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff75 	bl	8000e4a <LL_ADC_REG_IsConversionOngoing>
 8000f60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f66:	f003 0310 	and.w	r3, r3, #16
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f040 80cf 	bne.w	800110e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f040 80cb 	bne.w	800110e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f80:	f043 0202 	orr.w	r2, r3, #2
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff49 	bl	8000e24 <LL_ADC_IsEnabled>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d115      	bne.n	8000fc4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f98:	4865      	ldr	r0, [pc, #404]	; (8001130 <HAL_ADC_Init+0x298>)
 8000f9a:	f7ff ff43 	bl	8000e24 <LL_ADC_IsEnabled>
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4864      	ldr	r0, [pc, #400]	; (8001134 <HAL_ADC_Init+0x29c>)
 8000fa2:	f7ff ff3f 	bl	8000e24 <LL_ADC_IsEnabled>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	431c      	orrs	r4, r3
 8000faa:	4863      	ldr	r0, [pc, #396]	; (8001138 <HAL_ADC_Init+0x2a0>)
 8000fac:	f7ff ff3a 	bl	8000e24 <LL_ADC_IsEnabled>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4323      	orrs	r3, r4
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d105      	bne.n	8000fc4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	485f      	ldr	r0, [pc, #380]	; (800113c <HAL_ADC_Init+0x2a4>)
 8000fc0:	f7ff fdde 	bl	8000b80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7e5b      	ldrb	r3, [r3, #25]
 8000fc8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000fd4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000fda:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d106      	bne.n	8001000 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	045b      	lsls	r3, r3, #17
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	2b00      	cmp	r3, #0
 8001006:	d009      	beq.n	800101c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001014:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	4b47      	ldr	r3, [pc, #284]	; (8001140 <HAL_ADC_Init+0x2a8>)
 8001024:	4013      	ands	r3, r2
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	69b9      	ldr	r1, [r7, #24]
 800102c:	430b      	orrs	r3, r1
 800102e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff08 	bl	8000e4a <LL_ADC_REG_IsConversionOngoing>
 800103a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff15 	bl	8000e70 <LL_ADC_INJ_IsConversionOngoing>
 8001046:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d13d      	bne.n	80010ca <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d13a      	bne.n	80010ca <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001058:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001060:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001070:	f023 0302 	bic.w	r3, r3, #2
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6812      	ldr	r2, [r2, #0]
 8001078:	69b9      	ldr	r1, [r7, #24]
 800107a:	430b      	orrs	r3, r1
 800107c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001084:	2b01      	cmp	r3, #1
 8001086:	d118      	bne.n	80010ba <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001092:	f023 0304 	bic.w	r3, r3, #4
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800109e:	4311      	orrs	r1, r2
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80010a4:	4311      	orrs	r1, r2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80010aa:	430a      	orrs	r2, r1
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	611a      	str	r2, [r3, #16]
 80010b8:	e007      	b.n	80010ca <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0201 	bic.w	r2, r2, #1
 80010c8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d10c      	bne.n	80010ec <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f023 010f 	bic.w	r1, r3, #15
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	1e5a      	subs	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ea:	e007      	b.n	80010fc <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 020f 	bic.w	r2, r2, #15
 80010fa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001100:	f023 0303 	bic.w	r3, r3, #3
 8001104:	f043 0201 	orr.w	r2, r3, #1
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	655a      	str	r2, [r3, #84]	; 0x54
 800110c:	e007      	b.n	800111e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001112:	f043 0210 	orr.w	r2, r3, #16
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800111e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3724      	adds	r7, #36	; 0x24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd90      	pop	{r4, r7, pc}
 8001128:	20000000 	.word	0x20000000
 800112c:	053e2d63 	.word	0x053e2d63
 8001130:	50040000 	.word	0x50040000
 8001134:	50040100 	.word	0x50040100
 8001138:	50040200 	.word	0x50040200
 800113c:	50040300 	.word	0x50040300
 8001140:	fff0c007 	.word	0xfff0c007

08001144 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0b6      	sub	sp, #216	; 0xd8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800115e:	2b01      	cmp	r3, #1
 8001160:	d101      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x22>
 8001162:	2302      	movs	r3, #2
 8001164:	e3c7      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x7b2>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fe69 	bl	8000e4a <LL_ADC_REG_IsConversionOngoing>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	f040 83a8 	bne.w	80018d0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b05      	cmp	r3, #5
 8001186:	d824      	bhi.n	80011d2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	3b02      	subs	r3, #2
 800118e:	2b03      	cmp	r3, #3
 8001190:	d81b      	bhi.n	80011ca <HAL_ADC_ConfigChannel+0x86>
 8001192:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <HAL_ADC_ConfigChannel+0x54>)
 8001194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001198:	080011a9 	.word	0x080011a9
 800119c:	080011b1 	.word	0x080011b1
 80011a0:	080011b9 	.word	0x080011b9
 80011a4:	080011c1 	.word	0x080011c1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	220c      	movs	r2, #12
 80011ac:	605a      	str	r2, [r3, #4]
          break;
 80011ae:	e011      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2212      	movs	r2, #18
 80011b4:	605a      	str	r2, [r3, #4]
          break;
 80011b6:	e00d      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2218      	movs	r2, #24
 80011bc:	605a      	str	r2, [r3, #4]
          break;
 80011be:	e009      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c6:	605a      	str	r2, [r3, #4]
          break;
 80011c8:	e004      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2206      	movs	r2, #6
 80011ce:	605a      	str	r2, [r3, #4]
          break;
 80011d0:	e000      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80011d2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6859      	ldr	r1, [r3, #4]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	f7ff fd56 	bl	8000c92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fe2d 	bl	8000e4a <LL_ADC_REG_IsConversionOngoing>
 80011f0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fe39 	bl	8000e70 <LL_ADC_INJ_IsConversionOngoing>
 80011fe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001202:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 81a6 	bne.w	8001558 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800120c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001210:	2b00      	cmp	r3, #0
 8001212:	f040 81a1 	bne.w	8001558 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6818      	ldr	r0, [r3, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	6819      	ldr	r1, [r3, #0]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	461a      	mov	r2, r3
 8001224:	f7ff fd61 	bl	8000cea <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	695a      	ldr	r2, [r3, #20]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b04      	cmp	r3, #4
 8001248:	d00a      	beq.n	8001260 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	6919      	ldr	r1, [r3, #16]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800125a:	f7ff fcc5 	bl	8000be8 <LL_ADC_SetOffset>
 800125e:	e17b      	b.n	8001558 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fce2 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10a      	bne.n	800128c <HAL_ADC_ConfigChannel+0x148>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fcd7 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	0e9b      	lsrs	r3, r3, #26
 8001286:	f003 021f 	and.w	r2, r3, #31
 800128a:	e01e      	b.n	80012ca <HAL_ADC_ConfigChannel+0x186>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fccc 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80012ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80012b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80012ba:	2320      	movs	r3, #32
 80012bc:	e004      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80012be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012c2:	fab3 f383 	clz	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d105      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x19e>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0e9b      	lsrs	r3, r3, #26
 80012dc:	f003 031f 	and.w	r3, r3, #31
 80012e0:	e018      	b.n	8001314 <HAL_ADC_ConfigChannel+0x1d0>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012ee:	fa93 f3a3 	rbit	r3, r3
 80012f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80012f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80012fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001306:	2320      	movs	r3, #32
 8001308:	e004      	b.n	8001314 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800130a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001314:	429a      	cmp	r2, r3
 8001316:	d106      	bne.n	8001326 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fc9b 	bl	8000c5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2101      	movs	r1, #1
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fc7f 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10a      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x20e>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fc74 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	0e9b      	lsrs	r3, r3, #26
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	e01e      	b.n	8001390 <HAL_ADC_ConfigChannel+0x24c>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2101      	movs	r1, #1
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc69 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001364:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001370:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001378:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001380:	2320      	movs	r3, #32
 8001382:	e004      	b.n	800138e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001398:	2b00      	cmp	r3, #0
 800139a:	d105      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x264>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0e9b      	lsrs	r3, r3, #26
 80013a2:	f003 031f 	and.w	r3, r3, #31
 80013a6:	e018      	b.n	80013da <HAL_ADC_ConfigChannel+0x296>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013b4:	fa93 f3a3 	rbit	r3, r3
 80013b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80013bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80013c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80013cc:	2320      	movs	r3, #32
 80013ce:	e004      	b.n	80013da <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80013d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013d4:	fab3 f383 	clz	r3, r3
 80013d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80013da:	429a      	cmp	r2, r3
 80013dc:	d106      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	2101      	movs	r1, #1
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fc38 	bl	8000c5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2102      	movs	r1, #2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fc1c 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10a      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x2d4>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2102      	movs	r1, #2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fc11 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	0e9b      	lsrs	r3, r3, #26
 8001412:	f003 021f 	and.w	r2, r3, #31
 8001416:	e01e      	b.n	8001456 <HAL_ADC_ConfigChannel+0x312>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2102      	movs	r1, #2
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fc06 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800142e:	fa93 f3a3 	rbit	r3, r3
 8001432:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001436:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800143a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800143e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001446:	2320      	movs	r3, #32
 8001448:	e004      	b.n	8001454 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800144a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800144e:	fab3 f383 	clz	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <HAL_ADC_ConfigChannel+0x32a>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	0e9b      	lsrs	r3, r3, #26
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	e016      	b.n	800149c <HAL_ADC_ConfigChannel+0x358>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001476:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800147a:	fa93 f3a3 	rbit	r3, r3
 800147e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001480:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001482:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001486:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800148e:	2320      	movs	r3, #32
 8001490:	e004      	b.n	800149c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001496:	fab3 f383 	clz	r3, r3
 800149a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800149c:	429a      	cmp	r2, r3
 800149e:	d106      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2200      	movs	r2, #0
 80014a6:	2102      	movs	r1, #2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fbd7 	bl	8000c5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2103      	movs	r1, #3
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fbbb 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10a      	bne.n	80014da <HAL_ADC_ConfigChannel+0x396>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2103      	movs	r1, #3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fbb0 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	0e9b      	lsrs	r3, r3, #26
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	e017      	b.n	800150a <HAL_ADC_ConfigChannel+0x3c6>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2103      	movs	r1, #3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fba5 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014ec:	fa93 f3a3 	rbit	r3, r3
 80014f0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80014f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014f4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80014f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80014fc:	2320      	movs	r3, #32
 80014fe:	e003      	b.n	8001508 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001512:	2b00      	cmp	r3, #0
 8001514:	d105      	bne.n	8001522 <HAL_ADC_ConfigChannel+0x3de>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	0e9b      	lsrs	r3, r3, #26
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	e011      	b.n	8001546 <HAL_ADC_ConfigChannel+0x402>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001532:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800153a:	2320      	movs	r3, #32
 800153c:	e003      	b.n	8001546 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800153e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001546:	429a      	cmp	r2, r3
 8001548:	d106      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	2103      	movs	r1, #3
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fb82 	bl	8000c5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fc61 	bl	8000e24 <LL_ADC_IsEnabled>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	f040 813f 	bne.w	80017e8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	6819      	ldr	r1, [r3, #0]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	461a      	mov	r2, r3
 8001578:	f7ff fbe2 	bl	8000d40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4a8e      	ldr	r2, [pc, #568]	; (80017bc <HAL_ADC_ConfigChannel+0x678>)
 8001582:	4293      	cmp	r3, r2
 8001584:	f040 8130 	bne.w	80017e8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10b      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x46c>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0e9b      	lsrs	r3, r3, #26
 800159e:	3301      	adds	r3, #1
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	2b09      	cmp	r3, #9
 80015a6:	bf94      	ite	ls
 80015a8:	2301      	movls	r3, #1
 80015aa:	2300      	movhi	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	e019      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x4a0>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015b8:	fa93 f3a3 	rbit	r3, r3
 80015bc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80015be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015c0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80015c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80015c8:	2320      	movs	r3, #32
 80015ca:	e003      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80015cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	3301      	adds	r3, #1
 80015d6:	f003 031f 	and.w	r3, r3, #31
 80015da:	2b09      	cmp	r3, #9
 80015dc:	bf94      	ite	ls
 80015de:	2301      	movls	r3, #1
 80015e0:	2300      	movhi	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d079      	beq.n	80016dc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x4c0>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	0e9b      	lsrs	r3, r3, #26
 80015fa:	3301      	adds	r3, #1
 80015fc:	069b      	lsls	r3, r3, #26
 80015fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001602:	e015      	b.n	8001630 <HAL_ADC_ConfigChannel+0x4ec>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800160c:	fa93 f3a3 	rbit	r3, r3
 8001610:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001614:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800161c:	2320      	movs	r3, #32
 800161e:	e003      	b.n	8001628 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001622:	fab3 f383 	clz	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	3301      	adds	r3, #1
 800162a:	069b      	lsls	r3, r3, #26
 800162c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001638:	2b00      	cmp	r3, #0
 800163a:	d109      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x50c>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	0e9b      	lsrs	r3, r3, #26
 8001642:	3301      	adds	r3, #1
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	2101      	movs	r1, #1
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	e017      	b.n	8001680 <HAL_ADC_ConfigChannel+0x53c>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001658:	fa93 f3a3 	rbit	r3, r3
 800165c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800165e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001660:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001668:	2320      	movs	r3, #32
 800166a:	e003      	b.n	8001674 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800166c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800166e:	fab3 f383 	clz	r3, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	ea42 0103 	orr.w	r1, r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10a      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x562>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0e9b      	lsrs	r3, r3, #26
 8001696:	3301      	adds	r3, #1
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	051b      	lsls	r3, r3, #20
 80016a4:	e018      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x594>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ae:	fa93 f3a3 	rbit	r3, r3
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80016b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80016b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80016be:	2320      	movs	r3, #32
 80016c0:	e003      	b.n	80016ca <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80016c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016c4:	fab3 f383 	clz	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	3301      	adds	r3, #1
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016d8:	430b      	orrs	r3, r1
 80016da:	e080      	b.n	80017de <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d107      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x5b4>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0e9b      	lsrs	r3, r3, #26
 80016ee:	3301      	adds	r3, #1
 80016f0:	069b      	lsls	r3, r3, #26
 80016f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016f6:	e015      	b.n	8001724 <HAL_ADC_ConfigChannel+0x5e0>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001710:	2320      	movs	r3, #32
 8001712:	e003      	b.n	800171c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	3301      	adds	r3, #1
 800171e:	069b      	lsls	r3, r3, #26
 8001720:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172c:	2b00      	cmp	r3, #0
 800172e:	d109      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x600>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	0e9b      	lsrs	r3, r3, #26
 8001736:	3301      	adds	r3, #1
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	e017      	b.n	8001774 <HAL_ADC_ConfigChannel+0x630>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	fa93 f3a3 	rbit	r3, r3
 8001750:	61fb      	str	r3, [r7, #28]
  return result;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800175c:	2320      	movs	r3, #32
 800175e:	e003      	b.n	8001768 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	3301      	adds	r3, #1
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	ea42 0103 	orr.w	r1, r2, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10d      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x65c>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0e9b      	lsrs	r3, r3, #26
 800178a:	3301      	adds	r3, #1
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	3b1e      	subs	r3, #30
 8001798:	051b      	lsls	r3, r3, #20
 800179a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800179e:	e01d      	b.n	80017dc <HAL_ADC_ConfigChannel+0x698>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	613b      	str	r3, [r7, #16]
  return result;
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d103      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80017b8:	2320      	movs	r3, #32
 80017ba:	e005      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x684>
 80017bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	3301      	adds	r3, #1
 80017ca:	f003 021f 	and.w	r2, r3, #31
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	3b1e      	subs	r3, #30
 80017d6:	051b      	lsls	r3, r3, #20
 80017d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017dc:	430b      	orrs	r3, r1
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	6892      	ldr	r2, [r2, #8]
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff fa81 	bl	8000cea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b44      	ldr	r3, [pc, #272]	; (8001900 <HAL_ADC_ConfigChannel+0x7bc>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d07a      	beq.n	80018ea <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017f4:	4843      	ldr	r0, [pc, #268]	; (8001904 <HAL_ADC_ConfigChannel+0x7c0>)
 80017f6:	f7ff f9e9 	bl	8000bcc <LL_ADC_GetCommonPathInternalCh>
 80017fa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a41      	ldr	r2, [pc, #260]	; (8001908 <HAL_ADC_ConfigChannel+0x7c4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d12c      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800180c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d126      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a3c      	ldr	r2, [pc, #240]	; (800190c <HAL_ADC_ConfigChannel+0x7c8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d004      	beq.n	8001828 <HAL_ADC_ConfigChannel+0x6e4>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a3b      	ldr	r2, [pc, #236]	; (8001910 <HAL_ADC_ConfigChannel+0x7cc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d15d      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001828:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800182c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001830:	4619      	mov	r1, r3
 8001832:	4834      	ldr	r0, [pc, #208]	; (8001904 <HAL_ADC_ConfigChannel+0x7c0>)
 8001834:	f7ff f9b7 	bl	8000ba6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001838:	4b36      	ldr	r3, [pc, #216]	; (8001914 <HAL_ADC_ConfigChannel+0x7d0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	099b      	lsrs	r3, r3, #6
 800183e:	4a36      	ldr	r2, [pc, #216]	; (8001918 <HAL_ADC_ConfigChannel+0x7d4>)
 8001840:	fba2 2303 	umull	r2, r3, r2, r3
 8001844:	099b      	lsrs	r3, r3, #6
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001852:	e002      	b.n	800185a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3b01      	subs	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f9      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001860:	e040      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a2d      	ldr	r2, [pc, #180]	; (800191c <HAL_ADC_ConfigChannel+0x7d8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d118      	bne.n	800189e <HAL_ADC_ConfigChannel+0x75a>
 800186c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d112      	bne.n	800189e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a23      	ldr	r2, [pc, #140]	; (800190c <HAL_ADC_ConfigChannel+0x7c8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d004      	beq.n	800188c <HAL_ADC_ConfigChannel+0x748>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a22      	ldr	r2, [pc, #136]	; (8001910 <HAL_ADC_ConfigChannel+0x7cc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d12d      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800188c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001890:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001894:	4619      	mov	r1, r3
 8001896:	481b      	ldr	r0, [pc, #108]	; (8001904 <HAL_ADC_ConfigChannel+0x7c0>)
 8001898:	f7ff f985 	bl	8000ba6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800189c:	e024      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a1f      	ldr	r2, [pc, #124]	; (8001920 <HAL_ADC_ConfigChannel+0x7dc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d120      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80018a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d11a      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <HAL_ADC_ConfigChannel+0x7c8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d115      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018c6:	4619      	mov	r1, r3
 80018c8:	480e      	ldr	r0, [pc, #56]	; (8001904 <HAL_ADC_ConfigChannel+0x7c0>)
 80018ca:	f7ff f96c 	bl	8000ba6 <LL_ADC_SetCommonPathInternalCh>
 80018ce:	e00c      	b.n	80018ea <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	f043 0220 	orr.w	r2, r3, #32
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80018e2:	e002      	b.n	80018ea <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018e4:	bf00      	nop
 80018e6:	e000      	b.n	80018ea <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80018e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80018f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	37d8      	adds	r7, #216	; 0xd8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	80080000 	.word	0x80080000
 8001904:	50040300 	.word	0x50040300
 8001908:	c7520000 	.word	0xc7520000
 800190c:	50040000 	.word	0x50040000
 8001910:	50040200 	.word	0x50040200
 8001914:	20000000 	.word	0x20000000
 8001918:	053e2d63 	.word	0x053e2d63
 800191c:	cb840000 	.word	0xcb840000
 8001920:	80000001 	.word	0x80000001

08001924 <LL_ADC_IsEnabled>:
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <LL_ADC_IsEnabled+0x18>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <LL_ADC_IsEnabled+0x1a>
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_ADC_REG_IsConversionOngoing>:
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b04      	cmp	r3, #4
 800195c:	d101      	bne.n	8001962 <LL_ADC_REG_IsConversionOngoing+0x18>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b09f      	sub	sp, #124	; 0x7c
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800198a:	2302      	movs	r3, #2
 800198c:	e093      	b.n	8001ab6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001996:	2300      	movs	r3, #0
 8001998:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800199a:	2300      	movs	r3, #0
 800199c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a47      	ldr	r2, [pc, #284]	; (8001ac0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d102      	bne.n	80019ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80019a8:	4b46      	ldr	r3, [pc, #280]	; (8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	e001      	b.n	80019b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10b      	bne.n	80019d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019bc:	f043 0220 	orr.w	r2, r3, #32
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e072      	b.n	8001ab6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ffb9 	bl	800194a <LL_ADC_REG_IsConversionOngoing>
 80019d8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ffb3 	bl	800194a <LL_ADC_REG_IsConversionOngoing>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d154      	bne.n	8001a94 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80019ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d151      	bne.n	8001a94 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80019f0:	4b35      	ldr	r3, [pc, #212]	; (8001ac8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80019f2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d02c      	beq.n	8001a56 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80019fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a0e:	035b      	lsls	r3, r3, #13
 8001a10:	430b      	orrs	r3, r1
 8001a12:	431a      	orrs	r2, r3
 8001a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a16:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a18:	4829      	ldr	r0, [pc, #164]	; (8001ac0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001a1a:	f7ff ff83 	bl	8001924 <LL_ADC_IsEnabled>
 8001a1e:	4604      	mov	r4, r0
 8001a20:	4828      	ldr	r0, [pc, #160]	; (8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001a22:	f7ff ff7f 	bl	8001924 <LL_ADC_IsEnabled>
 8001a26:	4603      	mov	r3, r0
 8001a28:	431c      	orrs	r4, r3
 8001a2a:	4828      	ldr	r0, [pc, #160]	; (8001acc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001a2c:	f7ff ff7a 	bl	8001924 <LL_ADC_IsEnabled>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4323      	orrs	r3, r4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d137      	bne.n	8001aa8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a40:	f023 030f 	bic.w	r3, r3, #15
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	6811      	ldr	r1, [r2, #0]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	6892      	ldr	r2, [r2, #8]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a52:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a54:	e028      	b.n	8001aa8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a60:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a62:	4817      	ldr	r0, [pc, #92]	; (8001ac0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001a64:	f7ff ff5e 	bl	8001924 <LL_ADC_IsEnabled>
 8001a68:	4604      	mov	r4, r0
 8001a6a:	4816      	ldr	r0, [pc, #88]	; (8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001a6c:	f7ff ff5a 	bl	8001924 <LL_ADC_IsEnabled>
 8001a70:	4603      	mov	r3, r0
 8001a72:	431c      	orrs	r4, r3
 8001a74:	4815      	ldr	r0, [pc, #84]	; (8001acc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001a76:	f7ff ff55 	bl	8001924 <LL_ADC_IsEnabled>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4323      	orrs	r3, r4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d112      	bne.n	8001aa8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a8a:	f023 030f 	bic.w	r3, r3, #15
 8001a8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a90:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a92:	e009      	b.n	8001aa8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	f043 0220 	orr.w	r2, r3, #32
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001aa6:	e000      	b.n	8001aaa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001aa8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ab2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	377c      	adds	r7, #124	; 0x7c
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd90      	pop	{r4, r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	50040000 	.word	0x50040000
 8001ac4:	50040100 	.word	0x50040100
 8001ac8:	50040300 	.word	0x50040300
 8001acc:	50040200 	.word	0x50040200

08001ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aec:	4013      	ands	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	60d3      	str	r3, [r2, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <__NVIC_GetPriorityGrouping+0x18>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	f003 0307 	and.w	r3, r3, #7
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	db0b      	blt.n	8001b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	4907      	ldr	r1, [pc, #28]	; (8001b6c <__NVIC_EnableIRQ+0x38>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2001      	movs	r0, #1
 8001b56:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	; (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	; 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ff4c 	bl	8001ad0 <__NVIC_SetPriorityGrouping>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c52:	f7ff ff61 	bl	8001b18 <__NVIC_GetPriorityGrouping>
 8001c56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	6978      	ldr	r0, [r7, #20]
 8001c5e:	f7ff ffb1 	bl	8001bc4 <NVIC_EncodePriority>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c68:	4611      	mov	r1, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff80 	bl	8001b70 <__NVIC_SetPriority>
}
 8001c70:	bf00      	nop
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff54 	bl	8001b34 <__NVIC_EnableIRQ>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	e17f      	b.n	8001fa4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8171 	beq.w	8001f9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d00b      	beq.n	8001cdc <HAL_GPIO_Init+0x48>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d007      	beq.n	8001cdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd0:	2b11      	cmp	r3, #17
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b12      	cmp	r3, #18
 8001cda:	d130      	bne.n	8001d3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d12:	2201      	movs	r2, #1
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	f003 0201 	and.w	r2, r3, #1
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d118      	bne.n	8001d7c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d50:	2201      	movs	r2, #1
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	08db      	lsrs	r3, r3, #3
 8001d66:	f003 0201 	and.w	r2, r3, #1
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x128>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b12      	cmp	r3, #18
 8001dba:	d123      	bne.n	8001e04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	08da      	lsrs	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3208      	adds	r2, #8
 8001dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	08da      	lsrs	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3208      	adds	r2, #8
 8001dfe:	6939      	ldr	r1, [r7, #16]
 8001e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0203 	and.w	r2, r3, #3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80ac 	beq.w	8001f9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	4b5f      	ldr	r3, [pc, #380]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4a:	4a5e      	ldr	r2, [pc, #376]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6613      	str	r3, [r2, #96]	; 0x60
 8001e52:	4b5c      	ldr	r3, [pc, #368]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e5e:	4a5a      	ldr	r2, [pc, #360]	; (8001fc8 <HAL_GPIO_Init+0x334>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3302      	adds	r3, #2
 8001e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	220f      	movs	r2, #15
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e88:	d025      	beq.n	8001ed6 <HAL_GPIO_Init+0x242>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4f      	ldr	r2, [pc, #316]	; (8001fcc <HAL_GPIO_Init+0x338>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01f      	beq.n	8001ed2 <HAL_GPIO_Init+0x23e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4e      	ldr	r2, [pc, #312]	; (8001fd0 <HAL_GPIO_Init+0x33c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x23a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4d      	ldr	r2, [pc, #308]	; (8001fd4 <HAL_GPIO_Init+0x340>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x236>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4c      	ldr	r2, [pc, #304]	; (8001fd8 <HAL_GPIO_Init+0x344>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x232>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4b      	ldr	r2, [pc, #300]	; (8001fdc <HAL_GPIO_Init+0x348>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x22e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4a      	ldr	r2, [pc, #296]	; (8001fe0 <HAL_GPIO_Init+0x34c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x22a>
 8001eba:	2306      	movs	r3, #6
 8001ebc:	e00c      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e00a      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	e008      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e004      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	f002 0203 	and.w	r2, r2, #3
 8001ede:	0092      	lsls	r2, r2, #2
 8001ee0:	4093      	lsls	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ee8:	4937      	ldr	r1, [pc, #220]	; (8001fc8 <HAL_GPIO_Init+0x334>)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f1a:	4a32      	ldr	r2, [pc, #200]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f20:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f44:	4a27      	ldr	r2, [pc, #156]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f47f ae78 	bne.w	8001ca4 <HAL_GPIO_Init+0x10>
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	48000400 	.word	0x48000400
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	48000c00 	.word	0x48000c00
 8001fd8:	48001000 	.word	0x48001000
 8001fdc:	48001400 	.word	0x48001400
 8001fe0:	48001800 	.word	0x48001800
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	887b      	ldrh	r3, [r7, #2]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
 8002004:	e001      	b.n	800200a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800200a:	7bfb      	ldrb	r3, [r7, #15]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002028:	787b      	ldrb	r3, [r7, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002034:	e002      	b.n	800203c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e081      	b.n	800215e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fbe4 	bl	800083c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	; 0x24
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002098:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	e006      	b.n	80020d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d104      	bne.n	80020e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002104:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	ea42 0103 	orr.w	r1, r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	021a      	lsls	r2, r3, #8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69d9      	ldr	r1, [r3, #28]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b20      	cmp	r3, #32
 800217a:	d138      	bne.n	80021ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002186:	2302      	movs	r3, #2
 8002188:	e032      	b.n	80021f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2224      	movs	r2, #36	; 0x24
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6819      	ldr	r1, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2220      	movs	r2, #32
 80021de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021ee:	2302      	movs	r3, #2
  }
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b20      	cmp	r3, #32
 8002210:	d139      	bne.n	8002286 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800221c:	2302      	movs	r3, #2
 800221e:	e033      	b.n	8002288 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2224      	movs	r2, #36	; 0x24
 800222c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800224e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0201 	orr.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002286:	2302      	movs	r3, #2
  }
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <HAL_PWREx_GetVoltageRange+0x18>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40007000 	.word	0x40007000

080022b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022be:	d130      	bne.n	8002322 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022cc:	d038      	beq.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022d6:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2232      	movs	r2, #50	; 0x32
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	4a1b      	ldr	r2, [pc, #108]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0c9b      	lsrs	r3, r3, #18
 80022f0:	3301      	adds	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f4:	e002      	b.n	80022fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002308:	d102      	bne.n	8002310 <HAL_PWREx_ControlVoltageScaling+0x60>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f2      	bne.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231c:	d110      	bne.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e00f      	b.n	8002342 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800232a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232e:	d007      	beq.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002338:	4a05      	ldr	r2, [pc, #20]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800233e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40007000 	.word	0x40007000
 8002354:	20000000 	.word	0x20000000
 8002358:	431bde83 	.word	0x431bde83

0800235c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e3d4      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236e:	4ba1      	ldr	r3, [pc, #644]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002378:	4b9e      	ldr	r3, [pc, #632]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 80e4 	beq.w	8002558 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <HAL_RCC_OscConfig+0x4a>
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b0c      	cmp	r3, #12
 800239a:	f040 808b 	bne.w	80024b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	f040 8087 	bne.w	80024b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023a6:	4b93      	ldr	r3, [pc, #588]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_RCC_OscConfig+0x62>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e3ac      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1a      	ldr	r2, [r3, #32]
 80023c2:	4b8c      	ldr	r3, [pc, #560]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d004      	beq.n	80023d8 <HAL_RCC_OscConfig+0x7c>
 80023ce:	4b89      	ldr	r3, [pc, #548]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d6:	e005      	b.n	80023e4 <HAL_RCC_OscConfig+0x88>
 80023d8:	4b86      	ldr	r3, [pc, #536]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80023da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d223      	bcs.n	8002430 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fd5d 	bl	8002eac <RCC_SetFlashLatencyFromMSIRange>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e38d      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023fc:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a7c      	ldr	r2, [pc, #496]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 8002402:	f043 0308 	orr.w	r3, r3, #8
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b7a      	ldr	r3, [pc, #488]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4977      	ldr	r1, [pc, #476]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800241a:	4b76      	ldr	r3, [pc, #472]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	4972      	ldr	r1, [pc, #456]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
 800242e:	e025      	b.n	800247c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002430:	4b70      	ldr	r3, [pc, #448]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6f      	ldr	r2, [pc, #444]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 8002436:	f043 0308 	orr.w	r3, r3, #8
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b6d      	ldr	r3, [pc, #436]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	496a      	ldr	r1, [pc, #424]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800244e:	4b69      	ldr	r3, [pc, #420]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	4965      	ldr	r1, [pc, #404]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fd1d 	bl	8002eac <RCC_SetFlashLatencyFromMSIRange>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e34d      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800247c:	f000 fc36 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b5c      	ldr	r3, [pc, #368]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	495a      	ldr	r1, [pc, #360]	; (80025f8 <HAL_RCC_OscConfig+0x29c>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
 8002498:	4a58      	ldr	r2, [pc, #352]	; (80025fc <HAL_RCC_OscConfig+0x2a0>)
 800249a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800249c:	4b58      	ldr	r3, [pc, #352]	; (8002600 <HAL_RCC_OscConfig+0x2a4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe fa29 	bl	80008f8 <HAL_InitTick>
 80024a6:	4603      	mov	r3, r0
 80024a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d052      	beq.n	8002556 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	e331      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d032      	beq.n	8002522 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024bc:	4b4d      	ldr	r3, [pc, #308]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a4c      	ldr	r2, [pc, #304]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024c8:	f7fe fb2a 	bl	8000b20 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024d0:	f7fe fb26 	bl	8000b20 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e31a      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024e2:	4b44      	ldr	r3, [pc, #272]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ee:	4b41      	ldr	r3, [pc, #260]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a40      	ldr	r2, [pc, #256]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80024f4:	f043 0308 	orr.w	r3, r3, #8
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	493b      	ldr	r1, [pc, #236]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	4936      	ldr	r1, [pc, #216]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
 8002520:	e01a      	b.n	8002558 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002522:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a33      	ldr	r2, [pc, #204]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800252e:	f7fe faf7 	bl	8000b20 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002536:	f7fe faf3 	bl	8000b20 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e2e7      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002548:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x1da>
 8002554:	e000      	b.n	8002558 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002556:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d074      	beq.n	800264e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2b08      	cmp	r3, #8
 8002568:	d005      	beq.n	8002576 <HAL_RCC_OscConfig+0x21a>
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b0c      	cmp	r3, #12
 800256e:	d10e      	bne.n	800258e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d10b      	bne.n	800258e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002576:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d064      	beq.n	800264c <HAL_RCC_OscConfig+0x2f0>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d160      	bne.n	800264c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e2c4      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_OscConfig+0x24a>
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 800259e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	e01d      	b.n	80025e2 <HAL_RCC_OscConfig+0x286>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ae:	d10c      	bne.n	80025ca <HAL_RCC_OscConfig+0x26e>
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0f      	ldr	r2, [pc, #60]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80025b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80025c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	e00b      	b.n	80025e2 <HAL_RCC_OscConfig+0x286>
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80025d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <HAL_RCC_OscConfig+0x298>)
 80025dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d01c      	beq.n	8002624 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe fa99 	bl	8000b20 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f0:	e011      	b.n	8002616 <HAL_RCC_OscConfig+0x2ba>
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000
 80025f8:	08003ef8 	.word	0x08003ef8
 80025fc:	20000000 	.word	0x20000000
 8002600:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002604:	f7fe fa8c 	bl	8000b20 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e280      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002616:	4baf      	ldr	r3, [pc, #700]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x2a8>
 8002622:	e014      	b.n	800264e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe fa7c 	bl	8000b20 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800262c:	f7fe fa78 	bl	8000b20 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e26c      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800263e:	4ba5      	ldr	r3, [pc, #660]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x2d0>
 800264a:	e000      	b.n	800264e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d060      	beq.n	800271c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	2b04      	cmp	r3, #4
 800265e:	d005      	beq.n	800266c <HAL_RCC_OscConfig+0x310>
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d119      	bne.n	800269a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d116      	bne.n	800269a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800266c:	4b99      	ldr	r3, [pc, #612]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_OscConfig+0x328>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e249      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002684:	4b93      	ldr	r3, [pc, #588]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	4990      	ldr	r1, [pc, #576]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002698:	e040      	b.n	800271c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d023      	beq.n	80026ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a2:	4b8c      	ldr	r3, [pc, #560]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a8b      	ldr	r2, [pc, #556]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe fa37 	bl	8000b20 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b6:	f7fe fa33 	bl	8000b20 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e227      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c8:	4b82      	ldr	r3, [pc, #520]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d4:	4b7f      	ldr	r3, [pc, #508]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	061b      	lsls	r3, r3, #24
 80026e2:	497c      	ldr	r1, [pc, #496]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
 80026e8:	e018      	b.n	800271c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ea:	4b7a      	ldr	r3, [pc, #488]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a79      	ldr	r2, [pc, #484]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 80026f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f6:	f7fe fa13 	bl	8000b20 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fe:	f7fe fa0f 	bl	8000b20 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e203      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002710:	4b70      	ldr	r3, [pc, #448]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d03c      	beq.n	80027a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01c      	beq.n	800276a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002730:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002736:	4a67      	ldr	r2, [pc, #412]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7fe f9ee 	bl	8000b20 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002748:	f7fe f9ea 	bl	8000b20 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e1de      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800275a:	4b5e      	ldr	r3, [pc, #376]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 800275c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0ef      	beq.n	8002748 <HAL_RCC_OscConfig+0x3ec>
 8002768:	e01b      	b.n	80027a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276a:	4b5a      	ldr	r3, [pc, #360]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 800276c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002770:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277a:	f7fe f9d1 	bl	8000b20 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002782:	f7fe f9cd 	bl	8000b20 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e1c1      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002794:	4b4f      	ldr	r3, [pc, #316]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1ef      	bne.n	8002782 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 80a6 	beq.w	80028fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b0:	2300      	movs	r3, #0
 80027b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027b4:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10d      	bne.n	80027dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c0:	4b44      	ldr	r3, [pc, #272]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	4a43      	ldr	r2, [pc, #268]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 80027c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ca:	6593      	str	r3, [r2, #88]	; 0x58
 80027cc:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d8:	2301      	movs	r3, #1
 80027da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027dc:	4b3e      	ldr	r3, [pc, #248]	; (80028d8 <HAL_RCC_OscConfig+0x57c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d118      	bne.n	800281a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e8:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <HAL_RCC_OscConfig+0x57c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a3a      	ldr	r2, [pc, #232]	; (80028d8 <HAL_RCC_OscConfig+0x57c>)
 80027ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f4:	f7fe f994 	bl	8000b20 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fc:	f7fe f990 	bl	8000b20 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e184      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280e:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <HAL_RCC_OscConfig+0x57c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d108      	bne.n	8002834 <HAL_RCC_OscConfig+0x4d8>
 8002822:	4b2c      	ldr	r3, [pc, #176]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002828:	4a2a      	ldr	r2, [pc, #168]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002832:	e024      	b.n	800287e <HAL_RCC_OscConfig+0x522>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b05      	cmp	r3, #5
 800283a:	d110      	bne.n	800285e <HAL_RCC_OscConfig+0x502>
 800283c:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002842:	4a24      	ldr	r2, [pc, #144]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800284c:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	4a20      	ldr	r2, [pc, #128]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800285c:	e00f      	b.n	800287e <HAL_RCC_OscConfig+0x522>
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002864:	4a1b      	ldr	r2, [pc, #108]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800286e:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 8002876:	f023 0304 	bic.w	r3, r3, #4
 800287a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d016      	beq.n	80028b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe f94b 	bl	8000b20 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288c:	e00a      	b.n	80028a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe f947 	bl	8000b20 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f241 3288 	movw	r2, #5000	; 0x1388
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e139      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_OscConfig+0x578>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0ed      	beq.n	800288e <HAL_RCC_OscConfig+0x532>
 80028b2:	e01a      	b.n	80028ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7fe f934 	bl	8000b20 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028ba:	e00f      	b.n	80028dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe f930 	bl	8000b20 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d906      	bls.n	80028dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e122      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028dc:	4b90      	ldr	r3, [pc, #576]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1e8      	bne.n	80028bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ea:	7ffb      	ldrb	r3, [r7, #31]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f0:	4b8b      	ldr	r3, [pc, #556]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	4a8a      	ldr	r2, [pc, #552]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 80028f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8108 	beq.w	8002b16 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	2b02      	cmp	r3, #2
 800290c:	f040 80d0 	bne.w	8002ab0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002910:	4b83      	ldr	r3, [pc, #524]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f003 0203 	and.w	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	429a      	cmp	r2, r3
 8002922:	d130      	bne.n	8002986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	3b01      	subs	r3, #1
 8002930:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d127      	bne.n	8002986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002940:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d11f      	bne.n	8002986 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002950:	2a07      	cmp	r2, #7
 8002952:	bf14      	ite	ne
 8002954:	2201      	movne	r2, #1
 8002956:	2200      	moveq	r2, #0
 8002958:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800295a:	4293      	cmp	r3, r2
 800295c:	d113      	bne.n	8002986 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	3b01      	subs	r3, #1
 800296c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d109      	bne.n	8002986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	3b01      	subs	r3, #1
 8002980:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d06e      	beq.n	8002a64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b0c      	cmp	r3, #12
 800298a:	d069      	beq.n	8002a60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800298c:	4b64      	ldr	r3, [pc, #400]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002998:	4b61      	ldr	r3, [pc, #388]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0b7      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029a8:	4b5d      	ldr	r3, [pc, #372]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a5c      	ldr	r2, [pc, #368]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 80029ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029b4:	f7fe f8b4 	bl	8000b20 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe f8b0 	bl	8000b20 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0a4      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029da:	4b51      	ldr	r3, [pc, #324]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	4b51      	ldr	r3, [pc, #324]	; (8002b24 <HAL_RCC_OscConfig+0x7c8>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029ea:	3a01      	subs	r2, #1
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	4311      	orrs	r1, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029f4:	0212      	lsls	r2, r2, #8
 80029f6:	4311      	orrs	r1, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029fc:	0852      	lsrs	r2, r2, #1
 80029fe:	3a01      	subs	r2, #1
 8002a00:	0552      	lsls	r2, r2, #21
 8002a02:	4311      	orrs	r1, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a08:	0852      	lsrs	r2, r2, #1
 8002a0a:	3a01      	subs	r2, #1
 8002a0c:	0652      	lsls	r2, r2, #25
 8002a0e:	4311      	orrs	r1, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a14:	0912      	lsrs	r2, r2, #4
 8002a16:	0452      	lsls	r2, r2, #17
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	4941      	ldr	r1, [pc, #260]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a20:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a3e      	ldr	r2, [pc, #248]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a2c:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a3b      	ldr	r2, [pc, #236]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a38:	f7fe f872 	bl	8000b20 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe f86e 	bl	8000b20 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e062      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a52:	4b33      	ldr	r3, [pc, #204]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a5e:	e05a      	b.n	8002b16 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e059      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a64:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d152      	bne.n	8002b16 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a70:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a2a      	ldr	r2, [pc, #168]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a7c:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a27      	ldr	r2, [pc, #156]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a88:	f7fe f84a 	bl	8000b20 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a90:	f7fe f846 	bl	8000b20 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e03a      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x734>
 8002aae:	e032      	b.n	8002b16 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d02d      	beq.n	8002b12 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a19      	ldr	r2, [pc, #100]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002abc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ac0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ace:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002ad4:	f023 0303 	bic.w	r3, r3, #3
 8002ad8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002ae0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe f819 	bl	8000b20 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fe f815 	bl	8000b20 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e009      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCC_OscConfig+0x7c4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCC_OscConfig+0x796>
 8002b10:	e001      	b.n	8002b16 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3720      	adds	r7, #32
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000
 8002b24:	f99d808c 	.word	0xf99d808c

08002b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0c8      	b.n	8002cce <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b66      	ldr	r3, [pc, #408]	; (8002cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d910      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b63      	ldr	r3, [pc, #396]	; (8002cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 0207 	bic.w	r2, r3, #7
 8002b52:	4961      	ldr	r1, [pc, #388]	; (8002cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0b0      	b.n	8002cce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d04c      	beq.n	8002c12 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b80:	4b56      	ldr	r3, [pc, #344]	; (8002cdc <HAL_RCC_ClockConfig+0x1b4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d121      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e09e      	b.n	8002cce <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b98:	4b50      	ldr	r3, [pc, #320]	; (8002cdc <HAL_RCC_ClockConfig+0x1b4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d115      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e092      	b.n	8002cce <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bb0:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <HAL_RCC_ClockConfig+0x1b4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d109      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e086      	b.n	8002cce <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc0:	4b46      	ldr	r3, [pc, #280]	; (8002cdc <HAL_RCC_ClockConfig+0x1b4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e07e      	b.n	8002cce <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bd0:	4b42      	ldr	r3, [pc, #264]	; (8002cdc <HAL_RCC_ClockConfig+0x1b4>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f023 0203 	bic.w	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	493f      	ldr	r1, [pc, #252]	; (8002cdc <HAL_RCC_ClockConfig+0x1b4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be2:	f7fd ff9d 	bl	8000b20 <HAL_GetTick>
 8002be6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be8:	e00a      	b.n	8002c00 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bea:	f7fd ff99 	bl	8000b20 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e066      	b.n	8002cce <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <HAL_RCC_ClockConfig+0x1b4>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 020c 	and.w	r2, r3, #12
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d1eb      	bne.n	8002bea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d008      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1e:	4b2f      	ldr	r3, [pc, #188]	; (8002cdc <HAL_RCC_ClockConfig+0x1b4>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	492c      	ldr	r1, [pc, #176]	; (8002cdc <HAL_RCC_ClockConfig+0x1b4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d210      	bcs.n	8002c60 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 0207 	bic.w	r2, r3, #7
 8002c46:	4924      	ldr	r1, [pc, #144]	; (8002cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e036      	b.n	8002cce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <HAL_RCC_ClockConfig+0x1b4>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4918      	ldr	r1, [pc, #96]	; (8002cdc <HAL_RCC_ClockConfig+0x1b4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8a:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <HAL_RCC_ClockConfig+0x1b4>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4910      	ldr	r1, [pc, #64]	; (8002cdc <HAL_RCC_ClockConfig+0x1b4>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c9e:	f000 f825 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <HAL_RCC_ClockConfig+0x1b4>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	490c      	ldr	r1, [pc, #48]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	5ccb      	ldrb	r3, [r1, r3]
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fe18 	bl	80008f8 <HAL_InitTick>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ccc:	7afb      	ldrb	r3, [r7, #11]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40022000 	.word	0x40022000
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	08003ef8 	.word	0x08003ef8
 8002ce4:	20000000 	.word	0x20000000
 8002ce8:	20000004 	.word	0x20000004

08002cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cfa:	4b3e      	ldr	r3, [pc, #248]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d04:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x34>
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d121      	bne.n	8002d5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d11e      	bne.n	8002d5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d20:	4b34      	ldr	r3, [pc, #208]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d2c:	4b31      	ldr	r3, [pc, #196]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	e005      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d48:	4a2b      	ldr	r2, [pc, #172]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d102      	bne.n	8002d6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d64:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	e004      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d134      	bne.n	8002de4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d7a:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d003      	beq.n	8002d92 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d003      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0xac>
 8002d90:	e005      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d92:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d94:	617b      	str	r3, [r7, #20]
      break;
 8002d96:	e005      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d9a:	617b      	str	r3, [r7, #20]
      break;
 8002d9c:	e002      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	617b      	str	r3, [r7, #20]
      break;
 8002da2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	3301      	adds	r3, #1
 8002db0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	fb02 f203 	mul.w	r2, r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	0e5b      	lsrs	r3, r3, #25
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002de4:	69bb      	ldr	r3, [r7, #24]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3724      	adds	r7, #36	; 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	08003f10 	.word	0x08003f10
 8002dfc:	00f42400 	.word	0x00f42400
 8002e00:	007a1200 	.word	0x007a1200

08002e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000000 	.word	0x20000000

08002e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e20:	f7ff fff0 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	0adb      	lsrs	r3, r3, #11
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	4904      	ldr	r1, [pc, #16]	; (8002e44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	08003f08 	.word	0x08003f08

08002e48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	220f      	movs	r2, #15
 8002e56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0203 	and.w	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	08db      	lsrs	r3, r3, #3
 8002e82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_RCC_GetClockConfig+0x60>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0207 	and.w	r2, r3, #7
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	601a      	str	r2, [r3, #0]
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40022000 	.word	0x40022000

08002eac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002eb8:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ec4:	f7ff f9e6 	bl	8002294 <HAL_PWREx_GetVoltageRange>
 8002ec8:	6178      	str	r0, [r7, #20]
 8002eca:	e014      	b.n	8002ef6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ecc:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	4a24      	ldr	r2, [pc, #144]	; (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed8:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ee4:	f7ff f9d6 	bl	8002294 <HAL_PWREx_GetVoltageRange>
 8002ee8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eea:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002efc:	d10b      	bne.n	8002f16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b80      	cmp	r3, #128	; 0x80
 8002f02:	d919      	bls.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2ba0      	cmp	r3, #160	; 0xa0
 8002f08:	d902      	bls.n	8002f10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	e013      	b.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f10:	2301      	movs	r3, #1
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	e010      	b.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b80      	cmp	r3, #128	; 0x80
 8002f1a:	d902      	bls.n	8002f22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	e00a      	b.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b80      	cmp	r3, #128	; 0x80
 8002f26:	d102      	bne.n	8002f2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f28:	2302      	movs	r3, #2
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	e004      	b.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b70      	cmp	r3, #112	; 0x70
 8002f32:	d101      	bne.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f34:	2301      	movs	r3, #1
 8002f36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 0207 	bic.w	r2, r3, #7
 8002f40:	4909      	ldr	r1, [pc, #36]	; (8002f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f48:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d001      	beq.n	8002f5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40022000 	.word	0x40022000

08002f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f74:	2300      	movs	r3, #0
 8002f76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f78:	2300      	movs	r3, #0
 8002f7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d041      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f90:	d02a      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f96:	d824      	bhi.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f9c:	d008      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fa2:	d81e      	bhi.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fac:	d010      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fae:	e018      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fb0:	4b86      	ldr	r3, [pc, #536]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a85      	ldr	r2, [pc, #532]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fbc:	e015      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fabb 	bl	8003540 <RCCEx_PLLSAI1_Config>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fce:	e00c      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3320      	adds	r3, #32
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fba6 	bl	8003728 <RCCEx_PLLSAI2_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fe0:	e003      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	74fb      	strb	r3, [r7, #19]
      break;
 8002fe6:	e000      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fea:	7cfb      	ldrb	r3, [r7, #19]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10b      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ff0:	4b76      	ldr	r3, [pc, #472]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ffe:	4973      	ldr	r1, [pc, #460]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003006:	e001      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d041      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800301c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003020:	d02a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003022:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003026:	d824      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003028:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800302c:	d008      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800302e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003032:	d81e      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800303c:	d010      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800303e:	e018      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003040:	4b62      	ldr	r3, [pc, #392]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4a61      	ldr	r2, [pc, #388]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800304c:	e015      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3304      	adds	r3, #4
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fa73 	bl	8003540 <RCCEx_PLLSAI1_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800305e:	e00c      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3320      	adds	r3, #32
 8003064:	2100      	movs	r1, #0
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fb5e 	bl	8003728 <RCCEx_PLLSAI2_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003070:	e003      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	74fb      	strb	r3, [r7, #19]
      break;
 8003076:	e000      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800307a:	7cfb      	ldrb	r3, [r7, #19]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003080:	4b52      	ldr	r3, [pc, #328]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003086:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800308e:	494f      	ldr	r1, [pc, #316]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003096:	e001      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80a0 	beq.w	80031ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c4:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	4a40      	ldr	r2, [pc, #256]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ce:	6593      	str	r3, [r2, #88]	; 0x58
 80030d0:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030dc:	2301      	movs	r3, #1
 80030de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030e0:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a3a      	ldr	r2, [pc, #232]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ec:	f7fd fd18 	bl	8000b20 <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030f2:	e009      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f4:	f7fd fd14 	bl	8000b20 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d902      	bls.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	74fb      	strb	r3, [r7, #19]
        break;
 8003106:	e005      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003108:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0ef      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003114:	7cfb      	ldrb	r3, [r7, #19]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d15c      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800311a:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003124:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01f      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	429a      	cmp	r2, r3
 8003136:	d019      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003138:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003142:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003144:	4b21      	ldr	r3, [pc, #132]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	4a20      	ldr	r2, [pc, #128]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003154:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003164:	4a19      	ldr	r2, [pc, #100]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d016      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7fd fcd3 	bl	8000b20 <HAL_GetTick>
 800317a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317c:	e00b      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fd fccf 	bl	8000b20 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d902      	bls.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	74fb      	strb	r3, [r7, #19]
            break;
 8003194:	e006      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003196:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0ec      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031aa:	4b08      	ldr	r3, [pc, #32]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ba:	4904      	ldr	r1, [pc, #16]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031c2:	e009      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031c4:	7cfb      	ldrb	r3, [r7, #19]
 80031c6:	74bb      	strb	r3, [r7, #18]
 80031c8:	e006      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d8:	7c7b      	ldrb	r3, [r7, #17]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d105      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031de:	4b9e      	ldr	r3, [pc, #632]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	4a9d      	ldr	r2, [pc, #628]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031f6:	4b98      	ldr	r3, [pc, #608]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fc:	f023 0203 	bic.w	r2, r3, #3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	4994      	ldr	r1, [pc, #592]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003218:	4b8f      	ldr	r3, [pc, #572]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f023 020c 	bic.w	r2, r3, #12
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	498c      	ldr	r1, [pc, #560]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800323a:	4b87      	ldr	r3, [pc, #540]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	4983      	ldr	r1, [pc, #524]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800325c:	4b7e      	ldr	r3, [pc, #504]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	497b      	ldr	r1, [pc, #492]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800327e:	4b76      	ldr	r3, [pc, #472]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328c:	4972      	ldr	r1, [pc, #456]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032a0:	4b6d      	ldr	r3, [pc, #436]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	496a      	ldr	r1, [pc, #424]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032c2:	4b65      	ldr	r3, [pc, #404]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	4961      	ldr	r1, [pc, #388]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032e4:	4b5c      	ldr	r3, [pc, #368]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f2:	4959      	ldr	r1, [pc, #356]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003306:	4b54      	ldr	r3, [pc, #336]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003314:	4950      	ldr	r1, [pc, #320]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003328:	4b4b      	ldr	r3, [pc, #300]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003336:	4948      	ldr	r1, [pc, #288]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800334a:	4b43      	ldr	r3, [pc, #268]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	493f      	ldr	r1, [pc, #252]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d028      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800336c:	4b3a      	ldr	r3, [pc, #232]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003372:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800337a:	4937      	ldr	r1, [pc, #220]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800338a:	d106      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a31      	ldr	r2, [pc, #196]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003396:	60d3      	str	r3, [r2, #12]
 8003398:	e011      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800339e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033a2:	d10c      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3304      	adds	r3, #4
 80033a8:	2101      	movs	r1, #1
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f8c8 	bl	8003540 <RCCEx_PLLSAI1_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033ba:	7cfb      	ldrb	r3, [r7, #19]
 80033bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d028      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033ca:	4b23      	ldr	r3, [pc, #140]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	491f      	ldr	r1, [pc, #124]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033e8:	d106      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ea:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	4a1a      	ldr	r2, [pc, #104]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033f4:	60d3      	str	r3, [r2, #12]
 80033f6:	e011      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003400:	d10c      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	2101      	movs	r1, #1
 8003408:	4618      	mov	r0, r3
 800340a:	f000 f899 	bl	8003540 <RCCEx_PLLSAI1_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003412:	7cfb      	ldrb	r3, [r7, #19]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d02b      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003436:	4908      	ldr	r1, [pc, #32]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003446:	d109      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003448:	4b03      	ldr	r3, [pc, #12]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4a02      	ldr	r2, [pc, #8]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003452:	60d3      	str	r3, [r2, #12]
 8003454:	e014      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003464:	d10c      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3304      	adds	r3, #4
 800346a:	2101      	movs	r1, #1
 800346c:	4618      	mov	r0, r3
 800346e:	f000 f867 	bl	8003540 <RCCEx_PLLSAI1_Config>
 8003472:	4603      	mov	r3, r0
 8003474:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003476:	7cfb      	ldrb	r3, [r7, #19]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d02f      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800348c:	4b2b      	ldr	r3, [pc, #172]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800349a:	4928      	ldr	r1, [pc, #160]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034aa:	d10d      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	2102      	movs	r1, #2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f844 	bl	8003540 <RCCEx_PLLSAI1_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d014      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034c2:	7cfb      	ldrb	r3, [r7, #19]
 80034c4:	74bb      	strb	r3, [r7, #18]
 80034c6:	e011      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d0:	d10c      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3320      	adds	r3, #32
 80034d6:	2102      	movs	r1, #2
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 f925 	bl	8003728 <RCCEx_PLLSAI2_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034e2:	7cfb      	ldrb	r3, [r7, #19]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034f8:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003506:	490d      	ldr	r1, [pc, #52]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003520:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800352a:	4904      	ldr	r1, [pc, #16]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003532:	7cbb      	ldrb	r3, [r7, #18]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000

08003540 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800354e:	4b75      	ldr	r3, [pc, #468]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d018      	beq.n	800358c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800355a:	4b72      	ldr	r3, [pc, #456]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0203 	and.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d10d      	bne.n	8003586 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
       ||
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003572:	4b6c      	ldr	r3, [pc, #432]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
       ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d047      	beq.n	8003616 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	e044      	b.n	8003616 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d018      	beq.n	80035c6 <RCCEx_PLLSAI1_Config+0x86>
 8003594:	2b03      	cmp	r3, #3
 8003596:	d825      	bhi.n	80035e4 <RCCEx_PLLSAI1_Config+0xa4>
 8003598:	2b01      	cmp	r3, #1
 800359a:	d002      	beq.n	80035a2 <RCCEx_PLLSAI1_Config+0x62>
 800359c:	2b02      	cmp	r3, #2
 800359e:	d009      	beq.n	80035b4 <RCCEx_PLLSAI1_Config+0x74>
 80035a0:	e020      	b.n	80035e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035a2:	4b60      	ldr	r3, [pc, #384]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d11d      	bne.n	80035ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b2:	e01a      	b.n	80035ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035b4:	4b5b      	ldr	r3, [pc, #364]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d116      	bne.n	80035ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c4:	e013      	b.n	80035ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035c6:	4b57      	ldr	r3, [pc, #348]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10f      	bne.n	80035f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035d2:	4b54      	ldr	r3, [pc, #336]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035e2:	e006      	b.n	80035f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
      break;
 80035e8:	e004      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ea:	bf00      	nop
 80035ec:	e002      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ee:	bf00      	nop
 80035f0:	e000      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10d      	bne.n	8003616 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035fa:	4b4a      	ldr	r3, [pc, #296]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	430b      	orrs	r3, r1
 8003610:	4944      	ldr	r1, [pc, #272]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d17d      	bne.n	8003718 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800361c:	4b41      	ldr	r3, [pc, #260]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a40      	ldr	r2, [pc, #256]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003622:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003628:	f7fd fa7a 	bl	8000b20 <HAL_GetTick>
 800362c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800362e:	e009      	b.n	8003644 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003630:	f7fd fa76 	bl	8000b20 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d902      	bls.n	8003644 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	73fb      	strb	r3, [r7, #15]
        break;
 8003642:	e005      	b.n	8003650 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003644:	4b37      	ldr	r3, [pc, #220]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ef      	bne.n	8003630 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d160      	bne.n	8003718 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d111      	bne.n	8003680 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800365c:	4b31      	ldr	r3, [pc, #196]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6892      	ldr	r2, [r2, #8]
 800366c:	0211      	lsls	r1, r2, #8
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68d2      	ldr	r2, [r2, #12]
 8003672:	0912      	lsrs	r2, r2, #4
 8003674:	0452      	lsls	r2, r2, #17
 8003676:	430a      	orrs	r2, r1
 8003678:	492a      	ldr	r1, [pc, #168]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800367a:	4313      	orrs	r3, r2
 800367c:	610b      	str	r3, [r1, #16]
 800367e:	e027      	b.n	80036d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d112      	bne.n	80036ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003686:	4b27      	ldr	r3, [pc, #156]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800368e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6892      	ldr	r2, [r2, #8]
 8003696:	0211      	lsls	r1, r2, #8
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6912      	ldr	r2, [r2, #16]
 800369c:	0852      	lsrs	r2, r2, #1
 800369e:	3a01      	subs	r2, #1
 80036a0:	0552      	lsls	r2, r2, #21
 80036a2:	430a      	orrs	r2, r1
 80036a4:	491f      	ldr	r1, [pc, #124]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	610b      	str	r3, [r1, #16]
 80036aa:	e011      	b.n	80036d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6892      	ldr	r2, [r2, #8]
 80036bc:	0211      	lsls	r1, r2, #8
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6952      	ldr	r2, [r2, #20]
 80036c2:	0852      	lsrs	r2, r2, #1
 80036c4:	3a01      	subs	r2, #1
 80036c6:	0652      	lsls	r2, r2, #25
 80036c8:	430a      	orrs	r2, r1
 80036ca:	4916      	ldr	r1, [pc, #88]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036d0:	4b14      	ldr	r3, [pc, #80]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a13      	ldr	r2, [pc, #76]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036dc:	f7fd fa20 	bl	8000b20 <HAL_GetTick>
 80036e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036e2:	e009      	b.n	80036f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036e4:	f7fd fa1c 	bl	8000b20 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d902      	bls.n	80036f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	73fb      	strb	r3, [r7, #15]
          break;
 80036f6:	e005      	b.n	8003704 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ef      	beq.n	80036e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800370a:	4b06      	ldr	r3, [pc, #24]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	4904      	ldr	r1, [pc, #16]	; (8003724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003714:	4313      	orrs	r3, r2
 8003716:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000

08003728 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003736:	4b6a      	ldr	r3, [pc, #424]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d018      	beq.n	8003774 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003742:	4b67      	ldr	r3, [pc, #412]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0203 	and.w	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d10d      	bne.n	800376e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
       ||
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800375a:	4b61      	ldr	r3, [pc, #388]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
       ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d047      	beq.n	80037fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
 8003772:	e044      	b.n	80037fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d018      	beq.n	80037ae <RCCEx_PLLSAI2_Config+0x86>
 800377c:	2b03      	cmp	r3, #3
 800377e:	d825      	bhi.n	80037cc <RCCEx_PLLSAI2_Config+0xa4>
 8003780:	2b01      	cmp	r3, #1
 8003782:	d002      	beq.n	800378a <RCCEx_PLLSAI2_Config+0x62>
 8003784:	2b02      	cmp	r3, #2
 8003786:	d009      	beq.n	800379c <RCCEx_PLLSAI2_Config+0x74>
 8003788:	e020      	b.n	80037cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800378a:	4b55      	ldr	r3, [pc, #340]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d11d      	bne.n	80037d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379a:	e01a      	b.n	80037d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800379c:	4b50      	ldr	r3, [pc, #320]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d116      	bne.n	80037d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ac:	e013      	b.n	80037d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ae:	4b4c      	ldr	r3, [pc, #304]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10f      	bne.n	80037da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037ba:	4b49      	ldr	r3, [pc, #292]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ca:	e006      	b.n	80037da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
      break;
 80037d0:	e004      	b.n	80037dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037d2:	bf00      	nop
 80037d4:	e002      	b.n	80037dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037d6:	bf00      	nop
 80037d8:	e000      	b.n	80037dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037da:	bf00      	nop
    }

    if(status == HAL_OK)
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10d      	bne.n	80037fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037e2:	4b3f      	ldr	r3, [pc, #252]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6819      	ldr	r1, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	430b      	orrs	r3, r1
 80037f8:	4939      	ldr	r1, [pc, #228]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d167      	bne.n	80038d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003804:	4b36      	ldr	r3, [pc, #216]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a35      	ldr	r2, [pc, #212]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003810:	f7fd f986 	bl	8000b20 <HAL_GetTick>
 8003814:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003816:	e009      	b.n	800382c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003818:	f7fd f982 	bl	8000b20 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d902      	bls.n	800382c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	73fb      	strb	r3, [r7, #15]
        break;
 800382a:	e005      	b.n	8003838 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800382c:	4b2c      	ldr	r3, [pc, #176]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ef      	bne.n	8003818 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d14a      	bne.n	80038d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d111      	bne.n	8003868 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003844:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800384c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6892      	ldr	r2, [r2, #8]
 8003854:	0211      	lsls	r1, r2, #8
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68d2      	ldr	r2, [r2, #12]
 800385a:	0912      	lsrs	r2, r2, #4
 800385c:	0452      	lsls	r2, r2, #17
 800385e:	430a      	orrs	r2, r1
 8003860:	491f      	ldr	r1, [pc, #124]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003862:	4313      	orrs	r3, r2
 8003864:	614b      	str	r3, [r1, #20]
 8003866:	e011      	b.n	800388c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003868:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003870:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6892      	ldr	r2, [r2, #8]
 8003878:	0211      	lsls	r1, r2, #8
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6912      	ldr	r2, [r2, #16]
 800387e:	0852      	lsrs	r2, r2, #1
 8003880:	3a01      	subs	r2, #1
 8003882:	0652      	lsls	r2, r2, #25
 8003884:	430a      	orrs	r2, r1
 8003886:	4916      	ldr	r1, [pc, #88]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003888:	4313      	orrs	r3, r2
 800388a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003898:	f7fd f942 	bl	8000b20 <HAL_GetTick>
 800389c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800389e:	e009      	b.n	80038b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038a0:	f7fd f93e 	bl	8000b20 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d902      	bls.n	80038b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	73fb      	strb	r3, [r7, #15]
          break;
 80038b2:	e005      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ef      	beq.n	80038a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	4904      	ldr	r1, [pc, #16]	; (80038e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000

080038e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e049      	b.n	800398a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f841 	bl	8003992 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f000 f9f8 	bl	8003d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d001      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e04f      	b.n	8003a60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a23      	ldr	r2, [pc, #140]	; (8003a6c <HAL_TIM_Base_Start_IT+0xc4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01d      	beq.n	8003a1e <HAL_TIM_Base_Start_IT+0x76>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ea:	d018      	beq.n	8003a1e <HAL_TIM_Base_Start_IT+0x76>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1f      	ldr	r2, [pc, #124]	; (8003a70 <HAL_TIM_Base_Start_IT+0xc8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_TIM_Base_Start_IT+0x76>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1e      	ldr	r2, [pc, #120]	; (8003a74 <HAL_TIM_Base_Start_IT+0xcc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00e      	beq.n	8003a1e <HAL_TIM_Base_Start_IT+0x76>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1c      	ldr	r2, [pc, #112]	; (8003a78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_TIM_Base_Start_IT+0x76>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1b      	ldr	r2, [pc, #108]	; (8003a7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_TIM_Base_Start_IT+0x76>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a19      	ldr	r2, [pc, #100]	; (8003a80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d115      	bne.n	8003a4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b06      	cmp	r3, #6
 8003a2e:	d015      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0xb4>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a36:	d011      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a48:	e008      	b.n	8003a5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e000      	b.n	8003a5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	40012c00 	.word	0x40012c00
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40000800 	.word	0x40000800
 8003a78:	40000c00 	.word	0x40000c00
 8003a7c:	40013400 	.word	0x40013400
 8003a80:	40014000 	.word	0x40014000
 8003a84:	00010007 	.word	0x00010007

08003a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d122      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d11b      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0202 	mvn.w	r2, #2
 8003ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f905 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003ad0:	e005      	b.n	8003ade <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f8f7 	bl	8003cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f908 	bl	8003cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d122      	bne.n	8003b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d11b      	bne.n	8003b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0204 	mvn.w	r2, #4
 8003b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f8db 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003b24:	e005      	b.n	8003b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f8cd 	bl	8003cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f8de 	bl	8003cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d122      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d11b      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0208 	mvn.w	r2, #8
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2204      	movs	r2, #4
 8003b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f8b1 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f8a3 	bl	8003cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f8b4 	bl	8003cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b10      	cmp	r3, #16
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d11b      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0210 	mvn.w	r2, #16
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f887 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f879 	bl	8003cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f88a 	bl	8003cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d10e      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d107      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0201 	mvn.w	r2, #1
 8003c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fc fd72 	bl	80006f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b80      	cmp	r3, #128	; 0x80
 8003c18:	d10e      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c24:	2b80      	cmp	r3, #128	; 0x80
 8003c26:	d107      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f914 	bl	8003e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c46:	d10e      	bne.n	8003c66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c52:	2b80      	cmp	r3, #128	; 0x80
 8003c54:	d107      	bne.n	8003c66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f907 	bl	8003e74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d10e      	bne.n	8003c92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b40      	cmp	r3, #64	; 0x40
 8003c80:	d107      	bne.n	8003c92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f838 	bl	8003d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d10e      	bne.n	8003cbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d107      	bne.n	8003cbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f06f 0220 	mvn.w	r2, #32
 8003cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f8c7 	bl	8003e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a40      	ldr	r2, [pc, #256]	; (8003e2c <TIM_Base_SetConfig+0x114>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d013      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d36:	d00f      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a3d      	ldr	r2, [pc, #244]	; (8003e30 <TIM_Base_SetConfig+0x118>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00b      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a3c      	ldr	r2, [pc, #240]	; (8003e34 <TIM_Base_SetConfig+0x11c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d007      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a3b      	ldr	r2, [pc, #236]	; (8003e38 <TIM_Base_SetConfig+0x120>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a3a      	ldr	r2, [pc, #232]	; (8003e3c <TIM_Base_SetConfig+0x124>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d108      	bne.n	8003d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2f      	ldr	r2, [pc, #188]	; (8003e2c <TIM_Base_SetConfig+0x114>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01f      	beq.n	8003db2 <TIM_Base_SetConfig+0x9a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d78:	d01b      	beq.n	8003db2 <TIM_Base_SetConfig+0x9a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a2c      	ldr	r2, [pc, #176]	; (8003e30 <TIM_Base_SetConfig+0x118>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d017      	beq.n	8003db2 <TIM_Base_SetConfig+0x9a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <TIM_Base_SetConfig+0x11c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <TIM_Base_SetConfig+0x9a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a2a      	ldr	r2, [pc, #168]	; (8003e38 <TIM_Base_SetConfig+0x120>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00f      	beq.n	8003db2 <TIM_Base_SetConfig+0x9a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a29      	ldr	r2, [pc, #164]	; (8003e3c <TIM_Base_SetConfig+0x124>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00b      	beq.n	8003db2 <TIM_Base_SetConfig+0x9a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a28      	ldr	r2, [pc, #160]	; (8003e40 <TIM_Base_SetConfig+0x128>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <TIM_Base_SetConfig+0x9a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a27      	ldr	r2, [pc, #156]	; (8003e44 <TIM_Base_SetConfig+0x12c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d003      	beq.n	8003db2 <TIM_Base_SetConfig+0x9a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a26      	ldr	r2, [pc, #152]	; (8003e48 <TIM_Base_SetConfig+0x130>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d108      	bne.n	8003dc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a10      	ldr	r2, [pc, #64]	; (8003e2c <TIM_Base_SetConfig+0x114>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00f      	beq.n	8003e10 <TIM_Base_SetConfig+0xf8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <TIM_Base_SetConfig+0x124>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00b      	beq.n	8003e10 <TIM_Base_SetConfig+0xf8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a11      	ldr	r2, [pc, #68]	; (8003e40 <TIM_Base_SetConfig+0x128>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d007      	beq.n	8003e10 <TIM_Base_SetConfig+0xf8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a10      	ldr	r2, [pc, #64]	; (8003e44 <TIM_Base_SetConfig+0x12c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d003      	beq.n	8003e10 <TIM_Base_SetConfig+0xf8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a0f      	ldr	r2, [pc, #60]	; (8003e48 <TIM_Base_SetConfig+0x130>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d103      	bne.n	8003e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	615a      	str	r2, [r3, #20]
}
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800
 8003e38:	40000c00 	.word	0x40000c00
 8003e3c:	40013400 	.word	0x40013400
 8003e40:	40014000 	.word	0x40014000
 8003e44:	40014400 	.word	0x40014400
 8003e48:	40014800 	.word	0x40014800

08003e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <__libc_init_array>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	4d0d      	ldr	r5, [pc, #52]	; (8003ec0 <__libc_init_array+0x38>)
 8003e8c:	4c0d      	ldr	r4, [pc, #52]	; (8003ec4 <__libc_init_array+0x3c>)
 8003e8e:	1b64      	subs	r4, r4, r5
 8003e90:	10a4      	asrs	r4, r4, #2
 8003e92:	2600      	movs	r6, #0
 8003e94:	42a6      	cmp	r6, r4
 8003e96:	d109      	bne.n	8003eac <__libc_init_array+0x24>
 8003e98:	4d0b      	ldr	r5, [pc, #44]	; (8003ec8 <__libc_init_array+0x40>)
 8003e9a:	4c0c      	ldr	r4, [pc, #48]	; (8003ecc <__libc_init_array+0x44>)
 8003e9c:	f000 f820 	bl	8003ee0 <_init>
 8003ea0:	1b64      	subs	r4, r4, r5
 8003ea2:	10a4      	asrs	r4, r4, #2
 8003ea4:	2600      	movs	r6, #0
 8003ea6:	42a6      	cmp	r6, r4
 8003ea8:	d105      	bne.n	8003eb6 <__libc_init_array+0x2e>
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
 8003eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb0:	4798      	blx	r3
 8003eb2:	3601      	adds	r6, #1
 8003eb4:	e7ee      	b.n	8003e94 <__libc_init_array+0xc>
 8003eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eba:	4798      	blx	r3
 8003ebc:	3601      	adds	r6, #1
 8003ebe:	e7f2      	b.n	8003ea6 <__libc_init_array+0x1e>
 8003ec0:	08003f40 	.word	0x08003f40
 8003ec4:	08003f40 	.word	0x08003f40
 8003ec8:	08003f40 	.word	0x08003f40
 8003ecc:	08003f44 	.word	0x08003f44

08003ed0 <memset>:
 8003ed0:	4402      	add	r2, r0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d100      	bne.n	8003eda <memset+0xa>
 8003ed8:	4770      	bx	lr
 8003eda:	f803 1b01 	strb.w	r1, [r3], #1
 8003ede:	e7f9      	b.n	8003ed4 <memset+0x4>

08003ee0 <_init>:
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	bf00      	nop
 8003ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee6:	bc08      	pop	{r3}
 8003ee8:	469e      	mov	lr, r3
 8003eea:	4770      	bx	lr

08003eec <_fini>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr
